{"ast":null,"code":"import { callService } from '../_services/call.service';\nimport { classService } from '../_services/class.service';\nimport { roleIdAdmin } from '../config/config';\nimport { GET_ALL_CallRegister, GET_CONTEXTUAL_EVENT, GET_STUDENTS_CLASS, GET_STUDENTS_ABSENT, GIVE_STUDENT_TICKET, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE, GET_OBSERVATIONS, GET_ENCOURAGEMENTS, GET_SANCTION, GET_SETTING_CALL_REGISTER } from '../constants/ActionTypes';\nimport _ from 'lodash';\nimport { getEventCallRegisterForAdmin, getEventCallRegisterForProf } from '../actions/planningActions';\nexport const getCallRegister = () => {\n  return dispatch => {\n    let apiEndpoint = `/call_registers?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: GET_ALL_CallRegister,\n        payload: response.data\n      });\n    }).catch(err => {});\n  };\n};\nexport const getContextualEventsByprofessor = professorProfile => {\n  return dispatch => {\n    let apiEndpoint = `/professors/getContextualEvent/` + professorProfile + `?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      let result = {\n        notEmpty: !_.isEmpty(response.data.contextualEvent),\n        data: response.data.contextualEvent\n      };\n      dispatch({\n        type: GET_CONTEXTUAL_EVENT,\n        payload: result\n      });\n    }).catch(err => {});\n  };\n};\nexport const callRegisterAction = {\n  getCallRegister,\n  getContextualEventsByprofessor\n};\nexport const getStudentClass = classId => {\n  return dispatch => {\n    let apiEndpoint = `/students/fetchStudentsByClassID/` + classId + `?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      let result = response.data;\n      dispatch({\n        type: GET_STUDENTS_CLASS,\n        payload: result\n      });\n    }).catch(err => {}).catch(err => {});\n  };\n}; // export const fetchAbsent = (classId) => {\n// return dispatch => {\n//   let apiEndpoint = `/student_calls/fetchAbsentStudentsByClassId/` + classId + `?access_token=${localStorage.token}`\n//   callService.get(apiEndpoint)\n//     .then(res => {\n//       if (!_.isEmpty(res.data.students)) {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       } else {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       }\n//     })\n// }\n// }\n\nexport const giveTicket = data => {\n  return dispatch => {\n    let apiEndpoint = `/absent_pass/giveTicketToPass?access_token=${localStorage.token}`;\n    callService.post(apiEndpoint, data).then(res => {\n      if (res) {\n        dispatch({\n          type: GIVE_STUDENT_TICKET,\n          payload: res.data.data\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'Le billet est affecté avec succès'\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'affectation du billet merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport function saveCallRegister(data, otherData) {\n  return dispatch => {\n    let apiEndpoint = `/call_registers/create-call-register?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response) {\n        if (otherData.roleId === roleIdAdmin) {\n          dispatch(getEventCallRegisterForAdmin(otherData.establishementId, otherData.schoolYearId, otherData.classId));\n        } else {\n          dispatch(getEventCallRegisterForProf(otherData.establishementId, otherData.schoolYearId, otherData.profileId));\n        } // dispatch({ type: , payload: response.data });\n\n\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'enregistrement de l'appel est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'enregistrement merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n}\nexport function addCallRegisterSetting(data) {\n  return dispatch => {\n    let apiEndpoint = `/call_register_settings?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response) {\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'initialisation est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'initialisation merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n}\nexport const getObservationList = () => {\n  return dispatch => {\n    let apiEndpoint = `/observations?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: GET_OBSERVATIONS,\n          payload: response.data\n        });\n      }\n    });\n  };\n};\nexport const getEncouragementList = () => {\n  return dispatch => {\n    let apiEndpoint = `/encouragements?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: GET_ENCOURAGEMENTS,\n          payload: response.data\n        });\n      }\n    });\n  };\n};\nexport const getSanctionList = () => {\n  return dispatch => {\n    let apiEndpoint = `/sanctions?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: GET_SANCTION,\n          payload: response.data\n        });\n      }\n    });\n  };\n};\nexport const getCallRegisterSetting = idEducationType => {\n  return dispatch => {\n    let apiEndpoint = `/call_register_settings?access_token=${localStorage.token}&filter[where][fk_id_education_type]=${idEducationType}`;\n    callService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: GET_SETTING_CALL_REGISTER,\n          payload: response.data\n        });\n      }\n    });\n  };\n};\nexport function editCallRegisterSetting(data) {\n  return dispatch => {\n    let apiEndpoint = `/call_register_settings/${data.id}?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then(response => {\n      if (response) {\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"La réinitialisation est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'initialisation merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/RegistreAction.js"],"names":["callService","classService","roleIdAdmin","GET_ALL_CallRegister","GET_CONTEXTUAL_EVENT","GET_STUDENTS_CLASS","GET_STUDENTS_ABSENT","GIVE_STUDENT_TICKET","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","GET_OBSERVATIONS","GET_ENCOURAGEMENTS","GET_SANCTION","GET_SETTING_CALL_REGISTER","_","getEventCallRegisterForAdmin","getEventCallRegisterForProf","getCallRegister","dispatch","apiEndpoint","localStorage","token","get","then","response","type","payload","data","catch","err","getContextualEventsByprofessor","professorProfile","result","notEmpty","isEmpty","contextualEvent","callRegisterAction","getStudentClass","classId","giveTicket","post","res","setTimeout","saveCallRegister","otherData","roleId","establishementId","schoolYearId","profileId","addCallRegisterSetting","getObservationList","getEncouragementList","getSanctionList","getCallRegisterSetting","idEducationType","editCallRegisterSetting","id","put"],"mappings":"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","sourcesContent":["import { callService } from '../_services/call.service';\nimport { classService } from '../_services/class.service';\nimport { roleIdAdmin} from '../config/config'\nimport {\n  GET_ALL_CallRegister,\n  GET_CONTEXTUAL_EVENT,\n  GET_STUDENTS_CLASS,\n  GET_STUDENTS_ABSENT,\n  GIVE_STUDENT_TICKET,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n  GET_OBSERVATIONS,\n  GET_ENCOURAGEMENTS,\n  GET_SANCTION, \n  GET_SETTING_CALL_REGISTER\n} from '../constants/ActionTypes';\nimport _ from 'lodash';\nimport {getEventCallRegisterForAdmin, getEventCallRegisterForProf} from '../actions/planningActions'\nexport const getCallRegister = () => {\n  return dispatch => {\n    let apiEndpoint = `/call_registers?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        dispatch({ type: GET_ALL_CallRegister, payload: response.data });\n      })\n      .catch(err => {});\n  };\n};\nexport const getContextualEventsByprofessor = professorProfile => {\n  return dispatch => {\n    let apiEndpoint =\n      `/professors/getContextualEvent/` +\n      professorProfile +\n      `?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        let result = {\n          notEmpty: !_.isEmpty(response.data.contextualEvent),\n          data: response.data.contextualEvent\n        };\n\n        dispatch({ type: GET_CONTEXTUAL_EVENT, payload: result });\n      })\n      .catch(err => {});\n  };\n};\n\nexport const callRegisterAction = {\n  getCallRegister,\n  getContextualEventsByprofessor\n};\n\nexport const getStudentClass = classId => {\n  return dispatch => {\n    let apiEndpoint =\n      `/students/fetchStudentsByClassID/` +\n      classId +\n      `?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        let result = response.data;\n\n        dispatch({ type: GET_STUDENTS_CLASS, payload: result });\n      })\n      .catch(err => {})\n      .catch(err => {});\n  };\n};\n\n// export const fetchAbsent = (classId) => {\n// return dispatch => {\n//   let apiEndpoint = `/student_calls/fetchAbsentStudentsByClassId/` + classId + `?access_token=${localStorage.token}`\n//   callService.get(apiEndpoint)\n//     .then(res => {\n//       if (!_.isEmpty(res.data.students)) {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       } else {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       }\n\n//     })\n// }\n\n// }\n\nexport const giveTicket = data => {\n  return dispatch => {\n    let apiEndpoint = `/absent_pass/giveTicketToPass?access_token=${localStorage.token}`;\n    callService.post(apiEndpoint, data).then(res => {\n      if (res) {\n        dispatch({ type: GIVE_STUDENT_TICKET, payload: res.data.data });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'Le billet est affecté avec succès'\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de l'affectation du billet merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\nexport function saveCallRegister(data, otherData) {\n  return (dispatch) => {\n    let apiEndpoint = `/call_registers/create-call-register?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then((response) => {\n      if (response) {\n        if (otherData.roleId === roleIdAdmin) {\n         dispatch(getEventCallRegisterForAdmin(otherData.establishementId ,otherData.schoolYearId , otherData.classId))\n        }else{\n          dispatch(getEventCallRegisterForProf(otherData.establishementId ,otherData.schoolYearId,otherData.profileId )) \n        }\n        // dispatch({ type: , payload: response.data });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'enregistrement de l'appel est effectuée avec succès\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de l'enregistrement merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n}\n\nexport function addCallRegisterSetting(data) {  \n  return (dispatch) => {\n    let apiEndpoint = `/call_register_settings?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then((response) => {      \n      if (response) {\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'initialisation est effectuée avec succès\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de l'initialisation merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n}\n\n\nexport const getObservationList = () => {\n  return dispatch => {\n    let apiEndpoint = `/observations?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        if(response){\n          dispatch({ type: GET_OBSERVATIONS, payload: response.data });\n        }\n      })\n  };\n};\n\nexport const getEncouragementList = () => {\n  return dispatch => {\n    let apiEndpoint = `/encouragements?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        if(response){\n          dispatch({ type: GET_ENCOURAGEMENTS, payload: response.data });\n        }\n      })\n  };\n};\n\nexport const getSanctionList = () => {\n  return dispatch => {\n    let apiEndpoint = `/sanctions?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        if(response){\n          dispatch({ type: GET_SANCTION, payload: response.data });\n        }\n      })\n  };\n};\nexport const getCallRegisterSetting = (idEducationType) => {\n  return dispatch => {\n    let apiEndpoint = `/call_register_settings?access_token=${localStorage.token}&filter[where][fk_id_education_type]=${idEducationType}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        if(response){\n          dispatch({ type: GET_SETTING_CALL_REGISTER, payload: response.data });\n        }\n      })\n  };\n};\n\nexport function editCallRegisterSetting(data) {\n  return (dispatch) => {\n    let apiEndpoint = `/call_register_settings/${data.id}?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then((response) => {\n      if (response) {\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"La réinitialisation est effectuée avec succès\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de l'initialisation merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n}"]},"metadata":{},"sourceType":"module"}