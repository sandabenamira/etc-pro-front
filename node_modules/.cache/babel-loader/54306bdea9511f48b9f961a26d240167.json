{"ast":null,"code":"import { FETCH_ALL_TODO, FETCH_ALL_TODO_CONVERSATION, FETCH_ALL_TODO_CONVERSATION_SUCCESS, FETCH_ALL_TODO_SUCCESS, GET_IMPORTANT_TODO, GET_MARK_AS_START, GET_NAV_FILTERS, GET_NAV_LABELS, GET_STARRED_TODO, GET_UNIMPORTANT_TODO, GET_UNSELECTED_ALL_TODO, GET_UNSTARRED_TODO, HANDLE_REQUEST_CLOSE, ON_DELETE_TODO, ON_HIDE_LOADER, ON_LABEL_MENU_ITEM_SELECT, ON_LABEL_SELECT, ON_LABEL_UPDATE, ON_OPTION_MENU_SELECT, ON_SORTEND, ON_TODO_ADD, ON_TODO_CHECKED, ON_TODO_SELECT, ON_TODO_UPDATE, ON_TOGGLE_DRAWER, SEARCH_TODO, SELECT_ALL_TODO, SET_CURRENT_TODO_NULL, SHOW_MESSAGE, UPDATE_SEARCH, GET_LABELS_FOR_HOMRWORK, GET_NAV_LABELS_FOR_ADMIN, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE, ADD_TODO_CONVERSATION } from '../constants/ActionTypes';\nimport _ from 'lodash';\nimport { roleIdProfessor } from '../config/config';\nimport { classService } from \"../_services/class.service\";\nconst colors = ['purple lighten-2', 'amber darken-1', 'green darken-3', 'light-blue darken-4', 'purple lighten-3', 'amber darken-2', 'green darken-1', 'light-blue darken-2'];\nexport const fetchTodo = () => {\n  return {\n    type: FETCH_ALL_TODO\n  };\n};\nexport const fetchTodoConversation = () => {\n  return {\n    type: FETCH_ALL_TODO_CONVERSATION\n  };\n};\nexport const fetchTodosSuccess = mails => {\n  return {\n    type: FETCH_ALL_TODO_SUCCESS,\n    payload: mails\n  };\n};\nexport const fetchTodosConversationSuccess = mails => {\n  return {\n    type: FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n    payload: mails\n  };\n};\nexport const showTodoMessage = message => {\n  return {\n    type: SHOW_MESSAGE,\n    payload: message\n  };\n};\nexport const onSortEnd = data => {\n  return {\n    type: ON_SORTEND,\n    payload: data\n  };\n};\nexport const onOptionMenuSelect = () => {\n  return {\n    type: ON_OPTION_MENU_SELECT\n  };\n};\nexport const onLabelSelect = () => {\n  return {\n    type: ON_LABEL_SELECT\n  };\n};\nexport const selectAllTodo = () => {\n  return {\n    type: SELECT_ALL_TODO\n  };\n}; // export const getAllTodo = () => {\n//   return {\n//     type: GET_ALL_TODO,\n//   };\n// };\n\nexport const getUnselectedAllTodo = () => {\n  return {\n    type: GET_UNSELECTED_ALL_TODO\n  };\n};\nexport const getStarredToDo = () => {\n  return {\n    type: GET_STARRED_TODO\n  };\n};\nexport const getUnStarredTodo = () => {\n  return {\n    type: GET_UNSTARRED_TODO\n  };\n};\nexport const getImportantToDo = () => {\n  return {\n    type: GET_IMPORTANT_TODO\n  };\n};\nexport const getUnimportantToDo = () => {\n  return {\n    type: GET_UNIMPORTANT_TODO\n  };\n};\nexport const onLabelMenuItemSelect = label => {\n  return {\n    type: ON_LABEL_MENU_ITEM_SELECT,\n    payload: label\n  };\n};\nexport const onLabelUpdate = data => {\n  return {\n    type: ON_LABEL_UPDATE,\n    payload: data\n  };\n};\nexport const onMarkAsStart = data => {\n  return {\n    type: GET_MARK_AS_START,\n    payload: data\n  };\n};\nexport const onToDoUpdate = data => {\n  return {\n    type: ON_TODO_UPDATE,\n    payload: data\n  };\n};\nexport const onDeleteToDo = data => {\n  return {\n    type: ON_DELETE_TODO,\n    payload: data\n  };\n};\nexport const getNavFilters = data => {\n  return {\n    type: GET_NAV_FILTERS,\n    payload: data\n  };\n};\nexport const getNavLabels = (dataLabel, id) => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/fetchHomeworkByProfileId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let dataFiltred = [];\n      response.data.homeworks.forEach(element => {\n        _.forEach(element.homeworkClass, function (value, key) {\n          if (value.class_id === dataLabel.class_id) {\n            dataFiltred.push(element);\n          }\n        });\n      });\n      dispatch({\n        type: GET_NAV_LABELS,\n        payload: dataFiltred\n      });\n    }).catch(error => {});\n  };\n};\nexport const getNavLabelsForAdmin = (dataLabel, data) => {\n  return function (dispatch) {\n    let dataFiltred = [];\n    data.forEach(element => {\n      _.forEach(element.homeworkClass, function (value, key) {\n        if (value.class_id === dataLabel.class_id) {\n          dataFiltred.push(element);\n        }\n      });\n    });\n    dispatch({\n      type: GET_NAV_LABELS_FOR_ADMIN,\n      payload: dataFiltred\n    });\n  };\n};\nexport const onSearchTodo = searchText => {\n  return {\n    type: SEARCH_TODO,\n    payload: searchText\n  };\n};\nexport const onTodoChecked = data => {\n  return {\n    type: ON_TODO_CHECKED,\n    payload: data\n  };\n};\nexport const onTodoAdd = data => {\n  return {\n    type: ON_TODO_ADD,\n    payload: data\n  };\n};\nexport const onTodoSelect = todo => {\n  return {\n    type: ON_TODO_SELECT,\n    payload: todo\n  };\n};\nexport const setCurrentToDoNull = () => {\n  return {\n    type: SET_CURRENT_TODO_NULL\n  };\n};\nexport const toDoToggleDrawer = () => {\n  return {\n    type: ON_TOGGLE_DRAWER\n  };\n};\nexport const updateSearch = searchTodo => {\n  return {\n    type: UPDATE_SEARCH,\n    payload: searchTodo\n  };\n};\nexport const hideToDoLoader = () => {\n  return {\n    type: ON_HIDE_LOADER\n  };\n};\nexport const handleToDoMenuRequestClose = () => {\n  return {\n    type: HANDLE_REQUEST_CLOSE\n  };\n};\nexport function addAndAssignHomework(homework, file) {\n  if (file !== null) {\n    const fileExtension = file.name.replace(/^.*\\./, '');\n    const fileName = 'Devoir_' + Math.random().toString(36).slice(2) + '_Matiere_' + homework.subject_id + '_Professor_' + homework.professor_id + '.' + fileExtension;\n    const myNewFile = new File([file], fileName, {\n      type: file.type\n    });\n    const upload = {\n      file: myNewFile,\n      establishment_id: homework.establishment_id\n    };\n    let DataWithFile = {\n      files: fileName,\n      title: homework.title,\n      description: homework.description,\n      date_creation: homework.date_creation,\n      status: true,\n      professor_id: homework.professor_id,\n      subject_id: homework.subject_id,\n      assignHomeworkList: homework.assignHomeworkList,\n      files_name: homework.files_name\n    };\n    return dispatch => {\n      let apiEndpoint = `/homeworks/addAndAssignHomework?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, DataWithFile).then(response => {\n        if (response) {\n          dispatch(uploadFile(upload));\n          dispatch({\n            type: ON_TODO_ADD,\n            payload: response.data.homework\n          });\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: 'message.add.success'\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_SUCCESS_MESSAGE\n            });\n          }, 4000);\n        } else {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"message.add.failed\"\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_ERROR_MESSAGE\n            });\n          }, 4000);\n        }\n      });\n    };\n  } else {\n    return dispatch => {\n      let apiEndpoint = `/homeworks/addAndAssignHomework?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, homework).then(response => {\n        if (response) {\n          dispatch({\n            type: ON_TODO_ADD,\n            payload: response.data.homework\n          });\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: 'message.add.success'\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_SUCCESS_MESSAGE\n            });\n          }, 4000);\n        } else {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"message.add.failed\"\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_ERROR_MESSAGE\n            });\n          }, 4000);\n        }\n      });\n    };\n  }\n}\n;\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return dispatch => {\n      let apiEndpoint = `/establishments/` + payload.establishment_id + `?access_token=${localStorage.token}`;\n      classService.get(apiEndpoint).then(response => {\n        let formadata = new FormData();\n        formadata.append('image', payload.file);\n        let apiEndpoint2 = `/containers/` + response.data.name + `/upload?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint2, formadata).then(response => {}).catch(error => {});\n      }).catch(error => {});\n    };\n  } else {\n    return function (dispatch) {};\n  }\n}\nexport function assignHomework(homework, profileId) {\n  return dispatch => {\n    let data = {\n      correction_date: homework.correction_date,\n      status: true,\n      homework_id: homework.homework_id,\n      class_id: homework.class_id\n    };\n    let apiEndpoint = `/homeworks_classes?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      let apiEndpoint2 = `/homeworks/fetchHomeworkByProfileId/` + profileId + `?access_token=${localStorage.token}`;\n      classService.get(apiEndpoint2).then(response => {\n        const tableTododos = response.data.homeworks.filter(item => item.status === true);\n        dispatch({\n          type: FETCH_ALL_TODO_SUCCESS,\n          payload: tableTododos\n        });\n      }).catch(error => {});\n    }).catch(error => {});\n  };\n}\n;\nexport const getAllTodo = (id, webService) => {\n  return dispatch => {\n    let apiEndpoint = `/students/${webService}/${id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        const homeworks = response.data.homeworks.filter(item => item.status === true && item.active === true);\n        dispatch({\n          type: FETCH_ALL_TODO_SUCCESS,\n          payload: homeworks\n        });\n      }\n    });\n  };\n};\nexport const cleanState = () => {\n  return dispatch => {\n    dispatch({\n      type: 'CLEAN_TODO_STATE',\n      payload: []\n    });\n  };\n};\nexport const getAllTodoForProfessor = id => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/fetchHomeworkByProfileId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const tableTododos = response.data.homeworks.filter(item => item.status === true);\n      dispatch({\n        type: FETCH_ALL_TODO_SUCCESS,\n        payload: tableTododos\n      });\n    }).catch(error => {});\n  };\n};\nexport const getAllTodoForAdmin = id => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/fetchHomeworkByEstablishmentId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const tableTododos = response.data.homeworks.filter(item => item.status === true);\n      dispatch({\n        type: FETCH_ALL_TODO_SUCCESS,\n        payload: tableTododos\n      });\n    }).catch(error => {});\n  };\n};\nexport const getLabelsForHomework = id => {\n  const roleId = parseInt(localStorage.roles_id);\n\n  if (roleId === roleIdProfessor) {\n    return dispatch => {\n      let apiEndpoint = `/professors/?access_token=${localStorage.token}&filter={\"where\":{\"profile_id\":` + id + `}}`;\n      classService.get(apiEndpoint).then(response => {\n        let apiEndpoint2 = `/classes_professors/?access_token=${localStorage.token}&filter[include][class]&filter[where][professor_id]=` + response.data[0].id;\n        classService.get(apiEndpoint2).then(res => {\n          let labels = [];\n\n          for (let i = 0; i < res.data.length; i++) {\n            if (_.some(labels, ['class_id', res.data[i].class_id])) {} else {\n              let obj = {\n                \"class_id\": res.data[i].class_id,\n                \"className\": res.data[i].class.name,\n                \"color\": colors[i]\n              };\n              labels.push(obj);\n            }\n          }\n\n          dispatch({\n            type: GET_LABELS_FOR_HOMRWORK,\n            payload: labels\n          });\n        }).catch(error => {});\n      }).catch(error => {});\n    };\n  } else {\n    return dispatch => {\n      let apiEndpoint = `/classes?access_token=${localStorage.token}&filter={\"where\":{\"establishment_id\":` + id + `}}`;\n      classService.get(apiEndpoint).then(res => {\n        let labels = [];\n\n        for (let i = 0; i < res.data.length; i++) {\n          let obj = {\n            \"class_id\": res.data[i].id,\n            \"className\": res.data[i].name,\n            \"color\": colors[i]\n          };\n          labels.push(obj);\n        }\n\n        ;\n        dispatch({\n          type: GET_LABELS_FOR_HOMRWORK,\n          payload: labels\n        });\n      }).catch(error => {});\n    };\n  }\n};\nexport function deleteHomework(idItem) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/` + idItem + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const datahomework = response.data;\n      let homeworkData = {\n        title: datahomework.title,\n        description: datahomework.description,\n        date_creation: datahomework.date_creation,\n        status: false,\n        files: datahomework.files,\n        id: datahomework.id,\n        professor_id: datahomework.professor_id,\n        subject_id: datahomework.subject_id\n      };\n      let apiEndpoint2 = `/homeworks/` + datahomework.id + `?access_token=${localStorage.token}`;\n      classService.put(apiEndpoint2, homeworkData).then(response => {\n        if (response) {\n          dispatch({\n            type: ON_DELETE_TODO,\n            payload: response.data\n          });\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: 'message.delete.success'\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_SUCCESS_MESSAGE\n            });\n          }, 4000);\n        } else {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"message.delete.failed\"\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_ERROR_MESSAGE\n            });\n          }, 4000);\n        }\n      });\n    }).catch(error => {});\n  };\n}\nexport function editHomework(homework, file) {\n  if (homework.newFile !== null) {\n    if (file !== null) {\n      return dispatch => {\n        let apiEndpoint = `/establishments/` + homework.establishment_id + `?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint).then(response => {\n          if (response) {\n            const establishmentName = response.data.name;\n            let formadata = new FormData();\n            formadata.append('image', file);\n            let apiEndpoint2 = `/containers/checkFileExist/${establishmentName}?access_token=${localStorage.token}`;\n            classService.get(apiEndpoint2).then(response => {\n              if (response) {\n                let fileList = null;\n\n                if (response.data.checkFile.length === 0) {\n                  fileList = null;\n                } else {\n                  fileList = response.data.checkFile.find(item => item.name === file);\n                }\n\n                const fileExtension = homework.newFile.name.replace(/^.*\\./, '');\n                const fileName = 'Devoir_' + homework.id + '_Matiere_' + homework.subject_id + '_Professor_' + homework.professor_id + '.' + fileExtension;\n                const myNewFile = new File([homework.newFile], fileName, {\n                  type: homework.newFile.type\n                });\n                const upload = {\n                  file: myNewFile,\n                  establishment_id: homework.establishment_id\n                };\n                let data = {\n                  \"id\": homework.id,\n                  \"title\": homework.title,\n                  \"description\": homework.description,\n                  \"date_creation\": homework.date_creation,\n                  \"files\": fileName,\n                  \"status\": true,\n                  \"professor_id\": homework.professor_id,\n                  \"subject_id\": homework.subject_id,\n                  \"assignHomeworkList\": homework.assignHomeworkList,\n                  \"files_name\": homework.files_name\n                };\n\n                if (fileList !== null && fileList !== undefined) {\n                  const establishLogoUrl = `/containers/` + establishmentName + `/files/` + file + `?access_token=${localStorage.token}`;\n                  classService.deleteDetail(establishLogoUrl, formadata).then(response => {\n                    if (response) {\n                      let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`;\n                      classService.post(apiEndpoint, data).then(response => {\n                        if (response) {\n                          dispatch(uploadFile(upload));\n                          dispatch({\n                            type: ON_TODO_UPDATE,\n                            payload: response.data.homework\n                          });\n                        }\n                      });\n                    }\n                  });\n                } else {\n                  let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`;\n                  classService.post(apiEndpoint, data).then(response => {\n                    if (response) {\n                      dispatch(uploadFile(upload));\n                      dispatch({\n                        type: ON_TODO_UPDATE,\n                        payload: response.data.homework\n                      });\n                    }\n                  });\n                }\n              }\n            });\n          }\n        });\n      };\n    } else {\n      const fileExtension = homework.newFile.name.replace(/^.*\\./, '');\n      const fileName = 'Devoir_' + homework.id + '_Matiere_' + homework.subject_id + '_Professor_' + homework.professor_id + '.' + fileExtension;\n      const myNewFile = new File([homework.newFile], fileName, {\n        type: homework.newFile.type\n      });\n      const upload = {\n        file: myNewFile,\n        establishment_id: homework.establishment_id\n      };\n      let newdata = {\n        \"id\": homework.id,\n        \"title\": homework.title,\n        \"description\": homework.description,\n        \"date_creation\": homework.date_creation,\n        \"status\": true,\n        \"files\": fileName,\n        \"professor_id\": homework.professor_id,\n        \"subject_id\": homework.subject_id,\n        \"assignHomeworkList\": homework.assignHomeworkList,\n        \"files_name\": homework.files_name\n      };\n      return dispatch => {\n        let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint, newdata).then(response => {\n          if (response) {\n            dispatch(uploadFile(upload));\n            dispatch({\n              type: ON_TODO_UPDATE,\n              payload: response.data.homework\n            });\n          }\n        });\n      };\n    }\n  } else {\n    return function (dispatch) {\n      let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, homework).then(response => {\n        if (response) {\n          dispatch({\n            type: ON_TODO_UPDATE,\n            payload: response.data.homework\n          });\n        }\n      });\n    };\n  }\n}\nexport function addComment(data, file, establishmentId) {\n  let upload = {};\n\n  if (file !== null) {\n    const myNewFile = new File([file], data.file, {\n      type: file.type\n    });\n    upload = {\n      file: myNewFile,\n      establishment_id: establishmentId\n    };\n  }\n\n  return dispatch => {\n    let apiEndpoint = `/homeworks_discussions/addComment/?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response) {\n        if (file !== null) {\n          dispatch(uploadFile(upload));\n        }\n\n        dispatch({\n          type: ADD_TODO_CONVERSATION,\n          payload: response.data.comment\n        });\n      }\n    });\n  };\n}\nexport function getConversation(homework_id, profile_professor_id, profile_student_id) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_discussions/getConversation/${homework_id}/${profile_professor_id}/${profile_student_id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        if (!_.isEmpty(response.data)) {\n          dispatch({\n            type: FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n            payload: response.data.comments\n          });\n        } else {\n          dispatch({\n            type: FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n            payload: response.data\n          });\n        }\n      }\n    });\n  };\n}\nexport function initListConversation() {\n  return dispatch => {\n    dispatch({\n      type: FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n      payload: []\n    });\n  };\n}\nexport function getNumberOfHomeworkStudents(homeworkId) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_discussions/getNumberOfHomeworkStudents/${homeworkId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {// dispatch({ type: FETCH_ALL_TODO_CONVERSATION_SUCCESS, payload: [] });\n      }\n    });\n  };\n}\nexport function getAllDiscussionHomework(homeworkId, senderId) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_discussions/getAllDiscussionHomework/${homeworkId}/${senderId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n          payload: response.data.comments\n        });\n      }\n    });\n  };\n}","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/ToDo.js"],"names":["FETCH_ALL_TODO","FETCH_ALL_TODO_CONVERSATION","FETCH_ALL_TODO_CONVERSATION_SUCCESS","FETCH_ALL_TODO_SUCCESS","GET_IMPORTANT_TODO","GET_MARK_AS_START","GET_NAV_FILTERS","GET_NAV_LABELS","GET_STARRED_TODO","GET_UNIMPORTANT_TODO","GET_UNSELECTED_ALL_TODO","GET_UNSTARRED_TODO","HANDLE_REQUEST_CLOSE","ON_DELETE_TODO","ON_HIDE_LOADER","ON_LABEL_MENU_ITEM_SELECT","ON_LABEL_SELECT","ON_LABEL_UPDATE","ON_OPTION_MENU_SELECT","ON_SORTEND","ON_TODO_ADD","ON_TODO_CHECKED","ON_TODO_SELECT","ON_TODO_UPDATE","ON_TOGGLE_DRAWER","SEARCH_TODO","SELECT_ALL_TODO","SET_CURRENT_TODO_NULL","SHOW_MESSAGE","UPDATE_SEARCH","GET_LABELS_FOR_HOMRWORK","GET_NAV_LABELS_FOR_ADMIN","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","ADD_TODO_CONVERSATION","_","roleIdProfessor","classService","colors","fetchTodo","type","fetchTodoConversation","fetchTodosSuccess","mails","payload","fetchTodosConversationSuccess","showTodoMessage","message","onSortEnd","data","onOptionMenuSelect","onLabelSelect","selectAllTodo","getUnselectedAllTodo","getStarredToDo","getUnStarredTodo","getImportantToDo","getUnimportantToDo","onLabelMenuItemSelect","label","onLabelUpdate","onMarkAsStart","onToDoUpdate","onDeleteToDo","getNavFilters","getNavLabels","dataLabel","id","dispatch","apiEndpoint","localStorage","token","get","then","response","dataFiltred","homeworks","forEach","element","homeworkClass","value","key","class_id","push","catch","error","getNavLabelsForAdmin","onSearchTodo","searchText","onTodoChecked","onTodoAdd","onTodoSelect","todo","setCurrentToDoNull","toDoToggleDrawer","updateSearch","searchTodo","hideToDoLoader","handleToDoMenuRequestClose","addAndAssignHomework","homework","file","fileExtension","name","replace","fileName","Math","random","toString","slice","subject_id","professor_id","myNewFile","File","upload","establishment_id","DataWithFile","files","title","description","date_creation","status","assignHomeworkList","files_name","post","uploadFile","setTimeout","formadata","FormData","append","apiEndpoint2","assignHomework","profileId","correction_date","homework_id","tableTododos","filter","item","getAllTodo","webService","active","cleanState","getAllTodoForProfessor","getAllTodoForAdmin","getLabelsForHomework","roleId","parseInt","roles_id","res","labels","i","length","some","obj","class","deleteHomework","idItem","datahomework","homeworkData","put","editHomework","newFile","establishmentName","fileList","checkFile","find","undefined","establishLogoUrl","deleteDetail","newdata","addComment","establishmentId","comment","getConversation","profile_professor_id","profile_student_id","isEmpty","comments","initListConversation","getNumberOfHomeworkStudents","homeworkId","getAllDiscussionHomework","senderId"],"mappings":"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","sourcesContent":["import {\n  FETCH_ALL_TODO,\n  FETCH_ALL_TODO_CONVERSATION,\n  FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n  FETCH_ALL_TODO_SUCCESS,\n  GET_IMPORTANT_TODO,\n  GET_MARK_AS_START,\n  GET_NAV_FILTERS,\n  GET_NAV_LABELS,\n  GET_STARRED_TODO,\n  GET_UNIMPORTANT_TODO,\n  GET_UNSELECTED_ALL_TODO,\n  GET_UNSTARRED_TODO,\n  HANDLE_REQUEST_CLOSE,\n  ON_DELETE_TODO,\n  ON_HIDE_LOADER,\n  ON_LABEL_MENU_ITEM_SELECT,\n  ON_LABEL_SELECT,\n  ON_LABEL_UPDATE,\n  ON_OPTION_MENU_SELECT,\n  ON_SORTEND,\n  ON_TODO_ADD,\n  ON_TODO_CHECKED,\n  ON_TODO_SELECT,\n  ON_TODO_UPDATE,\n  ON_TOGGLE_DRAWER,\n  SEARCH_TODO,\n  SELECT_ALL_TODO,\n  SET_CURRENT_TODO_NULL,\n  SHOW_MESSAGE,\n  UPDATE_SEARCH,\n  GET_LABELS_FOR_HOMRWORK,\n  GET_NAV_LABELS_FOR_ADMIN,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n  ADD_TODO_CONVERSATION\n} from '../constants/ActionTypes'\nimport _ from 'lodash';\nimport { roleIdProfessor } from '../config/config';\nimport { classService } from \"../_services/class.service\";\nconst colors = ['purple lighten-2', 'amber darken-1', 'green darken-3', 'light-blue darken-4', 'purple lighten-3', 'amber darken-2', 'green darken-1', 'light-blue darken-2']\n\nexport const fetchTodo = () => {\n  return {\n    type: FETCH_ALL_TODO\n  };\n};\nexport const fetchTodoConversation = () => {\n  return {\n    type: FETCH_ALL_TODO_CONVERSATION\n  };\n};\n\nexport const fetchTodosSuccess = (mails) => {\n  return {\n    type: FETCH_ALL_TODO_SUCCESS,\n    payload: mails\n  }\n};\nexport const fetchTodosConversationSuccess = (mails) => {\n  return {\n    type: FETCH_ALL_TODO_CONVERSATION_SUCCESS,\n    payload: mails\n  }\n};\n\nexport const showTodoMessage = (message) => {\n  return {\n    type: SHOW_MESSAGE,\n    payload: message\n  };\n};\nexport const onSortEnd = (data) => {\n  return {\n    type: ON_SORTEND,\n    payload: data\n  };\n};\n\nexport const onOptionMenuSelect = () => {\n  return {\n    type: ON_OPTION_MENU_SELECT,\n  };\n};\nexport const onLabelSelect = () => {\n  return {\n    type: ON_LABEL_SELECT,\n  };\n};\n\nexport const selectAllTodo = () => {\n  return {\n    type: SELECT_ALL_TODO,\n  };\n};\n\n// export const getAllTodo = () => {\n//   return {\n//     type: GET_ALL_TODO,\n//   };\n// };\n\n\nexport const getUnselectedAllTodo = () => {\n  return {\n    type: GET_UNSELECTED_ALL_TODO,\n  };\n};\n\nexport const getStarredToDo = () => {\n  return {\n    type: GET_STARRED_TODO,\n  };\n};\n\nexport const getUnStarredTodo = () => {\n  return {\n    type: GET_UNSTARRED_TODO,\n  };\n};\nexport const getImportantToDo = () => {\n  return {\n    type: GET_IMPORTANT_TODO,\n  };\n};\nexport const getUnimportantToDo = () => {\n  return {\n    type: GET_UNIMPORTANT_TODO,\n  };\n};\nexport const onLabelMenuItemSelect = (label) => {\n  return {\n    type: ON_LABEL_MENU_ITEM_SELECT,\n    payload: label\n  };\n};\nexport const onLabelUpdate = (data) => {\n  return {\n    type: ON_LABEL_UPDATE,\n    payload: data\n  };\n};\nexport const onMarkAsStart = (data) => {\n  return {\n    type: GET_MARK_AS_START,\n    payload: data\n  };\n};\n\nexport const onToDoUpdate = (data) => {\n  return {\n    type: ON_TODO_UPDATE,\n    payload: data\n  };\n};\n\nexport const onDeleteToDo = (data) => {\n  return {\n    type: ON_DELETE_TODO,\n    payload: data\n  };\n};\nexport const getNavFilters = (data) => {\n  return {\n    type: GET_NAV_FILTERS,\n    payload: data\n  };\n};\n\nexport const getNavLabels = (dataLabel, id) => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/fetchHomeworkByProfileId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        let dataFiltred = []\n        response.data.homeworks.forEach(element => {\n          _.forEach(element.homeworkClass, function (value, key) {\n            if (value.class_id === dataLabel.class_id) {\n              dataFiltred.push(element)\n            }\n\n          });\n        });\n        dispatch({ type: GET_NAV_LABELS, payload: dataFiltred });\n      }).catch(error => {\n      });\n  }\n};\n\nexport const getNavLabelsForAdmin = (dataLabel, data) => {\n  return function (dispatch) {\n    let dataFiltred = []\n    data.forEach(element => {\n      _.forEach(element.homeworkClass, function (value, key) {\n        if (value.class_id === dataLabel.class_id) {\n          dataFiltred.push(element)\n        }\n      });\n    });\n    dispatch({ type: GET_NAV_LABELS_FOR_ADMIN, payload: dataFiltred });\n  }\n}\n\nexport const onSearchTodo = (searchText) => {\n  return {\n    type: SEARCH_TODO,\n    payload: searchText\n  };\n};\nexport const onTodoChecked = (data) => {\n  return {\n    type: ON_TODO_CHECKED,\n    payload: data\n  };\n};\nexport const onTodoAdd = (data) => {\n  return {\n    type: ON_TODO_ADD,\n    payload: data\n  };\n};\nexport const onTodoSelect = (todo) => {\n  return {\n    type: ON_TODO_SELECT,\n    payload: todo\n  };\n};\nexport const setCurrentToDoNull = () => {\n  return {\n    type: SET_CURRENT_TODO_NULL,\n  };\n};\n\nexport const toDoToggleDrawer = () => {\n  return {\n    type: ON_TOGGLE_DRAWER,\n  };\n};\n\nexport const updateSearch = (searchTodo) => {\n  return {\n    type: UPDATE_SEARCH,\n    payload: searchTodo\n  };\n};\n\nexport const hideToDoLoader = () => {\n  return {\n    type: ON_HIDE_LOADER,\n  };\n};\nexport const handleToDoMenuRequestClose = () => {\n  return {\n    type: HANDLE_REQUEST_CLOSE,\n  };\n};\n\nexport function addAndAssignHomework(homework, file) {\n  if (file !== null) {\n    const fileExtension = file.name.replace(/^.*\\./, '');\n    const fileName = 'Devoir_' + Math.random().toString(36).slice(2) + '_Matiere_' + homework.subject_id + '_Professor_' + homework.professor_id + '.' + fileExtension\n    const myNewFile = new File([file], fileName, { type: file.type });\n    const upload = {\n      file: myNewFile,\n      establishment_id: homework.establishment_id\n    }\n    let DataWithFile = {\n      files: fileName,\n      title: homework.title,\n      description: homework.description,\n      date_creation: homework.date_creation,\n      status: true,\n      professor_id: homework.professor_id,\n      subject_id: homework.subject_id,\n      assignHomeworkList:homework.assignHomeworkList,\n      files_name:homework.files_name\n    }\n\n    return dispatch => {\n      let apiEndpoint = `/homeworks/addAndAssignHomework?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, DataWithFile)\n        .then(response => {\n          if (response) {\n            dispatch(uploadFile(upload));\n            dispatch({ type: ON_TODO_ADD, payload: response.data.homework });\n            dispatch({\n              type: SHOW_SUCCESS_MESSAGE,\n              payload: 'message.add.success',\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_SUCCESS_MESSAGE });\n            }, 4000);\n          } else {\n            dispatch({\n              type: SHOW_ERROR_MESSAGE,\n              payload: \"message.add.failed\",\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_ERROR_MESSAGE });\n            }, 4000);\n          }\n        })\n\n\n\n    };\n  }\n  else {\n    return dispatch => {\n\n      let apiEndpoint = `/homeworks/addAndAssignHomework?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, homework)\n        .then(response => {\n          if (response) {\n            dispatch({ type: ON_TODO_ADD, payload: response.data.homework });\n            dispatch({\n              type: SHOW_SUCCESS_MESSAGE,\n              payload: 'message.add.success',\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_SUCCESS_MESSAGE });\n            }, 4000);\n          } else {\n            dispatch({\n              type: SHOW_ERROR_MESSAGE,\n              payload: \"message.add.failed\",\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_ERROR_MESSAGE });\n            }, 4000);\n          }\n\n        })\n    };\n  }\n\n};\n\n\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return dispatch => {\n      let apiEndpoint = `/establishments/` + payload.establishment_id + `?access_token=${localStorage.token}`;\n      classService.get(apiEndpoint)\n        .then(response => {\n          let formadata = new FormData()\n          formadata.append('image', payload.file)\n          let apiEndpoint2 = `/containers/` + response.data.name + `/upload?access_token=${localStorage.token}`;\n          classService.post(apiEndpoint2, formadata)\n            .then(response => {\n            })\n            .catch(error => {\n            });\n        }).catch(error => {\n        });\n    }\n  }\n  else {\n    return function (dispatch) {\n    }\n  }\n}\nexport function assignHomework(homework, profileId) {\n\n  return dispatch => {\n    let data = {\n      correction_date: homework.correction_date,\n      status: true,\n      homework_id: homework.homework_id,\n      class_id: homework.class_id\n    }\n    let apiEndpoint = `/homeworks_classes?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data)\n      .then(response => {\n        let apiEndpoint2 = `/homeworks/fetchHomeworkByProfileId/` + profileId + `?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint2)\n          .then(response => {\n            const tableTododos = response.data.homeworks.filter(item => item.status === true)\n            dispatch({ type: FETCH_ALL_TODO_SUCCESS, payload: tableTododos });\n          })\n          .catch(error => {\n          });\n      }).catch(error => {\n      });\n  };\n};\n\nexport const getAllTodo = (id, webService) => {\n  return dispatch => {\n    let apiEndpoint = `/students/${webService}/${id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        if (response) {\n          const homeworks = response.data.homeworks.filter(item => item.status === true && item.active === true)\n          dispatch({ type: FETCH_ALL_TODO_SUCCESS, payload: homeworks });\n        }\n      })\n  }\n};\n\nexport const cleanState = () => {\n  return dispatch => {\n          dispatch({ type: 'CLEAN_TODO_STATE', payload: [] });\n        }\n};\nexport const getAllTodoForProfessor = (id) => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/fetchHomeworkByProfileId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        const tableTododos = response.data.homeworks.filter(item => item.status === true)\n        dispatch({ type: FETCH_ALL_TODO_SUCCESS, payload: tableTododos });\n      }).catch(error => {\n      });\n  };\n}\n\nexport const getAllTodoForAdmin = (id) => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/fetchHomeworkByEstablishmentId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        const tableTododos = response.data.homeworks.filter(item => item.status === true)\n        dispatch({ type: FETCH_ALL_TODO_SUCCESS, payload: tableTododos });\n      }).catch(error => {\n      });\n  };\n}\n\nexport const getLabelsForHomework = (id) => {\n  const roleId = parseInt(localStorage.roles_id);\n  if (roleId === roleIdProfessor) {\n    return dispatch => {\n      let apiEndpoint = `/professors/?access_token=${localStorage.token}&filter={\"where\":{\"profile_id\":` + id + `}}`;\n      classService.get(apiEndpoint)\n        .then(response => {\n          let apiEndpoint2 = `/classes_professors/?access_token=${localStorage.token}&filter[include][class]&filter[where][professor_id]=` + response.data[0].id;\n          classService.get(apiEndpoint2)\n            .then(res => {\n              let labels = [];\n              for (let i = 0; i < res.data.length; i++) {\n                if (_.some(labels, ['class_id', res.data[i].class_id])) { } else {\n                  let obj = {\n                    \"class_id\": res.data[i].class_id,\n                    \"className\": res.data[i].class.name,\n                    \"color\": colors[i]\n                  }\n                  labels.push(obj)\n                }\n              }\n              dispatch({ type: GET_LABELS_FOR_HOMRWORK, payload: labels });\n            })\n            .catch(error => {\n            });\n        }).catch(error => {\n        });\n    }\n  } else {\n    return dispatch => {\n      let apiEndpoint = `/classes?access_token=${localStorage.token}&filter={\"where\":{\"establishment_id\":` + id + `}}`;\n      classService.get(apiEndpoint)\n        .then(res => {\n          let labels = [];\n          for (let i = 0; i < res.data.length; i++) {\n            let obj = {\n              \"class_id\": res.data[i].id,\n              \"className\": res.data[i].name,\n              \"color\": colors[i]\n            }\n            labels.push(obj)\n          };\n          dispatch({ type: GET_LABELS_FOR_HOMRWORK, payload: labels });\n        }).catch(error => {\n        });\n\n    }\n  }\n};\n\n\n\nexport function deleteHomework(idItem) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks/` + idItem + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        const datahomework = response.data;\n        let homeworkData = {\n          title: datahomework.title,\n          description: datahomework.description,\n          date_creation: datahomework.date_creation,\n          status: false,\n          files: datahomework.files,\n          id: datahomework.id,\n          professor_id: datahomework.professor_id,\n          subject_id: datahomework.subject_id\n        }\n        let apiEndpoint2 = `/homeworks/` + datahomework.id + `?access_token=${localStorage.token}`;\n        classService.put(apiEndpoint2, homeworkData)\n          .then(response => {\n\n            if (response) {\n              dispatch({ type: ON_DELETE_TODO, payload: response.data });\n              dispatch({\n                type: SHOW_SUCCESS_MESSAGE,\n                payload: 'message.delete.success',\n              });\n              setTimeout(() => {\n                dispatch({ type: HIDE_SUCCESS_MESSAGE });\n              }, 4000);\n            } else {\n              dispatch({\n                type: SHOW_ERROR_MESSAGE,\n                payload:\n                  \"message.delete.failed\",\n              });\n              setTimeout(() => {\n                dispatch({ type: HIDE_ERROR_MESSAGE });\n              }, 4000);\n            }\n          })\n\n      }).catch(error => {\n      });\n  };\n}\n\n\n\n\nexport function editHomework(homework, file) {\n  if (homework.newFile !== null) {\n    if (file !== null) {\n      return dispatch => {\n        let apiEndpoint = `/establishments/` + homework.establishment_id + `?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint)\n          .then(response => {\n            if (response) {\n              const establishmentName = response.data.name\n              let formadata = new FormData()\n              formadata.append('image', file)\n              let apiEndpoint2 = `/containers/checkFileExist/${establishmentName}?access_token=${localStorage.token}`;\n              classService.get(apiEndpoint2)\n                .then((response) => {\n                  if (response) {\n                    let fileList = null;\n                    if (response.data.checkFile.length === 0) {\n                      fileList = null\n                    }\n                    else {\n                      fileList = response.data.checkFile.find(item => item.name === file)\n                    }\n                    const fileExtension = homework.newFile.name.replace(/^.*\\./, '');\n                    const fileName = 'Devoir_' + homework.id + '_Matiere_' + homework.subject_id + '_Professor_' + homework.professor_id + '.' + fileExtension\n                    const myNewFile = new File([homework.newFile], fileName, { type: homework.newFile.type });\n                    const upload = {\n                      file: myNewFile,\n                      establishment_id: homework.establishment_id\n                    }\n                    let data = {\n                      \"id\": homework.id,\n                      \"title\": homework.title,\n                      \"description\": homework.description,\n                      \"date_creation\": homework.date_creation,\n                      \"files\": fileName,\n                      \"status\": true,\n                      \"professor_id\": homework.professor_id,\n                      \"subject_id\": homework.subject_id,\n                      \"assignHomeworkList\": homework.assignHomeworkList,\n                      \"files_name\": homework.files_name\n                    }\n                    if (fileList !== null && fileList !== undefined) {\n\n                      const establishLogoUrl = `/containers/` + establishmentName + `/files/` + file + `?access_token=${localStorage.token}`\n                      classService.deleteDetail(establishLogoUrl, formadata)\n                        .then((response) => {\n                          if (response) {\n                            let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`\n                            classService.post(apiEndpoint, data)\n                              .then(response => {\n                                if (response) {\n                                  dispatch(uploadFile(upload));\n                                  dispatch({ type: ON_TODO_UPDATE, payload: response.data.homework });\n                                }\n                              })\n                          }\n                        })\n                    }\n                    else {\n                      let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`\n                      classService.post(apiEndpoint, data)\n                        .then(response => {\n                          if (response) {\n                            dispatch(uploadFile(upload));\n                            dispatch({ type: ON_TODO_UPDATE, payload: response.data.homework });\n                          }\n                        })\n                    }\n\n                  }\n                })\n\n            }\n          })\n      }\n    }\n\n    else {\n      const fileExtension = homework.newFile.name.replace(/^.*\\./, '');\n      const fileName = 'Devoir_' + homework.id + '_Matiere_' + homework.subject_id + '_Professor_' + homework.professor_id + '.' + fileExtension\n      const myNewFile = new File([homework.newFile], fileName, { type: homework.newFile.type });\n      const upload = {\n        file: myNewFile,\n        establishment_id: homework.establishment_id\n      }\n      let newdata = {\n        \"id\": homework.id,\n        \"title\": homework.title,\n        \"description\": homework.description,\n        \"date_creation\": homework.date_creation,\n        \"status\": true,\n        \"files\": fileName,\n        \"professor_id\": homework.professor_id,\n        \"subject_id\": homework.subject_id,\n        \"assignHomeworkList\": homework.assignHomeworkList,\n        \"files_name\": homework.files_name\n      }\n      return dispatch => {\n        let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint, newdata)\n          .then(response => {\n            if (response) {\n              dispatch(uploadFile(upload));\n              dispatch({ type: ON_TODO_UPDATE, payload: response.data.homework });\n            }\n          })\n\n      };\n    }\n  }\n\n  else {\n    return function (dispatch) {\n      let apiEndpoint = `/homeworks/editHomework?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, homework)\n        .then(response => {\n          if (response) {\n            dispatch({ type: ON_TODO_UPDATE, payload: response.data.homework });\n          }\n        })\n\n    };\n  }\n}\n\nexport function addComment(data, file, establishmentId) {\n  let upload = {};\n  if (file !== null) {\n    const myNewFile = new File([file], data.file, { type: file.type });\n    upload = {\n      file: myNewFile,\n      establishment_id: establishmentId\n    }\n  }\n  return dispatch => {\n    let apiEndpoint = `/homeworks_discussions/addComment/?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data)\n      .then(response => {\n        if (response) {\n          if (file !== null) {\n            dispatch(uploadFile(upload));\n          }\n          dispatch({ type: ADD_TODO_CONVERSATION, payload: response.data.comment });\n        }\n      })\n  }\n\n}\n\nexport function getConversation(homework_id, profile_professor_id, profile_student_id) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_discussions/getConversation/${homework_id}/${profile_professor_id}/${profile_student_id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {        \n        if (response) {\n          if (!_.isEmpty(response.data)) {\n            dispatch({ type: FETCH_ALL_TODO_CONVERSATION_SUCCESS, payload: response.data.comments });\n          } else {\n            dispatch({ type: FETCH_ALL_TODO_CONVERSATION_SUCCESS, payload: response.data });\n          }\n        }\n      })\n  }\n\n}\n\nexport function initListConversation() {\n  return dispatch => {\n    dispatch({ type: FETCH_ALL_TODO_CONVERSATION_SUCCESS, payload: [] });\n  }\n\n}\n\nexport function getNumberOfHomeworkStudents(homeworkId) {\n  return dispatch => {\n   let apiEndpoint = `/homeworks_discussions/getNumberOfHomeworkStudents/${homeworkId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n   // dispatch({ type: FETCH_ALL_TODO_CONVERSATION_SUCCESS, payload: [] });\n  }\n  })\n  }\n\n}\n\nexport function getAllDiscussionHomework(homeworkId, senderId) {\n  return dispatch => {\n   let apiEndpoint = `/homeworks_discussions/getAllDiscussionHomework/${homeworkId}/${senderId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {        \n    dispatch({ type: FETCH_ALL_TODO_CONVERSATION_SUCCESS, payload: response.data.comments});\n  }\n  })\n  }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}