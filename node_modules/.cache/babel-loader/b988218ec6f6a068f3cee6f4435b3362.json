{"ast":null,"code":"import { HANDLE_RECLAM_CLOSE, ON_COMPOSE_RECLAM, ON_RECLAM_SEND, SHOW_DETAIL_RECLAM, GET_RECLAM_RECUES, GET_RECLAM_ENVOYÉES, EDIT_RECLAM_STATUS, ON_CHANGE_STATUS, ON_CHANGE_STATUS_CLOSE, DELETE_RECLAM } from \"../constants/ActionTypes\";\nimport _ from \"lodash\";\nimport { classService } from \"../_services/class.service\";\nimport baseUrl from \"../config/config\";\nimport axios from \"axios\";\nexport const showReclamMessage = message => {\n  return {\n    type: SHOW_DETAIL_RECLAM,\n    payload: message\n  };\n};\nexport const handleReclamRequestClose = () => {\n  return {\n    type: HANDLE_RECLAM_CLOSE\n  };\n};\nexport function uploadComplaintMedia(ObjetFile, ObjetComplaint) {\n  const fileName = ObjetFile.fileName;\n  const myNewFile = new File([ObjetFile.file], fileName, {\n    type: ObjetFile.file.type\n  });\n  let formadata = new FormData();\n  formadata.append(\"image\", myNewFile);\n  return function (dispatch) {\n    const establishLogoUrl = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n    axios({\n      url: establishLogoUrl,\n      method: \"POST\",\n      data: formadata\n    }).then(response => {\n      axios.patch(`${baseUrl.baseUrl}/complaints/` + ObjetComplaint.id + `?access_token=${localStorage.token}`, {\n        files: response.data.result.files.image[0].providerResponse.location\n      }).then(response => {\n        console.log('updateddddddddddd ', response.data); // dispatch(uploadCourseMedia(object));\n      }).catch(function (error) {\n        console.log(\"error\", error);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n}\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return dispatch => {\n      console.log(\"file\", payload.file);\n      let file = payload.file; // Split the filename to get the name and type\n\n      let fileParts = file.name.split('.');\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      let apiEndpoint = `/containers/uploadFile/${{\n        fileName: fileName,\n        fileType: fileType\n      }}?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint).then(response => {\n        var returnData = response.data.data.returnData;\n        var signedRequest = returnData.signedRequest;\n        var url = returnData.url;\n        this.setState({\n          url: url\n        });\n        console.log(\"Recieved a signed request \" + signedRequest);\n        var options = {\n          headers: {\n            'Content-Type': fileType\n          }\n        };\n        axios.put(signedRequest, file, options).then(result => {\n          console.log(\"Response from s3\");\n          this.setState({\n            success: true\n          });\n        }).catch(error => {\n          alert(\"ERROR \" + JSON.stringify(error));\n        });\n      }).catch(error => {\n        console.log(\"errrrrrorrr\");\n      });\n    };\n  } else {\n    return function (dispatch) {};\n  }\n}\nexport const onReclamSend = data => {\n  if (data.file !== null) {\n    return dispatch => {\n      let dataMail = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        status_complaint: \"non traitée\"\n      };\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      let file = data.file;\n      classService.post(apiEndpoint, dataMail).then(response => {\n        if (_.isEmpty(response.data)) {\n          dispatch({\n            type: \"MAIL_NOT_FOUND\",\n            payload: \" mail n'existe pas \"\n          });\n        } else {\n          var complaintObject = response.data;\n          const fileExtension = file.name.replace(/^.*\\./, \"\");\n          const fileName = \"COMPLAINT_\" + response.data.mail.id + \"_Sender_\" + data.sender_id + \".\" + fileExtension;\n          var object = {};\n          object.file = file;\n          object.fileName = fileName;\n          dispatch(uploadComplaintMedia(object, complaintObject));\n        }\n      }).catch(error => {});\n    };\n  } else {\n    return dispatch => {\n      let mailWithoutFile = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        files: null,\n        status_complaint: \"non traitée\"\n      };\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, mailWithoutFile).then(response => {\n        if (_.isEmpty(response.data)) {\n          dispatch({\n            type: \"MAIL_NOT_FOUND\",\n            payload: \" mail n'existe pas \"\n          });\n        } else {\n          dispatch(getReclams_Envoyées());\n          dispatch({\n            type: ON_RECLAM_SEND,\n            payload: response.data\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HANDLE_RECLAM_CLOSE\n            });\n          }, 2000);\n        }\n      }).catch(error => {});\n    };\n  }\n};\nexport const getReclams_Recues = () => {\n  return dispatch => {\n    let apiEndpoint = `/complaints/fetchemails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const reclamReceived = response.data.emails; // const reclamList = reclamReceived.filter((element) => element.status);\n\n      dispatch({\n        type: GET_RECLAM_RECUES,\n        payload: {\n          data: reclamReceived\n        }\n      });\n    }).catch(error => {});\n  };\n};\nexport const getReclams_Envoyées = () => {\n  return dispatch => {\n    let apiEndpoint = `/complaints/fetchSentEmails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const reclamReceived = response.data.emails; //const reclamList = reclamReceived.filter((element) => element.status);\n\n      dispatch({\n        type: GET_RECLAM_ENVOYÉES,\n        payload: {\n          data: reclamReceived\n        }\n      });\n    }).catch(error => {});\n  };\n};\nexport const onComposeReclam = () => {\n  return {\n    type: ON_COMPOSE_RECLAM\n  };\n};\nexport function onChangeStatusClose() {\n  return dispatch => {\n    dispatch({\n      type: ON_CHANGE_STATUS_CLOSE\n    });\n    setTimeout(() => {\n      dispatch({\n        type: HANDLE_RECLAM_CLOSE\n      });\n    }, 2000);\n  };\n}\nexport function editStatus(dataReclam) {\n  return dispatch => {\n    let reclamData = {\n      status_complaint: dataReclam.status,\n      id: dataReclam.id\n    };\n    let apiEndpoint = `/complaints/` + dataReclam.id + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, reclamData).then(response => {\n      dispatch({\n        type: EDIT_RECLAM_STATUS,\n        payload: response.data\n      });\n      dispatch(getReclams_Recues());\n    }).catch(error => {});\n  };\n}\nexport function deleteComplaint(itemId) {\n  return dispatch => {\n    let reclamData = {\n      status: false,\n      id: itemId\n    };\n    let apiEndpoint = `/complaints/` + itemId + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, reclamData).then(response => {\n      dispatch({\n        type: DELETE_RECLAM,\n        payload: response.data\n      });\n      dispatch(getReclams_Recues());\n      dispatch(getReclams_Envoyées());\n      setTimeout(() => {\n        dispatch({\n          type: HANDLE_RECLAM_CLOSE\n        });\n      }, 2000);\n    }).catch(error => {});\n  };\n}","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/complaintAction.js"],"names":["HANDLE_RECLAM_CLOSE","ON_COMPOSE_RECLAM","ON_RECLAM_SEND","SHOW_DETAIL_RECLAM","GET_RECLAM_RECUES","GET_RECLAM_ENVOYÉES","EDIT_RECLAM_STATUS","ON_CHANGE_STATUS","ON_CHANGE_STATUS_CLOSE","DELETE_RECLAM","_","classService","baseUrl","axios","showReclamMessage","message","type","payload","handleReclamRequestClose","uploadComplaintMedia","ObjetFile","ObjetComplaint","fileName","myNewFile","File","file","formadata","FormData","append","dispatch","establishLogoUrl","localStorage","token","url","method","data","then","response","patch","id","files","result","image","providerResponse","location","console","log","catch","error","err","uploadFile","fileParts","name","split","fileType","apiEndpoint","post","returnData","signedRequest","setState","options","headers","put","success","alert","JSON","stringify","onReclamSend","dataMail","sender_id","receiver_id","subject","date_hour_reclamation","date_hour_mail","status","profile_id","status_complaint","isEmpty","complaintObject","fileExtension","replace","mail","object","mailWithoutFile","getReclams_Envoyées","setTimeout","getReclams_Recues","profileId","get","reclamReceived","emails","onComposeReclam","onChangeStatusClose","editStatus","dataReclam","reclamData","deleteComplaint","itemId"],"mappings":"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","sourcesContent":["import {\n  HANDLE_RECLAM_CLOSE,\n  ON_COMPOSE_RECLAM,\n  ON_RECLAM_SEND,\n  SHOW_DETAIL_RECLAM,\n  GET_RECLAM_RECUES,\n  GET_RECLAM_ENVOYÉES,\n  EDIT_RECLAM_STATUS,\n  ON_CHANGE_STATUS,\n  ON_CHANGE_STATUS_CLOSE,\n  DELETE_RECLAM,\n} from \"../constants/ActionTypes\";\nimport _ from \"lodash\";\nimport { classService } from \"../_services/class.service\";\nimport baseUrl from \"../config/config\";\nimport axios from \"axios\";\n\nexport const showReclamMessage = (message) => {\n  return {\n    type: SHOW_DETAIL_RECLAM,\n    payload: message,\n  };\n};\n\nexport const handleReclamRequestClose = () => {\n  return {\n    type: HANDLE_RECLAM_CLOSE,\n  };\n};\nexport function uploadComplaintMedia(ObjetFile, ObjetComplaint) {\n\n  const fileName = ObjetFile.fileName;\n  const myNewFile = new File([ObjetFile.file], fileName, { type: ObjetFile.file.type });\n  let formadata = new FormData();\n  formadata.append(\"image\", myNewFile);\n  return function (dispatch) {\n    const establishLogoUrl =\n      `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n    axios({\n      url: establishLogoUrl,\n      method: \"POST\",\n      data: formadata,\n    })\n      .then((response) => {\n\n        axios\n          .patch(\n            `${baseUrl.baseUrl}/complaints/` +\n            ObjetComplaint.id +\n            `?access_token=${localStorage.token}`,\n            {\n              files: response.data.result.files.image[0].providerResponse.location,\n            }\n          )\n          .then((response) => {\n            console.log('updateddddddddddd ', response.data)\n            // dispatch(uploadCourseMedia(object));\n          })\n          .catch(function (error) {\n            console.log(\"error\", error);\n          });\n\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n}\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return (dispatch) => {\n\n      console.log(\"file\", payload.file);\n      let file = payload.file\n      // Split the filename to get the name and type\n      let fileParts = file.name.split('.');\n      let fileName = fileParts[0];\n      let fileType = fileParts[1];\n      console.log(\"Preparing the upload\");\n      let apiEndpoint = `/containers/uploadFile/${{\n        fileName: fileName,\n        fileType: fileType\n      }}?access_token=${localStorage.token}`;\n\n      classService.post(apiEndpoint)\n        .then(response => {\n          var returnData = response.data.data.returnData;\n          var signedRequest = returnData.signedRequest;\n          var url = returnData.url;\n          this.setState({ url: url })\n          console.log(\"Recieved a signed request \" + signedRequest);\n\n          var options = {\n            headers: {\n              'Content-Type': fileType\n            }\n          };\n          axios.put(signedRequest, file, options)\n            .then(result => {\n              console.log(\"Response from s3\")\n              this.setState({ success: true });\n            })\n            .catch(error => {\n              alert(\"ERROR \" + JSON.stringify(error));\n            })\n\n\n        }).catch(error => {\n          console.log(\"errrrrrorrr\")\n        });\n\n\n\n\n      \n    };\n  } else {\n    return function (dispatch) { };\n  }\n}\n\nexport const onReclamSend = (data) => {\n  if (data.file !== null) {\n    return (dispatch) => {\n      let dataMail = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        status_complaint: \"non traitée\",\n      };\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      let file = data.file\n      classService\n        .post(apiEndpoint, dataMail)\n        .then((response) => {\n          if (_.isEmpty(response.data)) {\n            dispatch({\n              type: \"MAIL_NOT_FOUND\",\n              payload: \" mail n'existe pas \",\n            });\n          } else {\n            var complaintObject = response.data;\n            const fileExtension = file.name.replace(/^.*\\./, \"\");\n            const fileName =\n            \"COMPLAINT_\" +\n            response.data.mail.id +\n            \"_Sender_\" +\n            data.sender_id +\n            \".\" +\n            fileExtension;\n              var object = {};\n              object.file = file;\n              object.fileName = fileName;\n           \n              dispatch(uploadComplaintMedia(object,complaintObject));\n  \n          }\n        })\n        .catch((error) => { });\n    };\n  } else {\n    return (dispatch) => {\n      let mailWithoutFile = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        files: null,\n        status_complaint: \"non traitée\",\n      };\n\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      classService\n        .post(apiEndpoint, mailWithoutFile)\n        .then((response) => {\n          if (_.isEmpty(response.data)) {\n            dispatch({\n              type: \"MAIL_NOT_FOUND\",\n              payload: \" mail n'existe pas \",\n            });\n          } else {\n            dispatch(getReclams_Envoyées());\n            dispatch({ type: ON_RECLAM_SEND, payload: response.data });\n            setTimeout(() => {\n              dispatch({ type: HANDLE_RECLAM_CLOSE });\n            }, 2000);\n          }\n        })\n        .catch((error) => { });\n    };\n  }\n};\n\nexport const getReclams_Recues = () => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/complaints/fetchemails/` +\n      localStorage.profileId +\n      `?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const reclamReceived = response.data.emails;\n        // const reclamList = reclamReceived.filter((element) => element.status);\n\n        dispatch({\n          type: GET_RECLAM_RECUES,\n          payload: {\n            data: reclamReceived,\n          },\n        });\n      })\n      .catch((error) => { });\n  };\n};\n\nexport const getReclams_Envoyées = () => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/complaints/fetchSentEmails/` +\n      localStorage.profileId +\n      `?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const reclamReceived = response.data.emails;\n        //const reclamList = reclamReceived.filter((element) => element.status);\n        dispatch({\n          type: GET_RECLAM_ENVOYÉES,\n          payload: {\n            data: reclamReceived,\n          },\n        });\n      })\n      .catch((error) => { });\n  };\n};\n\nexport const onComposeReclam = () => {\n  return {\n    type: ON_COMPOSE_RECLAM,\n  };\n};\n\nexport function onChangeStatusClose() {\n  return (dispatch) => {\n    dispatch({ type: ON_CHANGE_STATUS_CLOSE });\n    setTimeout(() => {\n      dispatch({ type: HANDLE_RECLAM_CLOSE });\n    }, 2000);\n  };\n}\n\nexport function editStatus(dataReclam) {\n  return (dispatch) => {\n    let reclamData = {\n      status_complaint: dataReclam.status,\n      id: dataReclam.id,\n    };\n    let apiEndpoint =\n      `/complaints/` + dataReclam.id + `?access_token=${localStorage.token}`;\n    classService\n      .patch(apiEndpoint, reclamData)\n      .then((response) => {\n        dispatch({ type: EDIT_RECLAM_STATUS, payload: response.data });\n        dispatch(getReclams_Recues());\n      })\n      .catch((error) => { });\n  };\n}\n\nexport function deleteComplaint(itemId) {\n  return (dispatch) => {\n    let reclamData = {\n      status: false,\n      id: itemId,\n    };\n    let apiEndpoint =\n      `/complaints/` + itemId + `?access_token=${localStorage.token}`;\n    classService\n      .patch(apiEndpoint, reclamData)\n      .then((response) => {\n        dispatch({ type: DELETE_RECLAM, payload: response.data });\n        dispatch(getReclams_Recues());\n        dispatch(getReclams_Envoyées());\n        setTimeout(() => {\n          dispatch({ type: HANDLE_RECLAM_CLOSE });\n        }, 2000);\n      })\n      .catch((error) => { });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}