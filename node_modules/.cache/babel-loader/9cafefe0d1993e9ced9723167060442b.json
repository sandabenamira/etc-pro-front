{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/actions/planningActions.js\";\nimport React from \"react\";\nimport { classService } from '../_services';\nimport { ADD_EVENT, FETECHED_ALL_EVENTS, REMOVE_EVENT, UPDATE_EVENT, GET_EVENTS_CLASS } from \"../constants/ActionTypes\";\nimport baseUrl from '../config/config';\nimport IntlMessages from '../util/IntlMessages';\nexport function getEventsBy2Filters(estab_id, prof_id) {\n  let eventsFiltered = [];\n  return function (dispatch) {\n    return fetch(`${baseUrl.baseUrl}/generic_events?access_token=${localStorage.token}&filter[where][and][0][establishment_id]=` + estab_id + `&filter[where][and][1][professor_id]=` + prof_id).then(response => response.json()).then(json => {\n      eventsFiltered = json;\n      dispatch({\n        type: \"FETECHED_ALL_EVENTS\",\n        payload: eventsFiltered\n      });\n    });\n  };\n}\nexport const getEvents = () => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      dispatch(receiveEvents(response.data));\n    }).catch(err => {});\n  };\n};\nexport const getProessorssByClass = id => {\n  return dispatch => {\n    let apiEndpoint = `/classes_professors/getProfessorByClassId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: 'GET_PROFESSORS_BY_CLASS',\n        payload: response.data\n      });\n    }).catch(err => {});\n  };\n};\nexport const getEventsByClass = id => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let appLang = state.settings.locale.languageId;\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.timetable;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        //  if(genericEvents[i].event_type===\"Class Council\"){\n        //  }else{\n        // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n        //   lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        // }\n        // lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n        genericEvents[i].contextualEvents.map(event => {\n          // lessonSubject = subjects.filter(element => element.id === event.subject_id);\n          //  lessonRooms = rooms.filter(element => element.id === event.room_id)\n          const container = {}; // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n\n          container['professor_profile'] = event.professor_id;\n          container['hexa_color'] = event.subject.hexa_color;\n          container['subject_id'] = event.subject.name_FR; // }\n\n          container['room_id'] = event.room.name;\n          container['idRoom'] = event.room.id;\n          container['id_generic_event'] = genericEvents[i].id;\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['event_type'] = event.event_type;\n          container['class_id'] = genericEvents[i].class_id;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['tag_call'] = event.tag_call;\n          container['appLang'] = appLang;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: GET_EVENTS_CLASS,\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\n\nconst receiveEvents = events => ({\n  type: FETECHED_ALL_EVENTS,\n  payload: events\n});\n\nexport const addEvent = itemClass => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/createEvent?access_token=${localStorage.token}`; //axios.post(`${baseUrl.baseUrl}/generic_events/createEvent?access_token=${localStorage.token}`, itemClass)\n\n    classService.post(apiEndpoint, itemClass).then(response => {\n      if (response.status === 203) {\n        dispatch({\n          type: 'ADD_EVENT_NOT_ALLOWED',\n          payload: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"components.planning.event.message.notallowed\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 62\n            }\n          })\n        });\n      } else {\n        dispatch(getEventsByClass(response.data.event.class_id));\n      }\n    }).catch(error => {});\n  };\n};\nexport const archiverEvent = classItem => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/` + classItem.id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const item = response.data;\n      classService.put(apiEndpoint, {\n        name: item.name,\n        level_class: item.level_class,\n        student_id: item.students,\n        professor_id: item.professors,\n        establishment_id: item.establishment_id,\n        capacity: item.capacity,\n        start_date: item.start_date,\n        end_date: item.end_date,\n        description: item.description,\n        students_number: item.students_number,\n        status: false,\n        id: classItem.id,\n        event_type: classItem.event_type,\n        subject_id: classItem.subject\n      }).then(response => {\n        dispatch({\n          type: REMOVE_EVENT,\n          payload: classItem\n        });\n      }).catch(function (error) {\n        alert('error');\n      });\n    });\n  };\n};\nexport const updateEvent = item => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/` + item.id + `?access_token=${localStorage.token}`; // const { name, level_class, establishment, capacity, start_date, end_date, description, students_number, student_id, professor_id } = item;\n\n    classService.put(apiEndpoint, {\n      title: item.title,\n      level_class: item.level_class,\n      student_id: item.student_id,\n      professor_id: item.professor_id,\n      establishment_id: item.establishment_id,\n      capacity: item.capacity,\n      start_date: item.start_date,\n      end_date: item.end_date,\n      description: item.description,\n      students_number: item.students_number\n    }).then(response => {\n      dispatch({\n        type: UPDATE_EVENT,\n        payload: response.data\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const handleEventRequestClose = () => {\n  return {\n    type: 'HANDLE_EVENT_REQUEST_CLOSE'\n  };\n};\nexport const PlanningAction = {\n  getEvents,\n  addEvent,\n  archiverEvent,\n  updateEvent,\n  getEventsBy2Filters,\n  handleEventRequestClose\n};\nexport const getClassTimeTable = classId => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${classId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.timetable;\n      let timeTableEvents = [];\n\n      if (state.auth.userProfile.role_id == 3) {\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n\n          if (genericEvents[i].professor_id === state.auth.userProfile.id) {\n            genericEvents[i].contextualEvents.map(event => {\n              const container = {};\n              container['start'] = new Date(event.start_lesson);\n              container['end'] = new Date(event.end_lesson);\n              container['title'] = genericEvents[i].title;\n              container['room_id'] = genericEvents[i].room_id;\n              container['room_name'] = lessonRooms[0].name;\n              container['class_id'] = genericEvents[i].class_id;\n              container['subject_id'] = genericEvents[i].subject_id;\n              container['subject_name'] = lessonSubject[0].name;\n              container['frequency'] = genericEvents[i].frequency;\n              container['id'] = event.id;\n              container['hexa_color'] = lessonSubject[0].hexa_color;\n              container['professor_profile'] = genericEvents[i].professor_id;\n              timeTableEvents.push(container);\n            });\n          }\n        }\n      } else {\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n          genericEvents[i].contextualEvents.map(event => {\n            const container = {};\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            timeTableEvents.push(container);\n          });\n        }\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_BY_CLASS',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\nexport function getParentTimeTable(profileId) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then(response => {\n      rooms = response.data;\n    });\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/timeTableForParents/${profileId}?access_token=${token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.timeTableForParents;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          container['supplies'] = event.supplie;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_STUDENT',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n}\nexport const getStudentTimeTable = profileId => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then(response => {\n      rooms = response.data;\n    });\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/classTimeTable/${profileId}?access_token=${token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.classTimeTable;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['event_type'] = genericEvents[i].event_type;\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_STUDENT',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\nexport const getProfessorTimeTable = profileId => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then(response => {\n      rooms = response.data;\n    });\n    let apiEndpoint = `/professors/get-professor-calendar/${profileId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(res => {\n      let genericEvents = res.data.calendar;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_PROFESSOR',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\nexport const removeEventList = () => {\n  return dispatch => {\n    dispatch({\n      type: 'REMOVE_EVENTS_LIST'\n    });\n  };\n};\nexport const handleSubmitEdit = data => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/updateGenricEvent?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response.status === 200) {\n        dispatch(getEventsByClass(data.classId));\n      } else {\n        dispatch({\n          type: 'ADD_EVENT_NOT_ALLOWED',\n          payload: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"components.planning.event.message.notallowed\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 62\n            }\n          })\n        });\n      }\n    }).catch(error => {});\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/planningActions.js"],"names":["React","classService","ADD_EVENT","FETECHED_ALL_EVENTS","REMOVE_EVENT","UPDATE_EVENT","GET_EVENTS_CLASS","baseUrl","IntlMessages","getEventsBy2Filters","estab_id","prof_id","eventsFiltered","dispatch","fetch","localStorage","token","then","response","json","type","payload","getEvents","apiEndpoint","get","receiveEvents","data","catch","err","getProessorssByClass","id","getEventsByClass","getState","state","subjects","subject","remoteSubjects","appLang","settings","locale","languageId","rooms","genericEvents","timetable","timeTableEvents","i","length","contextualEvents","map","event","container","professor_id","hexa_color","name_FR","room","name","Date","start_lesson","end_lesson","title","event_type","class_id","frequency","tag_call","push","events","addEvent","itemClass","post","status","error","archiverEvent","classItem","item","put","level_class","student_id","students","professors","establishment_id","capacity","start_date","end_date","description","students_number","subject_id","alert","updateEvent","handleEventRequestClose","PlanningAction","getClassTimeTable","classId","auth","userProfile","role_id","lessonRooms","filter","element","room_id","lessonSubject","getParentTimeTable","profileId","apiEndpoint1","timeTableForParents","supplie","getStudentTimeTable","classTimeTable","getProfessorTimeTable","res","calendar","removeEventList","handleSubmitEdit"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { classService } from '../_services';\nimport { ADD_EVENT, FETECHED_ALL_EVENTS, REMOVE_EVENT, UPDATE_EVENT, GET_EVENTS_CLASS } from \"../constants/ActionTypes\";\nimport baseUrl from '../config/config';\nimport IntlMessages from '../util/IntlMessages';\n\n\nexport function getEventsBy2Filters(estab_id, prof_id) {\n  let eventsFiltered = [];\n  return function (dispatch) {\n    return fetch(`${baseUrl.baseUrl}/generic_events?access_token=${localStorage.token}&filter[where][and][0][establishment_id]=` + estab_id + `&filter[where][and][1][professor_id]=` + prof_id).then(response => response.json()).then(json => {\n      eventsFiltered = json\n      dispatch({ type: \"FETECHED_ALL_EVENTS\", payload: eventsFiltered });\n    });\n  };\n}\n\nexport const getEvents = () => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then((response) => {\n        dispatch(receiveEvents(response.data))\n\n      }).catch((err) => {\n      })\n  };\n}\nexport const getProessorssByClass = (id) => {\n  return dispatch => {\n    let apiEndpoint = `/classes_professors/getProfessorByClassId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then((response) => {\n        dispatch({ type: 'GET_PROFESSORS_BY_CLASS', payload: response.data })\n\n\n      }).catch((err) => {\n      })\n  };\n}\n\nexport const getEventsByClass = (id) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let appLang = state.settings.locale.languageId;\n\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.timetable\n         let timeTableEvents = []\n        for (var i = 0; i < genericEvents.length; i++) {\n          //  if(genericEvents[i].event_type===\"Class Council\"){\n           //  }else{\n          // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n          //   lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n          // }\n          // lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n          genericEvents[i].contextualEvents.map(event => {\n            // lessonSubject = subjects.filter(element => element.id === event.subject_id);\n            //  lessonRooms = rooms.filter(element => element.id === event.room_id)\n             const container = {};\n            // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n            container['professor_profile'] = event.professor_id;\n            container['hexa_color'] = event.subject.hexa_color;\n            container['subject_id'] = event.subject.name_FR;\n            // }\n            container['room_id'] = event.room.name;\n            container['idRoom'] = event.room.id;\n            container['id_generic_event'] = genericEvents[i].id;\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['event_type'] = event.event_type;\n            container['class_id'] = genericEvents[i].class_id;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['tag_call'] = event.tag_call;\n            container['appLang'] = appLang;\n            timeTableEvents.push(container)\n          });\n        }\n\n\n        dispatch({ type: GET_EVENTS_CLASS, payload: timeTableEvents })\n\n      }).catch((err) => {\n      })\n  };\n}\n\nconst receiveEvents = (events) => ({\n  type: FETECHED_ALL_EVENTS,\n  payload: events,\n});\n\nexport const addEvent = (itemClass) => {\n\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/createEvent?access_token=${localStorage.token}`;\n    //axios.post(`${baseUrl.baseUrl}/generic_events/createEvent?access_token=${localStorage.token}`, itemClass)\n    classService.post(apiEndpoint, itemClass)\n      .then(response => {\n\n\n        if (response.status === 203) {\n          dispatch({ type: 'ADD_EVENT_NOT_ALLOWED', payload: <IntlMessages id=\"components.planning.event.message.notallowed\" /> })\n        } else {\n          dispatch(getEventsByClass(response.data.event.class_id))\n        }\n      }).catch(error => {\n      });\n  };\n};\nexport const archiverEvent = (classItem) => {\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/` + classItem.id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        const item = response.data;\n        classService.put(apiEndpoint, {\n          name: item.name,\n          level_class: item.level_class,\n          student_id: item.students,\n          professor_id: item.professors,\n          establishment_id: item.establishment_id,\n          capacity: item.capacity,\n          start_date: item.start_date,\n          end_date: item.end_date,\n          description: item.description,\n          students_number: item.students_number,\n          status: false,\n          id: classItem.id,\n          event_type: classItem.event_type,\n          subject_id: classItem.subject,\n\n\n        })\n          .then(response => {\n            dispatch({ type: REMOVE_EVENT, payload: classItem })\n\n          })\n          .catch(function (error) {\n            alert('error')\n          });\n\n      })\n  }\n};\n\n\nexport const updateEvent = (item) => {\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/` + item.id + `?access_token=${localStorage.token}`;\n    // const { name, level_class, establishment, capacity, start_date, end_date, description, students_number, student_id, professor_id } = item;\n\n    classService.put(apiEndpoint, {\n      title: item.title,\n      level_class: item.level_class,\n      student_id: item.student_id,\n      professor_id: item.professor_id,\n      establishment_id: item.establishment_id,\n      capacity: item.capacity,\n      start_date: item.start_date,\n      end_date: item.end_date,\n      description: item.description,\n      students_number: item.students_number,\n    })\n      .then(response => {\n        dispatch({ type: UPDATE_EVENT, payload: response.data })\n      }).catch(error => { throw (error) });\n  };\n};\nexport const handleEventRequestClose = () => {\n  return {\n    type: 'HANDLE_EVENT_REQUEST_CLOSE',\n  };\n};\n\nexport const PlanningAction = {\n  getEvents,\n  addEvent,\n  archiverEvent,\n  updateEvent,\n  getEventsBy2Filters,\n  handleEventRequestClose\n};\n\nexport const getClassTimeTable = (classId) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${classId}?access_token=${localStorage.token}`\n    classService.get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.timetable\n        let timeTableEvents = []\n        if (state.auth.userProfile.role_id == 3) {\n          for (var i = 0; i < genericEvents.length; i++) {\n            const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n            const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n            if (genericEvents[i].professor_id === state.auth.userProfile.id) {\n              genericEvents[i].contextualEvents.map(event => {\n                const container = {};\n                container['start'] = new Date(event.start_lesson);\n                container['end'] = new Date(event.end_lesson);\n                container['title'] = genericEvents[i].title;\n                container['room_id'] = genericEvents[i].room_id;\n                container['room_name'] = lessonRooms[0].name;\n                container['class_id'] = genericEvents[i].class_id;\n                container['subject_id'] = genericEvents[i].subject_id;\n                container['subject_name'] = lessonSubject[0].name;\n                container['frequency'] = genericEvents[i].frequency;\n                container['id'] = event.id;\n                container['hexa_color'] = lessonSubject[0].hexa_color;\n                container['professor_profile'] = genericEvents[i].professor_id;\n                timeTableEvents.push(container)\n              });\n            }\n          }\n        } else {\n\n\n          for (var i = 0; i < genericEvents.length; i++) {\n            const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n            const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n            genericEvents[i].contextualEvents.map(event => {\n              const container = {};\n              container['start'] = new Date(event.start_lesson);\n              container['end'] = new Date(event.end_lesson);\n              container['title'] = genericEvents[i].title;\n              container['room_id'] = genericEvents[i].room_id;\n              container['room_name'] = lessonRooms[0].name;\n              container['class_id'] = genericEvents[i].class_id;\n              container['subject_id'] = genericEvents[i].subject_id;\n              container['subject_name'] = lessonSubject[0].name;\n              container['frequency'] = genericEvents[i].frequency;\n              container['id'] = event.id;\n              container['hexa_color'] = lessonSubject[0].hexa_color;\n              container['professor_profile'] = genericEvents[i].professor_id;\n              timeTableEvents.push(container)\n            });\n          }\n        }\n        dispatch({ type: 'GET_EVENTS_BY_CLASS', payload: timeTableEvents })\n\n\n      }).catch((err) => {\n      })\n  }\n\n}\n\nexport function getParentTimeTable(profileId) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`\n    classService.get(apiEndpoint1)\n      .then((response) => { rooms = response.data; })\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/timeTableForParents/${profileId}?access_token=${token}`\n    classService.get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.timeTableForParents;\n        let timeTableEvents = []\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n          const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n          genericEvents[i].contextualEvents.map(event => {\n            const container = {};\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            container['supplies'] = event.supplie;\n            timeTableEvents.push(container)\n          });\n        }\n        dispatch({ type: 'GET_EVENTS_STUDENT', payload: timeTableEvents })\n\n      }).catch((err) => {\n      })\n\n  }\n\n}\n\nexport const getStudentTimeTable = (profileId) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`\n    classService.get(apiEndpoint1)\n      .then((response) => { rooms = response.data; })\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/classTimeTable/${profileId}?access_token=${token}`\n    classService.get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.classTimeTable;\n        let timeTableEvents = []\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n          const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n          genericEvents[i].contextualEvents.map(event => {\n            const container = {};\n\n            container['event_type'] = genericEvents[i].event_type;\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            timeTableEvents.push(container)\n          });\n        }\n        dispatch({ type: 'GET_EVENTS_STUDENT', payload: timeTableEvents })\n\n      }).catch((err) => {\n      })\n\n  }\n}\nexport const getProfessorTimeTable = (profileId) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`\n    classService.get(apiEndpoint1)\n      .then((response) => { rooms = response.data; })\n    let apiEndpoint = `/professors/get-professor-calendar/${profileId}?access_token=${localStorage.token}`\n    classService.get(apiEndpoint).then((res) => {\n      let genericEvents = res.data.calendar;\n      let timeTableEvents = []\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          timeTableEvents.push(container)\n        });\n      }\n      dispatch({ type: 'GET_EVENTS_PROFESSOR', payload: timeTableEvents })\n    }).catch((err) => {\n    })\n  }\n}\n\nexport const removeEventList = () => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_EVENTS_LIST' })\n  }\n}\nexport const handleSubmitEdit = (data) => {\n\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/updateGenricEvent?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data)\n      .then(response => {\n        if (response.status === 200) {\n          dispatch(getEventsByClass(data.classId))\n\n        } else {\n          dispatch({ type: 'ADD_EVENT_NOT_ALLOWED', payload: <IntlMessages id=\"components.planning.event.message.notallowed\" /> })\n\n        }\n      }).catch(error => {\n      });\n  };\n};"]},"metadata":{},"sourceType":"module"}