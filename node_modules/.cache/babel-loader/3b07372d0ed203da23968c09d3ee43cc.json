{"ast":null,"code":"import { classService } from \"../_services/class.service\";\nimport _ from 'lodash';\nimport { roleIdProfessor, roleIdSuperAdmin, roleIdStudent, roleIdParent, roleIdAdmin, roleIdSupervisor, roleIdDirector } from '../config/config';\nlet appLang = 'fr';\n\nfunction getLanguage(language) {\n  _.isEmpty(language) ? appLang = 'fr' : appLang = language;\n  return appLang;\n}\n\nfunction getName(element) {\n  switch (appLang) {\n    case 'fr':\n      return element.name_FR;\n\n    case 'en':\n      return element.name_EN;\n\n    case 'ar':\n      return element.name_AR;\n\n    default:\n      return element.name_FR;\n  }\n}\n\nfunction getNameFromID(countries, id) {\n  let countryName = countries.map(element => {\n    if (element.id === id) {\n      return element.name;\n    } else {\n      return null;\n    }\n  });\n  return countryName;\n}\n\nfunction getCountries() {\n  return dispatch => {\n    let apiEndpoint = `/countries?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let countriesList = [];\n      response.data.forEach(element => {\n        countriesList.push({\n          \"id\": element.id,\n          \"name\": getName(element)\n        });\n      });\n      dispatch({\n        type: \"DATA_LOADED_COUNTRIES\",\n        payload: countriesList\n      });\n    }).catch(error => {});\n  };\n}\n\nexport function getCountriesByEstablishmentId(id) {\n  return dispatch => {\n    let apiEndpoint = `/establishments?access_token=${localStorage.token}&filter[include]=country&filter[where][id]=${id}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: \"DATA_LOADED_COUNTRIES\",\n          payload: _.map(response.data, 'country')\n        });\n      }\n    });\n  };\n}\n\nfunction traductionValue(element) {\n  if (element === 'Espèce') {\n    switch (appLang) {\n      case 'fr':\n        return 'Espèce';\n\n      case 'en':\n        return 'Cash';\n\n      case 'ar':\n        return 'نقدا';\n\n      default:\n        return 'Espèce';\n    }\n  } else if (element === 'Non défini') {\n    switch (appLang) {\n      case 'fr':\n        return 'Non défini';\n\n      case 'en':\n        return 'Not defined';\n\n      case 'ar':\n        return 'غير محدد';\n\n      default:\n        return 'Non défini';\n    }\n  } else if (element === 'Chèque') {\n    switch (appLang) {\n      case 'fr':\n        return 'Chèque';\n\n      case 'en':\n        return 'Cheque';\n\n      case 'ar':\n        return 'شيك';\n\n      default:\n        return 'Chèque';\n    }\n  } else {\n    switch (appLang) {\n      case 'fr':\n        return 'Carte bancaire';\n\n      case 'en':\n        return 'Credit card';\n\n      case 'ar':\n        return ' بطاقة الائتمان';\n\n      default:\n        return 'Carte bancaire';\n    }\n  }\n}\n\nfunction getNameRole(idRole, appLang) {\n  if (appLang === 'tunisia') {\n    switch (idRole) {\n      case roleIdSuperAdmin:\n        return 'مدير عام';\n\n      case roleIdAdmin:\n        return 'المسؤول';\n\n      case roleIdProfessor:\n        return 'أستاذ';\n\n      case roleIdParent:\n        return 'الولي';\n\n      case roleIdStudent:\n        return 'طالب';\n\n      case roleIdSupervisor:\n        return '  مشرف ';\n\n      default:\n        return 'مدير';\n    }\n  } else if (appLang === 'english') {\n    switch (idRole) {\n      case roleIdSuperAdmin:\n        return 'Super Admin';\n\n      case roleIdAdmin:\n        return 'Administrator';\n\n      case roleIdProfessor:\n        return 'Professor ';\n\n      case roleIdParent:\n        return 'Parent';\n\n      case roleIdStudent:\n        return 'Student ';\n\n      case roleIdSupervisor:\n        return 'Supervisor';\n\n      default:\n        return 'Director';\n    }\n  } else {\n    switch (idRole) {\n      case roleIdSuperAdmin:\n        return 'Super Admin';\n\n      case roleIdAdmin:\n        return 'Administrateur';\n\n      case roleIdProfessor:\n        return 'Professeur';\n\n      case roleIdParent:\n        return 'Parent';\n\n      case roleIdStudent:\n        return 'Élève';\n\n      case roleIdSupervisor:\n        return 'Superviseur ';\n\n      default:\n        return 'Directeur';\n    }\n  }\n}\n\nexport { getLanguage, appLang, getNameFromID, getName, getCountries, traductionValue, getNameRole };","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/countriesAction.js"],"names":["classService","_","roleIdProfessor","roleIdSuperAdmin","roleIdStudent","roleIdParent","roleIdAdmin","roleIdSupervisor","roleIdDirector","appLang","getLanguage","language","isEmpty","getName","element","name_FR","name_EN","name_AR","getNameFromID","countries","id","countryName","map","name","getCountries","dispatch","apiEndpoint","localStorage","token","get","then","response","countriesList","data","forEach","push","type","payload","catch","error","getCountriesByEstablishmentId","traductionValue","getNameRole","idRole"],"mappings":"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","sourcesContent":["\nimport { classService } from \"../_services/class.service\";\nimport _ from 'lodash';\nimport { roleIdProfessor, roleIdSuperAdmin, roleIdStudent, roleIdParent, roleIdAdmin, roleIdSupervisor, roleIdDirector } from '../config/config';\n\nlet appLang = 'fr';\nfunction getLanguage(language) {\n    (_.isEmpty(language)) ? appLang = 'fr' : appLang = language;\n    return appLang;\n}\n\nfunction getName(element) {\n    switch (appLang) {\n        case 'fr':\n            return element.name_FR\n        case 'en':\n            return element.name_EN\n        case 'ar':\n            return element.name_AR\n        default:\n            return element.name_FR;\n    }\n}\n\nfunction getNameFromID(countries, id) {\n    let countryName = countries.map(element => {\n        if (element.id === id) { return element.name }\n        else { return null }\n    })\n    return countryName\n}\n\nfunction getCountries() {\n\n    return dispatch => {\n        let apiEndpoint = `/countries?access_token=${localStorage.token}`;\n        classService\n            .get(apiEndpoint)\n            .then(response => {\n                let countriesList = [];\n                response.data.forEach(element => {\n                    countriesList.push({ \"id\": element.id, \"name\": getName(element) })\n                });\n                dispatch({ type: \"DATA_LOADED_COUNTRIES\", payload: countriesList });\n            }).catch(error => {\n            });\n    }\n}\n\nexport function getCountriesByEstablishmentId(id) {\n    return dispatch => {\n        let apiEndpoint = `/establishments?access_token=${localStorage.token}&filter[include]=country&filter[where][id]=${id}`;\n        classService\n            .get(apiEndpoint)\n            .then(response => {\n                if (response) {\n                    dispatch({ type: \"DATA_LOADED_COUNTRIES\", payload: _.map(response.data,'country') });\n                }\n            })\n    }\n}\n\nfunction traductionValue(element) {\n    if (element === 'Espèce') {\n        switch (appLang) {\n            case 'fr':\n                return 'Espèce'\n            case 'en':\n                return 'Cash'\n            case 'ar':\n                return 'نقدا'\n            default:\n                return 'Espèce';\n        }\n    } else if (element === 'Non défini') {\n        switch (appLang) {\n            case 'fr':\n                return 'Non défini'\n            case 'en':\n                return 'Not defined'\n            case 'ar':\n                return 'غير محدد'\n            default:\n                return 'Non défini';\n        }\n\n    } else if (element === 'Chèque') {\n        switch (appLang) {\n            case 'fr':\n                return 'Chèque'\n            case 'en':\n                return 'Cheque'\n            case 'ar':\n                return 'شيك'\n            default:\n                return 'Chèque';\n        }\n\n    } else {\n        switch (appLang) {\n            case 'fr':\n                return 'Carte bancaire'\n            case 'en':\n                return 'Credit card'\n            case 'ar':\n                return ' بطاقة الائتمان'\n            default:\n                return 'Carte bancaire';\n        }\n    }\n\n\n}\n\nfunction getNameRole(idRole, appLang) {\n\n    if (appLang === 'tunisia') {\n        switch (idRole) {\n            case roleIdSuperAdmin:\n                return 'مدير عام'\n            case roleIdAdmin:\n                return 'المسؤول'\n            case roleIdProfessor:\n                return 'أستاذ'\n            case roleIdParent:\n                return 'الولي'\n            case roleIdStudent:\n                return 'طالب'\n            case roleIdSupervisor:\n                return '  مشرف '\n            default:\n                return 'مدير';\n        }\n    } else if (appLang === 'english') {\n\n        switch (idRole) {\n            case roleIdSuperAdmin:\n                return 'Super Admin'\n            case roleIdAdmin:\n                return 'Administrator'\n            case roleIdProfessor:\n                return 'Professor '\n            case roleIdParent:\n                return 'Parent'\n            case roleIdStudent:\n                return 'Student '\n            case roleIdSupervisor:\n                return 'Supervisor'\n            default:\n                return 'Director';\n        }\n    } else {\n        switch (idRole) {\n            case roleIdSuperAdmin:\n                return 'Super Admin'\n            case roleIdAdmin:\n                return 'Administrateur'\n            case roleIdProfessor:\n                return 'Professeur'\n            case roleIdParent:\n                return 'Parent'\n            case roleIdStudent:\n                return 'Élève'\n            case roleIdSupervisor:\n                return 'Superviseur '\n            default:\n                return 'Directeur';\n        }\n    }\n\n}\n\n\nexport { getLanguage, appLang, getNameFromID, getName, getCountries, traductionValue, getNameRole }"]},"metadata":{},"sourceType":"module"}