{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/actions/planningActions.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport { classService } from '../_services';\nimport { ADD_EVENT, EDIT_EVENT, FETECHED_ALL_EVENTS, REMOVE_EVENT, UPDATE_EVENT, GET_EVENTS_CLASS, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE, GET_EVENTS_call_REGISTER } from '../constants/ActionTypes';\nimport baseUrl from '../config/config';\nimport IntlMessages from '../util/IntlMessages';\nimport axios from 'axios';\nexport function getEventsBy2Filters(estab_id, prof_id) {\n  let eventsFiltered = [];\n  return function (dispatch) {\n    return fetch(`${baseUrl.baseUrl}/generic_events?access_token=${localStorage.token}&filter[where][and][0][establishment_id]=` + estab_id + `&filter[where][and][1][professor_id]=` + prof_id).then(response => response.json()).then(json => {\n      eventsFiltered = json;\n      dispatch({\n        type: 'FETECHED_ALL_EVENTS',\n        payload: eventsFiltered\n      });\n    });\n  };\n}\nexport const getEvents = () => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      dispatch(receiveEvents(response.data));\n    }).catch(err => {});\n  };\n};\nexport const getProessorssByClass = id => {\n  return dispatch => {\n    let apiEndpoint = `/classes_professors/getProfessorByClassId/` + id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: 'GET_PROFESSORS_BY_CLASS',\n        payload: response.data\n      });\n    }).catch(err => {});\n  };\n};\nexport const getEventsByClass = id => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let appLang = state.settings.locale.languageId;\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.timetable;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        //  if(genericEvents[i].event_type===\"Class Council\"){\n        //  }else{\n        // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n        //   lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        // }\n        // lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n        genericEvents[i].contextualEvents.map(event => {\n          // lessonSubject = subjects.filter(element => element.id === event.subject_id);\n          //  lessonRooms = rooms.filter(element => element.id === event.room_id)\n          const container = {}; // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n\n          container['professor_profile'] = event.professor_id;\n          container['hexa_color'] = event.subject.hexa_color;\n          container['subject_id'] = event.subject.name_FR; // }\n\n          container['room_id'] = event.room.name;\n          container['idRoom'] = event.room.id;\n          container['id_generic_event'] = genericEvents[i].id;\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['event_type'] = event.event_type;\n          container['class_id'] = genericEvents[i].class_id;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['tag_call'] = event.tag_call;\n          container['appLang'] = appLang;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: GET_EVENTS_CLASS,\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\n\nconst receiveEvents = events => ({\n  type: FETECHED_ALL_EVENTS,\n  payload: events\n});\n\nexport const addEvent = (itemEvent, itemSuplimentaire) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, itemEvent).then(response => {\n      if (response) {\n        var data = {};\n        data.start = new Date(itemEvent.start_time);\n        data.end = new Date(itemEvent.end_time);\n        data.title = itemEvent.title;\n        data.frequency = itemEvent.frequency;\n        data.eventType = itemEvent.event_type;\n        data.status = true;\n        data.roomId = itemEvent.fk_id_room;\n        data.profId = itemEvent.fk_id_prof;\n        data.assignClassSubjectId = itemEvent.fk_id_assign_class_subject;\n        data.subjectId = itemSuplimentaire.subjectId;\n        data.classId = itemSuplimentaire.classId;\n        data.classeName = itemSuplimentaire.className;\n        data.creatorName = itemSuplimentaire.creatorName;\n        data.creatorSurname = itemSuplimentaire.creatorSurname;\n        data.roomName = itemSuplimentaire.roomName;\n        data.subjectName = itemSuplimentaire.subjectName;\n        data.subjectColor = itemSuplimentaire.subjectColor;\n        data.profName = itemSuplimentaire.profName;\n        data.profSurname = itemSuplimentaire.profSurname;\n        dispatch({\n          type: ADD_EVENT,\n          payload: data\n        });\n        dispatch(getEventsByEstabAndSchoolYear(itemSuplimentaire.establishmentId, itemSuplimentaire.schoolYearId, itemSuplimentaire.classId));\n      }\n    });\n  };\n};\nexport const archiverEvent = classItem => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/` + classItem.id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const item = response.data;\n      classService.put(apiEndpoint, {\n        name: item.name,\n        level_class: item.level_class,\n        student_id: item.students,\n        professor_id: item.professors,\n        establishment_id: item.establishment_id,\n        capacity: item.capacity,\n        start_date: item.start_date,\n        end_date: item.end_date,\n        description: item.description,\n        students_number: item.students_number,\n        status: false,\n        id: classItem.id,\n        event_type: classItem.event_type,\n        subject_id: classItem.subject\n      }).then(response => {\n        dispatch({\n          type: REMOVE_EVENT,\n          payload: classItem\n        });\n      }).catch(function (error) {\n        alert('error');\n      });\n    });\n  };\n};\nexport const updateEvent = item => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/` + item.id + `?access_token=${localStorage.token}`; // const { name, level_class, establishment, capacity, start_date, end_date, description, students_number, student_id, professor_id } = item;\n\n    classService.put(apiEndpoint, {\n      title: item.title,\n      level_class: item.level_class,\n      student_id: item.student_id,\n      professor_id: item.professor_id,\n      establishment_id: item.establishment_id,\n      capacity: item.capacity,\n      start_date: item.start_date,\n      end_date: item.end_date,\n      description: item.description,\n      students_number: item.students_number\n    }).then(response => {\n      dispatch({\n        type: UPDATE_EVENT,\n        payload: response.data\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const handleEventRequestClose = () => {\n  return {\n    type: 'HANDLE_EVENT_REQUEST_CLOSE'\n  };\n};\nexport const PlanningAction = {\n  getEvents,\n  addEvent,\n  archiverEvent,\n  updateEvent,\n  getEventsBy2Filters,\n  handleEventRequestClose\n};\nexport const getClassTimeTable = classId => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${classId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.timetable;\n      let timeTableEvents = [];\n\n      if (state.auth.userProfile.role_id == 3) {\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n\n          if (genericEvents[i].professor_id === state.auth.userProfile.id) {\n            genericEvents[i].contextualEvents.map(event => {\n              const container = {};\n              container['start'] = new Date(event.start_lesson);\n              container['end'] = new Date(event.end_lesson);\n              container['title'] = genericEvents[i].title;\n              container['room_id'] = genericEvents[i].room_id;\n              container['room_name'] = lessonRooms[0].name;\n              container['class_id'] = genericEvents[i].class_id;\n              container['subject_id'] = genericEvents[i].subject_id;\n              container['subject_name'] = lessonSubject[0].name;\n              container['frequency'] = genericEvents[i].frequency;\n              container['id'] = event.id;\n              container['hexa_color'] = lessonSubject[0].hexa_color;\n              container['professor_profile'] = genericEvents[i].professor_id;\n              timeTableEvents.push(container);\n            });\n          }\n        }\n      } else {\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n          genericEvents[i].contextualEvents.map(event => {\n            const container = {};\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            timeTableEvents.push(container);\n          });\n        }\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_BY_CLASS',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\nexport function getParentTimeTable(profileId) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then(response => {\n      rooms = response.data;\n    });\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/timeTableForParents/${profileId}?access_token=${token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.timeTableForParents;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          container['supplies'] = event.supplie;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_STUDENT',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n}\nexport const getStudentTimeTable = profileId => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then(response => {\n      rooms = response.data;\n    });\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/classTimeTable/${profileId}?access_token=${token}`;\n    classService.get(apiEndpoint).then(response => {\n      let genericEvents = response.data.classTimeTable;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['event_type'] = genericEvents[i].event_type;\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_STUDENT',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\nexport const getProfessorTimeTable = profileId => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then(response => {\n      rooms = response.data;\n    });\n    let apiEndpoint = `/professors/get-professor-calendar/${profileId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(res => {\n      let genericEvents = res.data.calendar;\n      let timeTableEvents = [];\n\n      for (var i = 0; i < genericEvents.length; i++) {\n        const lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id);\n        const lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n        genericEvents[i].contextualEvents.map(event => {\n          const container = {};\n          container['start'] = new Date(event.start_lesson);\n          container['end'] = new Date(event.end_lesson);\n          container['title'] = genericEvents[i].title;\n          container['room_id'] = genericEvents[i].room_id;\n          container['room_name'] = lessonRooms[0].name;\n          container['class_id'] = genericEvents[i].class_id;\n          container['subject_id'] = genericEvents[i].subject_id;\n          container['subject_name'] = lessonSubject[0].name;\n          container['frequency'] = genericEvents[i].frequency;\n          container['id'] = event.id;\n          container['hexa_color'] = lessonSubject[0].hexa_color;\n          container['professor_profile'] = genericEvents[i].professor_id;\n          timeTableEvents.push(container);\n        });\n      }\n\n      dispatch({\n        type: 'GET_EVENTS_PROFESSOR',\n        payload: timeTableEvents\n      });\n    }).catch(err => {});\n  };\n};\nexport const removeEventList = () => {\n  return dispatch => {\n    dispatch({\n      type: 'REMOVE_EVENTS_LIST'\n    });\n  };\n};\nexport const handleSubmitEdit = data => {\n  return dispatch => {\n    let apiEndpoint = `/generic_events/updateGenricEvent?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response.status === 200) {\n        dispatch(getEventsByClass(data.classId));\n      } else {\n        dispatch({\n          type: 'ADD_EVENT_NOT_ALLOWED',\n          payload: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"components.planning.event.message.notallowed\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 22\n            }\n          })\n        });\n      }\n    }).catch(error => {});\n  };\n};\nexport const getEventsByEstabAndSchoolYear = (establishementId, schoolYearId, classId) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events/fetchPlanningEvents/${establishementId}/${schoolYearId}/${classId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let listEvents = response.data.planningsEvents;\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach(event => {\n          newEvent = {\n            id: event.id,\n            start: new Date(event.start),\n            end: new Date(event.end),\n            title: event.title,\n            frequency: event.frequency,\n            eventType: event.eventType,\n            status: event.status,\n            roomId: event.roomId,\n            roomName: event.roomName,\n            profId: event.profId,\n            profName: event.profName,\n            profSurname: event.profSurname,\n            assignClassSubjectId: event.assignClassSubjectId,\n            subjectId: event.subjectId,\n            subjectColor: event.subjectColor,\n            subjectName: event.subjectName,\n            classId: event.classId,\n            classeName: event.className,\n            creatorName: event.creatorName,\n            creatorSurname: event.creatorSurname,\n            profGender: event.profGender,\n            idRepetition: event.idRepetition,\n            repetition: event.repetition\n          };\n          newListEvents.push(newEvent);\n        });\n        dispatch({\n          type: GET_EVENTS_CLASS,\n          payload: newListEvents\n        });\n      }\n    });\n  };\n};\nexport const editEvent = (itemEvent, itemSuplimentaire) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events/` + itemEvent.id + `?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, itemEvent).then(response => {\n      if (response) {\n        var data = {};\n        data.id = itemEvent.id;\n        data.start = new Date(itemEvent.start_time);\n        data.end = new Date(itemEvent.end_time);\n        data.title = itemEvent.title;\n        data.frequency = itemEvent.frequency;\n        data.eventType = itemEvent.event_type;\n        data.status = true;\n        data.roomId = itemEvent.fk_id_room;\n        data.profId = itemEvent.fk_id_prof;\n        data.assignClassSubjectId = itemEvent.fk_id_assign_class_subject;\n        data.subjectId = itemSuplimentaire.subjectId;\n        data.classId = itemSuplimentaire.classId;\n        data.classeName = itemSuplimentaire.className;\n        data.creatorName = itemSuplimentaire.creatorName;\n        data.creatorSurname = itemSuplimentaire.creatorSurname;\n        data.roomName = itemSuplimentaire.roomName;\n        data.subjectName = itemSuplimentaire.subjectName;\n        data.subjectColor = itemSuplimentaire.subjectColor;\n        data.profName = itemSuplimentaire.profName;\n        data.profSurname = itemSuplimentaire.profSurname;\n        dispatch({\n          type: EDIT_EVENT,\n          payload: data\n        });\n        dispatch(getEventsByEstabAndSchoolYear(itemSuplimentaire.establishmentId, itemSuplimentaire.schoolYearId, itemSuplimentaire.classId));\n      }\n    });\n  };\n};\nexport const deleteEvent = (typeDelete, itemEvent, establishmentId, schoolYearId, classId) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events/` + itemEvent.id + `?access_token=${localStorage.token}&filter[include][callRegister]`;\n    classService.get(apiEndpoint, itemEvent).then(response => {\n      let momentStartData = moment(itemEvent.start);\n\n      if (response) {\n        let canDelete = true;\n\n        if (typeDelete == 'future') {\n          let sameDateCallRegister = [];\n          sameDateCallRegister = response.data.callRegister.filter(call => moment(call.start_date).isSameOrAfter(momentStartData));\n          canDelete = sameDateCallRegister.length == 0;\n        } else if (typeDelete == 'uniq') {\n          let sameDateCallRegister = [];\n          sameDateCallRegister = response.data.callRegister.filter(call => moment(call.start_date).isSame(momentStartData));\n          canDelete = sameDateCallRegister.length == 0;\n        } else if (typeDelete == 'all') {\n          if (response.data.callRegister.length > 0) {\n            canDelete = false;\n          }\n        }\n\n        if (!canDelete) {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"Cet évènement est attaché à un registre d'appel !\"\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_ERROR_MESSAGE\n            });\n          }, 2500);\n        } else {\n          let newData = {};\n          newData.id = itemEvent.id;\n          newData.status = itemEvent.status;\n          newData.repetition = itemEvent.repetition;\n          let apiEndpoint = `/planning_events/` + newData.id + `?access_token=${localStorage.token}`;\n          classService.patch(apiEndpoint, newData).then(response => {\n            if (response) {\n              dispatch({\n                type: SHOW_SUCCESS_MESSAGE,\n                payload: \"Cet évènement est supprimé avec succès\"\n              });\n              setTimeout(() => {\n                dispatch({\n                  type: HIDE_SUCCESS_MESSAGE\n                });\n              }, 3000);\n              dispatch(getEventsByEstabAndSchoolYear(establishmentId, schoolYearId, classId));\n            }\n          });\n        }\n      }\n    });\n  };\n};\nexport const getEventsByEstabAndSchoolYearForProf = (establishementId, schoolYearId, profileId) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events/fetchScheduleProf/${establishementId}/${schoolYearId}/${profileId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let listEvents = response.data.profSchedule;\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach(event => {\n          newEvent = {\n            id: event.id,\n            start: new Date(event.start),\n            end: new Date(event.end),\n            title: event.title,\n            frequency: event.frequency,\n            eventType: event.eventType,\n            status: event.status,\n            roomId: event.roomId,\n            roomName: event.roomName,\n            profId: event.profId,\n            profName: event.profName,\n            profSurname: event.profSurname,\n            assignClassSubjectId: event.assignClassSubjectId,\n            subjectId: event.subjectId,\n            subjectColor: event.subjectColor,\n            subjectName: event.subjectName,\n            classId: event.classId,\n            classeName: event.className,\n            creatorName: event.creatorName,\n            creatorSurname: event.creatorSurname,\n            profGender: event.profGender\n          };\n          newListEvents.push(newEvent);\n        });\n        dispatch({\n          type: GET_EVENTS_CLASS,\n          payload: newListEvents\n        });\n      }\n    });\n  };\n};\nexport const getEventCallRegisterForAdmin = (establishementId, schoolYearId, classId) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events/fetchPlanningEvents/${establishementId}/${schoolYearId}/${classId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let listEvents = response.data.planningsEvents;\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach(event => {\n          if (event.eventType === 'lesson' || event.eventType === 'exam') {\n            newEvent = {\n              id: event.id,\n              start: new Date(event.start),\n              end: new Date(event.end),\n              title: event.title,\n              frequency: event.frequency,\n              eventType: event.eventType,\n              status: event.status,\n              roomId: event.roomId,\n              roomName: event.roomName,\n              profId: event.profId,\n              profName: event.profName,\n              profSurname: event.profSurname,\n              assignClassSubjectId: event.assignClassSubjectId,\n              subjectId: event.subjectId,\n              subjectColor: event.subjectColor,\n              subjectName: event.subjectName,\n              classId: event.classId,\n              classeName: event.className,\n              creatorName: event.creatorName,\n              creatorSurname: event.creatorSurname,\n              profGender: event.profGender,\n              tagCallRegister: event.tagCallRegister\n            };\n            newListEvents.push(newEvent);\n          }\n        });\n        dispatch({\n          type: GET_EVENTS_call_REGISTER,\n          payload: newListEvents\n        });\n      }\n    });\n  };\n};\nexport const getEventCallRegisterForProf = (establishementId, schoolYearId, profileId) => {\n  return dispatch => {\n    let apiEndpoint = `/planning_events/fetchScheduleProf/${establishementId}/${schoolYearId}/${profileId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let listEvents = response.data.profSchedule;\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach(event => {\n          if (event.eventType === 'lesson' || event.eventType === 'exam') {\n            newEvent = {\n              id: event.id,\n              start: new Date(event.start),\n              end: new Date(event.end),\n              description: event.description,\n              frequency: event.frequency,\n              eventType: event.eventType,\n              status: event.status,\n              roomId: event.roomId,\n              roomName: event.roomName,\n              profId: event.profId,\n              profName: event.profName,\n              profSurname: event.profSurname,\n              assignClassSubjectId: event.assignClassSubjectId,\n              subjectId: event.subjectId,\n              subjectColor: event.subjectColor,\n              subjectName: event.subjectName,\n              classId: event.classId,\n              classeName: event.className,\n              creatorName: event.creatorName,\n              creatorSurname: event.creatorSurname,\n              profGender: event.profGender,\n              tagCallRegister: event.tagCallRegister\n            };\n            newListEvents.push(newEvent);\n          }\n        });\n        dispatch({\n          type: GET_EVENTS_call_REGISTER,\n          payload: newListEvents\n        });\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/planningActions.js"],"names":["React","moment","classService","ADD_EVENT","EDIT_EVENT","FETECHED_ALL_EVENTS","REMOVE_EVENT","UPDATE_EVENT","GET_EVENTS_CLASS","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","GET_EVENTS_call_REGISTER","baseUrl","IntlMessages","axios","getEventsBy2Filters","estab_id","prof_id","eventsFiltered","dispatch","fetch","localStorage","token","then","response","json","type","payload","getEvents","apiEndpoint","get","receiveEvents","data","catch","err","getProessorssByClass","id","getEventsByClass","getState","state","subjects","subject","remoteSubjects","appLang","settings","locale","languageId","rooms","genericEvents","timetable","timeTableEvents","i","length","contextualEvents","map","event","container","professor_id","hexa_color","name_FR","room","name","Date","start_lesson","end_lesson","title","event_type","class_id","frequency","tag_call","push","events","addEvent","itemEvent","itemSuplimentaire","post","start","start_time","end","end_time","eventType","status","roomId","fk_id_room","profId","fk_id_prof","assignClassSubjectId","fk_id_assign_class_subject","subjectId","classId","classeName","className","creatorName","creatorSurname","roomName","subjectName","subjectColor","profName","profSurname","getEventsByEstabAndSchoolYear","establishmentId","schoolYearId","archiverEvent","classItem","item","put","level_class","student_id","students","professors","establishment_id","capacity","start_date","end_date","description","students_number","subject_id","error","alert","updateEvent","handleEventRequestClose","PlanningAction","getClassTimeTable","auth","userProfile","role_id","lessonRooms","filter","element","room_id","lessonSubject","getParentTimeTable","profileId","apiEndpoint1","timeTableForParents","supplie","getStudentTimeTable","classTimeTable","getProfessorTimeTable","res","calendar","removeEventList","handleSubmitEdit","establishementId","listEvents","planningsEvents","newListEvents","newEvent","forEach","profGender","idRepetition","repetition","editEvent","deleteEvent","typeDelete","momentStartData","canDelete","sameDateCallRegister","callRegister","call","isSameOrAfter","isSame","setTimeout","newData","patch","getEventsByEstabAndSchoolYearForProf","profSchedule","getEventCallRegisterForAdmin","tagCallRegister","getEventCallRegisterForProf"],"mappings":"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","sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { classService } from '../_services';\nimport {\n  ADD_EVENT,\n  EDIT_EVENT,\n  FETECHED_ALL_EVENTS,\n  REMOVE_EVENT,\n  UPDATE_EVENT,\n  GET_EVENTS_CLASS,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n  GET_EVENTS_call_REGISTER,\n} from '../constants/ActionTypes';\nimport baseUrl from '../config/config';\nimport IntlMessages from '../util/IntlMessages';\nimport axios from 'axios';\n\nexport function getEventsBy2Filters(estab_id, prof_id) {\n  let eventsFiltered = [];\n  return function(dispatch) {\n    return fetch(\n      `${baseUrl.baseUrl}/generic_events?access_token=${localStorage.token}&filter[where][and][0][establishment_id]=` +\n        estab_id +\n        `&filter[where][and][1][professor_id]=` +\n        prof_id\n    )\n      .then((response) => response.json())\n      .then((json) => {\n        eventsFiltered = json;\n        dispatch({ type: 'FETECHED_ALL_EVENTS', payload: eventsFiltered });\n      });\n  };\n}\n\nexport const getEvents = () => {\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        dispatch(receiveEvents(response.data));\n      })\n      .catch((err) => {});\n  };\n};\nexport const getProessorssByClass = (id) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/classes_professors/getProfessorByClassId/` + id + `?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        dispatch({ type: 'GET_PROFESSORS_BY_CLASS', payload: response.data });\n      })\n      .catch((err) => {});\n  };\n};\n\nexport const getEventsByClass = (id) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let appLang = state.settings.locale.languageId;\n\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${id}?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.timetable;\n        let timeTableEvents = [];\n        for (var i = 0; i < genericEvents.length; i++) {\n          //  if(genericEvents[i].event_type===\"Class Council\"){\n          //  }else{\n          // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n          //   lessonSubject = subjects.filter(element => element.id === genericEvents[i].subject_id);\n          // }\n          // lessonRooms = rooms.filter(element => element.id === genericEvents[i].room_id)\n          genericEvents[i].contextualEvents.map((event) => {\n            // lessonSubject = subjects.filter(element => element.id === event.subject_id);\n            //  lessonRooms = rooms.filter(element => element.id === event.room_id)\n            const container = {};\n            // if (genericEvents[i].room_id !== null && genericEvents[i].subject_id !== null) {\n            container['professor_profile'] = event.professor_id;\n            container['hexa_color'] = event.subject.hexa_color;\n            container['subject_id'] = event.subject.name_FR;\n            // }\n            container['room_id'] = event.room.name;\n            container['idRoom'] = event.room.id;\n            container['id_generic_event'] = genericEvents[i].id;\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['event_type'] = event.event_type;\n            container['class_id'] = genericEvents[i].class_id;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['tag_call'] = event.tag_call;\n            container['appLang'] = appLang;\n            timeTableEvents.push(container);\n          });\n        }\n\n        dispatch({ type: GET_EVENTS_CLASS, payload: timeTableEvents });\n      })\n      .catch((err) => {});\n  };\n};\n\nconst receiveEvents = (events) => ({\n  type: FETECHED_ALL_EVENTS,\n  payload: events,\n});\n\nexport const addEvent = (itemEvent, itemSuplimentaire) => {\n  return (dispatch) => {\n    let apiEndpoint = `/planning_events?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, itemEvent).then((response) => {\n      if (response) {\n        var data = {};\n\n        data.start = new Date(itemEvent.start_time);\n        data.end = new Date(itemEvent.end_time);\n        data.title = itemEvent.title;\n        data.frequency = itemEvent.frequency;\n        data.eventType = itemEvent.event_type;\n        data.status = true;\n        data.roomId = itemEvent.fk_id_room;\n        data.profId = itemEvent.fk_id_prof;\n        data.assignClassSubjectId = itemEvent.fk_id_assign_class_subject;\n        data.subjectId = itemSuplimentaire.subjectId;\n        data.classId = itemSuplimentaire.classId;\n        data.classeName = itemSuplimentaire.className;\n        data.creatorName = itemSuplimentaire.creatorName;\n        data.creatorSurname = itemSuplimentaire.creatorSurname;\n\n        data.roomName = itemSuplimentaire.roomName;\n        data.subjectName = itemSuplimentaire.subjectName;\n        data.subjectColor = itemSuplimentaire.subjectColor;\n        data.profName = itemSuplimentaire.profName;\n        data.profSurname = itemSuplimentaire.profSurname;\n\n        dispatch({ type: ADD_EVENT, payload: data });\n        dispatch(\n          getEventsByEstabAndSchoolYear(\n            itemSuplimentaire.establishmentId,\n            itemSuplimentaire.schoolYearId,\n            itemSuplimentaire.classId\n          )\n        );\n      }\n    });\n  };\n};\nexport const archiverEvent = (classItem) => {\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/` + classItem.id + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      const item = response.data;\n      classService\n        .put(apiEndpoint, {\n          name: item.name,\n          level_class: item.level_class,\n          student_id: item.students,\n          professor_id: item.professors,\n          establishment_id: item.establishment_id,\n          capacity: item.capacity,\n          start_date: item.start_date,\n          end_date: item.end_date,\n          description: item.description,\n          students_number: item.students_number,\n          status: false,\n          id: classItem.id,\n          event_type: classItem.event_type,\n          subject_id: classItem.subject,\n        })\n        .then((response) => {\n          dispatch({ type: REMOVE_EVENT, payload: classItem });\n        })\n        .catch(function(error) {\n          alert('error');\n        });\n    });\n  };\n};\n\nexport const updateEvent = (item) => {\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/` + item.id + `?access_token=${localStorage.token}`;\n    // const { name, level_class, establishment, capacity, start_date, end_date, description, students_number, student_id, professor_id } = item;\n\n    classService\n      .put(apiEndpoint, {\n        title: item.title,\n        level_class: item.level_class,\n        student_id: item.student_id,\n        professor_id: item.professor_id,\n        establishment_id: item.establishment_id,\n        capacity: item.capacity,\n        start_date: item.start_date,\n        end_date: item.end_date,\n        description: item.description,\n        students_number: item.students_number,\n      })\n      .then((response) => {\n        dispatch({ type: UPDATE_EVENT, payload: response.data });\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n};\nexport const handleEventRequestClose = () => {\n  return {\n    type: 'HANDLE_EVENT_REQUEST_CLOSE',\n  };\n};\n\nexport const PlanningAction = {\n  getEvents,\n  addEvent,\n  archiverEvent,\n  updateEvent,\n  getEventsBy2Filters,\n  handleEventRequestClose,\n};\n\nexport const getClassTimeTable = (classId) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    const rooms = state.rooms;\n    let apiEndpoint = `/contextual_events/timetable/${classId}?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.timetable;\n        let timeTableEvents = [];\n        if (state.auth.userProfile.role_id == 3) {\n          for (var i = 0; i < genericEvents.length; i++) {\n            const lessonRooms = rooms.filter((element) => element.id === genericEvents[i].room_id);\n            const lessonSubject = subjects.filter(\n              (element) => element.id === genericEvents[i].subject_id\n            );\n            if (genericEvents[i].professor_id === state.auth.userProfile.id) {\n              genericEvents[i].contextualEvents.map((event) => {\n                const container = {};\n                container['start'] = new Date(event.start_lesson);\n                container['end'] = new Date(event.end_lesson);\n                container['title'] = genericEvents[i].title;\n                container['room_id'] = genericEvents[i].room_id;\n                container['room_name'] = lessonRooms[0].name;\n                container['class_id'] = genericEvents[i].class_id;\n                container['subject_id'] = genericEvents[i].subject_id;\n                container['subject_name'] = lessonSubject[0].name;\n                container['frequency'] = genericEvents[i].frequency;\n                container['id'] = event.id;\n                container['hexa_color'] = lessonSubject[0].hexa_color;\n                container['professor_profile'] = genericEvents[i].professor_id;\n                timeTableEvents.push(container);\n              });\n            }\n          }\n        } else {\n          for (var i = 0; i < genericEvents.length; i++) {\n            const lessonRooms = rooms.filter((element) => element.id === genericEvents[i].room_id);\n            const lessonSubject = subjects.filter(\n              (element) => element.id === genericEvents[i].subject_id\n            );\n            genericEvents[i].contextualEvents.map((event) => {\n              const container = {};\n              container['start'] = new Date(event.start_lesson);\n              container['end'] = new Date(event.end_lesson);\n              container['title'] = genericEvents[i].title;\n              container['room_id'] = genericEvents[i].room_id;\n              container['room_name'] = lessonRooms[0].name;\n              container['class_id'] = genericEvents[i].class_id;\n              container['subject_id'] = genericEvents[i].subject_id;\n              container['subject_name'] = lessonSubject[0].name;\n              container['frequency'] = genericEvents[i].frequency;\n              container['id'] = event.id;\n              container['hexa_color'] = lessonSubject[0].hexa_color;\n              container['professor_profile'] = genericEvents[i].professor_id;\n              timeTableEvents.push(container);\n            });\n          }\n        }\n        dispatch({ type: 'GET_EVENTS_BY_CLASS', payload: timeTableEvents });\n      })\n      .catch((err) => {});\n  };\n};\n\nexport function getParentTimeTable(profileId) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then((response) => {\n      rooms = response.data;\n    });\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/timeTableForParents/${profileId}?access_token=${token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.timeTableForParents;\n        let timeTableEvents = [];\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter((element) => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(\n            (element) => element.id === genericEvents[i].subject_id\n          );\n          genericEvents[i].contextualEvents.map((event) => {\n            const container = {};\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            container['supplies'] = event.supplie;\n            timeTableEvents.push(container);\n          });\n        }\n        dispatch({ type: 'GET_EVENTS_STUDENT', payload: timeTableEvents });\n      })\n      .catch((err) => {});\n  };\n}\n\nexport const getStudentTimeTable = (profileId) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then((response) => {\n      rooms = response.data;\n    });\n    let token = localStorage.token;\n    let apiEndpoint = `/contextual_events/classTimeTable/${profileId}?access_token=${token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        let genericEvents = response.data.classTimeTable;\n        let timeTableEvents = [];\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter((element) => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(\n            (element) => element.id === genericEvents[i].subject_id\n          );\n          genericEvents[i].contextualEvents.map((event) => {\n            const container = {};\n\n            container['event_type'] = genericEvents[i].event_type;\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            timeTableEvents.push(container);\n          });\n        }\n        dispatch({ type: 'GET_EVENTS_STUDENT', payload: timeTableEvents });\n      })\n      .catch((err) => {});\n  };\n};\nexport const getProfessorTimeTable = (profileId) => {\n  return (dispatch, getState) => {\n    const state = getState();\n    const subjects = state.subject.remoteSubjects;\n    let rooms = [];\n    let apiEndpoint1 = `/rooms?access_token=${localStorage.token}&filter[where][establishment_id]=${state.auth.userProfile.establishment_id}`;\n    classService.get(apiEndpoint1).then((response) => {\n      rooms = response.data;\n    });\n    let apiEndpoint = `/professors/get-professor-calendar/${profileId}?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((res) => {\n        let genericEvents = res.data.calendar;\n        let timeTableEvents = [];\n        for (var i = 0; i < genericEvents.length; i++) {\n          const lessonRooms = rooms.filter((element) => element.id === genericEvents[i].room_id);\n          const lessonSubject = subjects.filter(\n            (element) => element.id === genericEvents[i].subject_id\n          );\n          genericEvents[i].contextualEvents.map((event) => {\n            const container = {};\n            container['start'] = new Date(event.start_lesson);\n            container['end'] = new Date(event.end_lesson);\n            container['title'] = genericEvents[i].title;\n            container['room_id'] = genericEvents[i].room_id;\n            container['room_name'] = lessonRooms[0].name;\n            container['class_id'] = genericEvents[i].class_id;\n            container['subject_id'] = genericEvents[i].subject_id;\n            container['subject_name'] = lessonSubject[0].name;\n            container['frequency'] = genericEvents[i].frequency;\n            container['id'] = event.id;\n            container['hexa_color'] = lessonSubject[0].hexa_color;\n            container['professor_profile'] = genericEvents[i].professor_id;\n            timeTableEvents.push(container);\n          });\n        }\n        dispatch({ type: 'GET_EVENTS_PROFESSOR', payload: timeTableEvents });\n      })\n      .catch((err) => {});\n  };\n};\n\nexport const removeEventList = () => {\n  return (dispatch) => {\n    dispatch({ type: 'REMOVE_EVENTS_LIST' });\n  };\n};\nexport const handleSubmitEdit = (data) => {\n  return (dispatch) => {\n    let apiEndpoint = `/generic_events/updateGenricEvent?access_token=${localStorage.token}`;\n    classService\n      .post(apiEndpoint, data)\n      .then((response) => {\n        if (response.status === 200) {\n          dispatch(getEventsByClass(data.classId));\n        } else {\n          dispatch({\n            type: 'ADD_EVENT_NOT_ALLOWED',\n            payload: <IntlMessages id=\"components.planning.event.message.notallowed\" />,\n          });\n        }\n      })\n      .catch((error) => {});\n  };\n};\n\nexport const getEventsByEstabAndSchoolYear = (establishementId, schoolYearId, classId) => {\n  return (dispatch) => {\n    let apiEndpoint = `/planning_events/fetchPlanningEvents/${establishementId}/${schoolYearId}/${classId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        let listEvents = response.data.planningsEvents;\n\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach((event) => {\n          newEvent = {\n            id: event.id,\n            start: new Date(event.start),\n            end: new Date(event.end),\n            title: event.title,\n            frequency: event.frequency,\n            eventType: event.eventType,\n            status: event.status,\n            roomId: event.roomId,\n            roomName: event.roomName,\n            profId: event.profId,\n            profName: event.profName,\n            profSurname: event.profSurname,\n            assignClassSubjectId: event.assignClassSubjectId,\n            subjectId: event.subjectId,\n            subjectColor: event.subjectColor,\n            subjectName: event.subjectName,\n            classId: event.classId,\n            classeName: event.className,\n            creatorName: event.creatorName,\n            creatorSurname: event.creatorSurname,\n            profGender: event.profGender,\n            idRepetition: event.idRepetition,\n            repetition: event.repetition,\n          };\n          newListEvents.push(newEvent);\n        });\n\n        dispatch({ type: GET_EVENTS_CLASS, payload: newListEvents });\n      }\n    });\n  };\n};\n\nexport const editEvent = (itemEvent, itemSuplimentaire) => {\n  return (dispatch) => {\n    let apiEndpoint = `/planning_events/` + itemEvent.id + `?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, itemEvent).then((response) => {\n      if (response) {\n        var data = {};\n        data.id = itemEvent.id;\n        data.start = new Date(itemEvent.start_time);\n        data.end = new Date(itemEvent.end_time);\n        data.title = itemEvent.title;\n        data.frequency = itemEvent.frequency;\n        data.eventType = itemEvent.event_type;\n        data.status = true;\n        data.roomId = itemEvent.fk_id_room;\n        data.profId = itemEvent.fk_id_prof;\n        data.assignClassSubjectId = itemEvent.fk_id_assign_class_subject;\n        data.subjectId = itemSuplimentaire.subjectId;\n        data.classId = itemSuplimentaire.classId;\n        data.classeName = itemSuplimentaire.className;\n        data.creatorName = itemSuplimentaire.creatorName;\n        data.creatorSurname = itemSuplimentaire.creatorSurname;\n\n        data.roomName = itemSuplimentaire.roomName;\n        data.subjectName = itemSuplimentaire.subjectName;\n        data.subjectColor = itemSuplimentaire.subjectColor;\n        data.profName = itemSuplimentaire.profName;\n        data.profSurname = itemSuplimentaire.profSurname;\n\n        dispatch({ type: EDIT_EVENT, payload: data });\n        dispatch(\n          getEventsByEstabAndSchoolYear(\n            itemSuplimentaire.establishmentId,\n            itemSuplimentaire.schoolYearId,\n            itemSuplimentaire.classId\n          )\n        );\n      }\n    });\n  };\n};\n\nexport const deleteEvent = (typeDelete, itemEvent, establishmentId, schoolYearId, classId) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/planning_events/` +\n      itemEvent.id +\n      `?access_token=${localStorage.token}&filter[include][callRegister]`;\n    classService.get(apiEndpoint, itemEvent).then((response) => {\n      let momentStartData = moment(itemEvent.start);\n\n      if (response) {\n        let canDelete = true;\n        if (typeDelete == 'future') {\n          let sameDateCallRegister = [];\n          sameDateCallRegister = response.data.callRegister.filter((call) =>\n            moment(call.start_date).isSameOrAfter(momentStartData)\n          );\n           canDelete = sameDateCallRegister.length == 0;\n        } else if (typeDelete == 'uniq') {\n          let sameDateCallRegister = [];\n          sameDateCallRegister = response.data.callRegister.filter((call) =>\n            moment(call.start_date).isSame(momentStartData)\n          );\n           canDelete = sameDateCallRegister.length == 0;\n        } else if (typeDelete == 'all') {\n          if (response.data.callRegister.length > 0) {\n            canDelete = false;\n          }\n        }\n         if (!canDelete) {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"Cet évènement est attaché à un registre d'appel !\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 2500);\n        } else {\n          let newData = {};\n          newData.id = itemEvent.id;\n          newData.status = itemEvent.status;\n          newData.repetition = itemEvent.repetition;\n\n          let apiEndpoint =\n            `/planning_events/` + newData.id + `?access_token=${localStorage.token}`;\n          classService.patch(apiEndpoint, newData).then((response) => {\n            if (response) {\n              dispatch({\n                type: SHOW_SUCCESS_MESSAGE,\n                payload: \"Cet évènement est supprimé avec succès\",\n              });\n              setTimeout(() => {\n                dispatch({ type: HIDE_SUCCESS_MESSAGE });\n              }, 3000);\n              \n              dispatch(getEventsByEstabAndSchoolYear(establishmentId, schoolYearId, classId));\n            }\n          });\n        }\n      }\n    });\n  };\n};\n\nexport const getEventsByEstabAndSchoolYearForProf = (establishementId, schoolYearId, profileId) => {\n  return (dispatch) => {\n    let apiEndpoint = `/planning_events/fetchScheduleProf/${establishementId}/${schoolYearId}/${profileId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        let listEvents = response.data.profSchedule;\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach((event) => {\n          newEvent = {\n            id: event.id,\n            start: new Date(event.start),\n            end: new Date(event.end),\n            title: event.title,\n            frequency: event.frequency,\n            eventType: event.eventType,\n            status: event.status,\n            roomId: event.roomId,\n            roomName: event.roomName,\n            profId: event.profId,\n            profName: event.profName,\n            profSurname: event.profSurname,\n            assignClassSubjectId: event.assignClassSubjectId,\n            subjectId: event.subjectId,\n            subjectColor: event.subjectColor,\n            subjectName: event.subjectName,\n            classId: event.classId,\n            classeName: event.className,\n            creatorName: event.creatorName,\n            creatorSurname: event.creatorSurname,\n            profGender: event.profGender,\n          };\n          newListEvents.push(newEvent);\n        });\n\n        dispatch({ type: GET_EVENTS_CLASS, payload: newListEvents });\n      }\n    });\n  };\n};\n\nexport const getEventCallRegisterForAdmin = (establishementId, schoolYearId, classId) => {\n  return (dispatch) => {\n    let apiEndpoint = `/planning_events/fetchPlanningEvents/${establishementId}/${schoolYearId}/${classId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        let listEvents = response.data.planningsEvents;\n        let newListEvents = [];\n        let newEvent = {};\n        listEvents.forEach((event) => {\n          if (event.eventType === 'lesson' || event.eventType === 'exam') {\n            newEvent = {\n              id: event.id,\n              start: new Date(event.start),\n              end: new Date(event.end),\n              title: event.title,\n              frequency: event.frequency,\n              eventType: event.eventType,\n              status: event.status,\n              roomId: event.roomId,\n              roomName: event.roomName,\n              profId: event.profId,\n              profName: event.profName,\n              profSurname: event.profSurname,\n              assignClassSubjectId: event.assignClassSubjectId,\n              subjectId: event.subjectId,\n              subjectColor: event.subjectColor,\n              subjectName: event.subjectName,\n              classId: event.classId,\n              classeName: event.className,\n              creatorName: event.creatorName,\n              creatorSurname: event.creatorSurname,\n              profGender: event.profGender,\n              tagCallRegister: event.tagCallRegister,\n            };\n            newListEvents.push(newEvent);\n          }\n        });\n\n        dispatch({ type: GET_EVENTS_call_REGISTER, payload: newListEvents });\n      }\n    });\n  };\n};\n\nexport const getEventCallRegisterForProf = (establishementId, schoolYearId, profileId) => {\n  return (dispatch) => {\n    let apiEndpoint = `/planning_events/fetchScheduleProf/${establishementId}/${schoolYearId}/${profileId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        let listEvents = response.data.profSchedule;\n        let newListEvents = [];\n        let newEvent = {};\n\n        listEvents.forEach((event) => {\n          if (event.eventType === 'lesson' || event.eventType === 'exam') {\n            newEvent = {\n              id: event.id,\n              start: new Date(event.start),\n              end: new Date(event.end),\n              description: event.description,\n              frequency: event.frequency,\n              eventType: event.eventType,\n              status: event.status,\n              roomId: event.roomId,\n              roomName: event.roomName,\n              profId: event.profId,\n              profName: event.profName,\n              profSurname: event.profSurname,\n              assignClassSubjectId: event.assignClassSubjectId,\n              subjectId: event.subjectId,\n              subjectColor: event.subjectColor,\n              subjectName: event.subjectName,\n              classId: event.classId,\n              classeName: event.className,\n              creatorName: event.creatorName,\n              creatorSurname: event.creatorSurname,\n              profGender: event.profGender,\n              tagCallRegister: event.tagCallRegister,\n            };\n            newListEvents.push(newEvent);\n          }\n        });\n\n        dispatch({ type: GET_EVENTS_call_REGISTER, payload: newListEvents });\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}