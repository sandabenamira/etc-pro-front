{"ast":null,"code":"import { moduleService } from '../_services/module.service';\nimport { ADD_MODULE, GET_ALL_MODULE, EDIT_MODULE, DELETE_MODULE } from \"../constants/ActionTypes\";\nexport const addModule = itemModule => {\n  //1\n  return dispatch => {\n    let apiEndpoint = `/modules?access_token=${localStorage.token}`;\n    moduleService.post(apiEndpoint, itemModule).then(response => {\n      let data = response.data;\n      dispatch({\n        type: ADD_MODULE,\n        payload: data\n      });\n      alert('L\\'ajout est effectué avec succès');\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const getModules = () => {\n  return dispatch => {\n    let apiEndpoint = `/modules?access_token=${localStorage.token}`;\n    moduleService.get(apiEndpoint).then(response => {\n      const list = response.data;\n      const moduleList = list.filter(element => element.status);\n      dispatch({\n        type: GET_ALL_MODULE,\n        payload: moduleList\n      });\n    }).catch(err => {});\n  };\n};\nexport const editModule = moduleItem => {\n  return dispatch => {\n    let apiEndpoint = '/modules/' + moduleItem.id + `?access_token=${localStorage.token}`;\n    const name = moduleItem.name;\n    const description = moduleItem.description;\n    const status = true;\n    const data = {\n      name,\n      description,\n      status\n    };\n    moduleService.put(apiEndpoint, data).then(response => {\n      dispatch({\n        type: EDIT_MODULE,\n        payload: response.data\n      });\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const deletemodule = id => {\n  return dispatch => {\n    let apiEndpoint = '/modules/' + id + `?access_token=${localStorage.token}`;\n    moduleService.get(apiEndpoint).then(response => {\n      const item = response.data;\n      const name = item.name;\n      const description = item.description;\n      const status = false;\n      const id = item.id;\n      const dataModule = {\n        name,\n        description,\n        status,\n        id\n      };\n      moduleService.archive(apiEndpoint, dataModule).then(response => {\n        dispatch({\n          type: DELETE_MODULE,\n          payload: response.data\n        });\n      }).catch(error => {\n        throw error;\n      });\n    });\n  };\n};\nexport const moduleAction = {\n  addModule,\n  getModules,\n  deletemodule\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap-pro/educap-pro-front/src/actions/ModuleAction.js"],"names":["moduleService","ADD_MODULE","GET_ALL_MODULE","EDIT_MODULE","DELETE_MODULE","addModule","itemModule","dispatch","apiEndpoint","localStorage","token","post","then","response","data","type","payload","alert","catch","error","getModules","get","list","moduleList","filter","element","status","err","editModule","moduleItem","id","name","description","put","deletemodule","item","dataModule","archive","moduleAction"],"mappings":"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","sourcesContent":["import { moduleService } from '../_services/module.service';\nimport { ADD_MODULE, GET_ALL_MODULE, EDIT_MODULE, DELETE_MODULE } from \"../constants/ActionTypes\";\n\nexport const addModule = (itemModule) => {                                                      //1\n    return (dispatch) => {\n        let apiEndpoint = `/modules?access_token=${localStorage.token}`;\n        moduleService.post(apiEndpoint, itemModule)\n            .then(response => {\n                let data = response.data;\n                dispatch({ type: ADD_MODULE, payload: data })\n                alert('L\\'ajout est effectué avec succès')\n            })\n            .catch(error => { throw (error) });\n    };\n};\n\nexport const getModules = () => {\n    return dispatch => {\n        let apiEndpoint = `/modules?access_token=${localStorage.token}`;\n        moduleService.get(apiEndpoint)\n            .then((response) => {\n                const list = response.data;\n                const moduleList = list.filter(element => element.status);\n                dispatch({ type: GET_ALL_MODULE, payload: moduleList });\n            }).catch((err) => {\n            })\n    };\n};\n\nexport const editModule = (moduleItem) => {                                                              \n    return (dispatch) => {\n        let apiEndpoint = '/modules/' + moduleItem.id +`?access_token=${localStorage.token}`;\n        const name = moduleItem.name;\n        const description = moduleItem.description;\n        const status = true;\n        const data = { name, description, status }\n        moduleService.put(apiEndpoint, data)\n            .then(response => {\n                dispatch({ type: EDIT_MODULE, payload: response.data })\n            }).catch(error => { throw (error) });\n    };\n};\n\nexport const deletemodule = (id) => {\n    return (dispatch) => {\n        let apiEndpoint = '/modules/' + id +`?access_token=${localStorage.token}`;\n        moduleService.get(apiEndpoint)\n            .then(response => {\n                const item = response.data;\n                const name = item.name;\n                const description = item.description;\n                const status = false;\n                const id = item.id;\n                const dataModule = { name, description, status, id }\n                moduleService.archive(apiEndpoint, dataModule)\n                    .then(response => {\n                        dispatch({ type: DELETE_MODULE, payload: response.data })\n                    }).catch(error => { throw (error) });\n\n            })\n    }\n};\n\nexport const moduleAction = {\n    addModule,\n    getModules,\n    deletemodule,\n};\n"]},"metadata":{},"sourceType":"module"}