{"ast":null,"code":"import { classService } from \"../_services/class.service\";\nimport { GET_CLASSES_BY_ESTABLISHMENT_ID, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE } from \"../constants/ActionTypes\";\nexport const getClasses = () => {\n  return dispatch => {\n    let apiEndpoint = `/classes?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let listActive = response.data.filter(classe => classe.status);\n      dispatch(receiveClasses(listActive));\n    }).catch(error => {});\n  };\n};\nexport const getClassesByEstablishmentId = establishmentId => {\n  return dispatch => {\n    let apiEndpoint = `/classes?access_token=${localStorage.token}&filter[where][establishment_id]=` + establishmentId;\n    classService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: GET_CLASSES_BY_ESTABLISHMENT_ID,\n        payload: response.data\n      }); // dispatch(receiveClassesByEstablishmentId(response.data));\n    }).catch(err => {});\n  };\n}; // const receiveClassesByEstablishmentId = classes => ({\n//   type: GET_CLASSES_BY_ESTABLISHMENT_ID,\n//   payload: classes\n// });\n\nconst receiveClasses = classes => ({\n  type: \"FETECHED_ALL_CLASS\",\n  classes: classes\n});\n\nexport function addClass(itemClass) {\n  let classData = {\n    name: itemClass.name,\n    capacity: itemClass.capacity,\n    students_number: itemClass.students_number,\n    status: true,\n    description: itemClass.description,\n    start_date: itemClass.start_date,\n    end_date: itemClass.end_date,\n    professor_id: itemClass.professor_id,\n    student_id: itemClass.student_id,\n    establishment_id: itemClass.establishment_id,\n    level_id: itemClass.level_id,\n    section_id: itemClass.section_id,\n    ar_name: itemClass.ar_name\n  };\n  return dispatch => {\n    let apiEndpoint = `/classes/create-class?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, classData).then(response => {\n      if (response) {\n        let data = response.data.classe;\n        dispatch({\n          type: \"ADD_CLASS\",\n          payload: data\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"La création est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n}\nexport const archiverClass = item => {\n  return dispatch => {\n    let apiEndpoint = `/classes/` + item + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const itemClass = response.data;\n      let classData = {\n        id: itemClass.id,\n        name: itemClass.name,\n        capacity: itemClass.capacity,\n        students_number: itemClass.students_number,\n        status: false,\n        description: itemClass.description,\n        start_date: itemClass.start_date,\n        end_date: itemClass.end_date,\n        establishment_id: itemClass.establishment_id,\n        level_id: itemClass.level_id,\n        section_id: itemClass.section_id,\n        ar_name: itemClass.ar_name\n      };\n      let apiEndpoint2 = `/classes/archiver-class?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint2, classData).then(response => {\n        dispatch({\n          type: \"REMOVE_CLASS\",\n          payload: response.data.classe\n        });\n      }).catch(error => {});\n    }).catch(error => {});\n  };\n};\nexport const updateClass = itemClass => {\n  let classData = {\n    id: itemClass.id,\n    name: itemClass.name,\n    capacity: itemClass.capacity,\n    students_number: itemClass.students_number,\n    status: true,\n    description: itemClass.description,\n    start_date: itemClass.start_date,\n    end_date: itemClass.end_date,\n    professor_id: itemClass.professor_id,\n    student_id: itemClass.student_id,\n    establishment_id: itemClass.establishment_id,\n    level_id: itemClass.level_id,\n    section_id: itemClass.section_id,\n    last_professor_id: itemClass.last_professor_id,\n    ar_name: itemClass.ar_name\n  };\n  return dispatch => {\n    let apiEndpoint = `/classes/update-class?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, classData).then(response => {\n      if (response) {\n        dispatch({\n          type: \"UPDATE_CLASS\",\n          payload: response.data.classe\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"La modification est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const getClassesByUserId = userId => {\n  return dispatch => {\n    let apiEndpoint = `/classes_professors/getClassesByUserId/${userId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: 'GET_CLASSES_BY_USER_ID',\n        payload: response.data.classes\n      });\n    }).catch(err => {});\n  };\n};\nexport const classAction = {\n  getClasses,\n  addClass,\n  archiverClass,\n  updateClass,\n  getClassesByEstablishmentId\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/classeAction.js"],"names":["classService","GET_CLASSES_BY_ESTABLISHMENT_ID","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","getClasses","dispatch","apiEndpoint","localStorage","token","get","then","response","listActive","data","filter","classe","status","receiveClasses","catch","error","getClassesByEstablishmentId","establishmentId","type","payload","err","classes","addClass","itemClass","classData","name","capacity","students_number","description","start_date","end_date","professor_id","student_id","establishment_id","level_id","section_id","ar_name","post","setTimeout","archiverClass","item","id","apiEndpoint2","updateClass","last_professor_id","getClassesByUserId","userId","classAction"],"mappings":"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","sourcesContent":["import { classService } from \"../_services/class.service\";\nimport { GET_CLASSES_BY_ESTABLISHMENT_ID, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE } from \"../constants/ActionTypes\";\n\nexport const getClasses = () => {\n  return dispatch => {\n    let apiEndpoint = `/classes?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        let listActive = response.data.filter(classe => classe.status);\n        dispatch(receiveClasses(listActive));\n      }).catch(error => {\n\n      });\n  };\n};\n\nexport const getClassesByEstablishmentId = establishmentId => {\n  return dispatch => {\n    let apiEndpoint =\n      `/classes?access_token=${localStorage.token}&filter[where][establishment_id]=` +\n      establishmentId;\n    classService\n      .get(apiEndpoint)\n      .then(response => {\n        dispatch({ type: GET_CLASSES_BY_ESTABLISHMENT_ID, payload: response.data });\n        // dispatch(receiveClassesByEstablishmentId(response.data));\n      })\n      .catch(err => { });\n  };\n};\n// const receiveClassesByEstablishmentId = classes => ({\n//   type: GET_CLASSES_BY_ESTABLISHMENT_ID,\n//   payload: classes\n// });\n\nconst receiveClasses = classes => ({\n  type: \"FETECHED_ALL_CLASS\",\n  classes: classes\n});\n\nexport function addClass(itemClass) {\n  let classData = {\n    name: itemClass.name,\n    capacity: itemClass.capacity,\n    students_number: itemClass.students_number,\n    status: true,\n    description: itemClass.description,\n    start_date: itemClass.start_date,\n    end_date: itemClass.end_date,\n    professor_id: itemClass.professor_id,\n    student_id: itemClass.student_id,\n    establishment_id: itemClass.establishment_id,\n    level_id: itemClass.level_id,\n    section_id: itemClass.section_id,\n    ar_name: itemClass.ar_name\n  };\n  return dispatch => {\n    let apiEndpoint = `/classes/create-class?access_token=${localStorage.token}`;\n    classService\n      .post(apiEndpoint, classData)\n      .then(response => {\n        if (response) {\n          let data = response.data.classe;\n          dispatch({ type: \"ADD_CLASS\", payload: data });\n          dispatch({ type: SHOW_SUCCESS_MESSAGE, payload: \"La création est effectuée avec succès\" })\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 4000);\n        } else {\n          dispatch({ type: SHOW_ERROR_MESSAGE, payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\" });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 4000);\n        }\n\n      })\n\n  };\n}\n\nexport const archiverClass = item => {\n  return dispatch => {\n    let apiEndpoint =\n      `/classes/` + item + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        const itemClass = response.data;\n        let classData = {\n          id: itemClass.id,\n          name: itemClass.name,\n          capacity: itemClass.capacity,\n          students_number: itemClass.students_number,\n          status: false,\n          description: itemClass.description,\n          start_date: itemClass.start_date,\n          end_date: itemClass.end_date,\n          establishment_id: itemClass.establishment_id,\n          level_id: itemClass.level_id,\n          section_id: itemClass.section_id,\n          ar_name: itemClass.ar_name\n        };\n        let apiEndpoint2 = `/classes/archiver-class?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint2, classData)\n\n          .then(response => {\n            dispatch({ type: \"REMOVE_CLASS\", payload: response.data.classe });\n          })\n          .catch(error => {\n          });\n      })\n      .catch(error => {\n      });\n  };\n};\n\nexport const updateClass = itemClass => {\n  let classData = {\n    id: itemClass.id,\n    name: itemClass.name,\n    capacity: itemClass.capacity,\n    students_number: itemClass.students_number,\n    status: true,\n    description: itemClass.description,\n    start_date: itemClass.start_date,\n    end_date: itemClass.end_date,\n    professor_id: itemClass.professor_id,\n    student_id: itemClass.student_id,\n    establishment_id: itemClass.establishment_id,\n    level_id: itemClass.level_id,\n    section_id: itemClass.section_id,\n    last_professor_id: itemClass.last_professor_id,\n    ar_name: itemClass.ar_name\n  };\n  return dispatch => {\n    let apiEndpoint = `/classes/update-class?access_token=${localStorage.token}`;\n    classService\n      .post(apiEndpoint, classData)\n      .then(response => {\n\n        if (response) {\n          dispatch({ type: \"UPDATE_CLASS\", payload: response.data.classe });\n          dispatch({ type: SHOW_SUCCESS_MESSAGE, payload: \"La modification est effectuée avec succès\" })\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 4000);\n        }\n        else {\n          dispatch({ type: SHOW_ERROR_MESSAGE, payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\" });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 4000);\n        }\n\n      })\n\n  };\n};\nexport const getClassesByUserId = userId => {\n  return dispatch => {\n    let apiEndpoint = `/classes_professors/getClassesByUserId/${userId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then(response => {\n        dispatch({ type: 'GET_CLASSES_BY_USER_ID', payload: response.data.classes });\n      })\n      .catch(err => { });\n  };\n};\n\n\nexport const classAction = {\n  getClasses,\n  addClass,\n  archiverClass,\n  updateClass,\n  getClassesByEstablishmentId\n};\n"]},"metadata":{},"sourceType":"module"}