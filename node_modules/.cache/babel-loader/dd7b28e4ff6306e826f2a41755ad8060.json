{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/todo/Devoir/editHomework.js\";\nimport React from 'react';\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport IntlMessages from '../../../../util/IntlMessages';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Auxiliary from \"../../../../util/Auxiliary\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from \"react-redux\";\nimport { editHomework } from '../../../../actions/ToDo';\nimport { getName } from \"../../../../actions/countriesAction\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { classService } from \"../../../../_services/class.service\";\nimport Can from '../../../../can';\nimport { RoleContext } from '../../../../Context';\nimport _ from \"lodash\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/moment';\nimport CardBox from '../../../../components/CardBox/index';\nimport { roleIdProfessor } from '../../../../config/config';\nimport { getSectionsByLevelId } from \"../../../../actions/sectionAction\";\nimport { subjectsByLevelBySection, getSubjectsForProf } from '../../../../actions/subjectAction';\nimport { getlevelsForProf } from '../../../../actions/classLevelAction';\nconst titles = [{\n  value: 'Exercice de livre',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"toDo.book.exercise\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }\n  })\n}, {\n  value: 'Serie d\\'exercice',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"toDo.series.exercise\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }\n  })\n}, {\n  value: 'Autre',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"toDo.other.exercise\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }\n  })\n}];\n\nclass EditHomework extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.assignNewClass = index => {\n      this.setState(prevState => ({\n        assignHomeworkList: [...prevState.assignHomeworkList, {\n          id: index\n        }]\n      }));\n    };\n\n    this.handleChangeSubject = name => event => {\n      let apiEndpoint = `/prof_subjects?access_token=${localStorage.token}&filter[include][professor][profile][user]&filter[where][subject_id]=${event.target.value}`;\n      classService.get(apiEndpoint).then(res => {\n        if (res) {\n          const data = res.data;\n          let listProfByEstablishment = data.filter(element => element.professor.profile.establishment_id === this.props.userProfile.establishment_id);\n          this.setState({\n            professorsList: listProfByEstablishment\n          });\n        }\n      });\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleChangeLevel = name => event => {\n      let levelId = event.target.value;\n\n      if (levelId > 10) {\n        this.setState({\n          sectionsDisable: false\n        });\n      } else {\n        if (this.props.userProfile.role_id === roleIdProfessor) {\n          this.setState({\n            level_id: levelId\n          });\n          this.props.dispatch(getSubjectsForProf(this.props.userProfile.id));\n        } else {\n          this.setState({\n            subjectList: subjectsByLevelBySection(this.props.subjects, levelId, 0),\n            level_id: levelId\n          });\n        }\n      }\n\n      this.props.dispatch(getSectionsByLevelId(levelId));\n    };\n\n    this.handleChangeSection = name => event => {\n      let sectionId = event.target.value;\n\n      if (this.props.userProfile.role_id === roleIdProfessor) {\n        let data = this.state.subjectsAffectedToProf;\n        let listSubject = subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId);\n        let dataSubjectsFiltred = [];\n        data.forEach(item => {\n          let dataFiltred = listSubject.filter(element => element.id === item);\n\n          if (!_.isEmpty(dataFiltred[0])) {\n            dataSubjectsFiltred.push(dataFiltred[0]);\n          }\n\n          this.setState({\n            subjectList: dataSubjectsFiltred\n          });\n        });\n      } else {\n        this.setState({\n          subjectList: subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId)\n        });\n      }\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let date = new Date();\n      const title = this.state.title;\n      const description = this.state.description;\n      const date_creation = date;\n      const professor_id = this.state.professor_id;\n      const subject_id = this.state.subject_id;\n      let files = this.props.homework.files;\n      const establishment_id = this.props.userProfile.establishment_id;\n      const newFile = this.state.fileList;\n      const files_name = this.state.inputText;\n      const id = this.props.homework.id;\n      const assignHomeworkList = this.state.assignHomeworkList;\n      const data = {\n        id,\n        title,\n        files_name,\n        description,\n        date_creation,\n        professor_id,\n        subject_id,\n        establishment_id,\n        newFile,\n        assignHomeworkList,\n        files\n      };\n      this.props.dispatch(editHomework(data, files));\n      this.setState({\n        title: '',\n        subject_id: 0,\n        description: '',\n        professor_id: 0,\n        assignHomeworkList: [{\n          id: 0\n        }]\n      });\n      this.props.cancelModal();\n    };\n\n    this.onDrop = e => {\n      let file = e.target.files[0];\n      this.setState({\n        fileList: file,\n        inputText: file.name\n      });\n    };\n\n    this.state = {\n      previewVisible: true,\n      title: '',\n      subject_id: '',\n      description: '',\n      professor_id: 0,\n      professorsList: [],\n      subject: [],\n      levels: [],\n      modal: false,\n      pictures: [],\n      file: null,\n      fileList: null,\n      inputText: '',\n      assignHomeworkList: [{\n        id: 0\n      }],\n      sectionsDisable: true,\n      level_id: 0,\n      subjectsAffectedToProf: [],\n      classes: [],\n      subjectList: [],\n      section_id: 0\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.handleChangeLevel = this.handleChangeLevel.bind(this);\n    this.handleChangeSection = this.handleChangeSection.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.assignClass = this.assignClass.bind(this);\n    this.assignNewClass = this.assignNewClass.bind(this);\n  }\n\n  assignClass(event, name, index) {\n    if (name === \"classId\") {\n      let newList = this.state.assignHomeworkList.map(objSubject => objSubject.id === index ? { ...objSubject,\n        classId: event.target.value\n      } : objSubject);\n      this.setState({\n        assignHomeworkList: newList\n      });\n    } else {\n      let newList = this.state.assignHomeworkList.map(objSubject => objSubject.id === index ? { ...objSubject,\n        correctionDate: event._d\n      } : objSubject);\n      this.setState({\n        assignHomeworkList: newList\n      });\n    }\n  }\n\n  componentDidMount() {\n    let data = this.props.homework;\n    let apiEndpoint = `/subjects/${data.subject_id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let levelId = response.data.level_id;\n        this.setState({\n          level_id: response.data.level_id,\n          section_id: response.data.section_id\n        });\n        this.props.dispatch(getSectionsByLevelId(response.data.level_id));\n\n        if (levelId > 10) {\n          this.setState({\n            sectionsDisable: false\n          });\n        }\n\n        if (this.props.userProfile.role_id === roleIdProfessor) {\n          this.props.dispatch(getlevelsForProf(this.props.userProfile.id));\n          this.props.dispatch(getSubjectsForProf(this.props.userProfile.id));\n          this.setState({\n            classes: this.props.classesList\n          });\n        } else {\n          let subjectList = this.props.subjects.filter(element => element.level_id === levelId);\n          let apiEndpoint = `/prof_subjects?access_token=${localStorage.token}&filter[include][professor][profile][user]&filter[where][subject_id]=${data.subject_id}`;\n          classService.get(apiEndpoint).then(res => {\n            if (res) {\n              let listProfByEstablishment = res.data.filter(element => element.professor.profile.establishment_id === this.props.userProfile.establishment_id);\n              this.setState({\n                professorsList: listProfByEstablishment\n              });\n            }\n          });\n          this.setState({\n            classes: this.props.classes,\n            levels: this.props.levels,\n            subjectList: subjectList\n          });\n        }\n      }\n    });\n    let homeworkClass = [];\n\n    if (!_.isEmpty(data.homeworkClass)) {\n      data.homeworkClass.forEach(element => {\n        let obj = {\n          'id': data.homeworkClass.indexOf(element),\n          'classId': element.class_id,\n          'correctionDate': element.correction_date\n        };\n        homeworkClass.push(obj);\n      });\n    } else {\n      homeworkClass = [{\n        id: 0\n      }];\n    }\n\n    this.setState({\n      title: data.title,\n      description: data.description,\n      professor_id: data.professor_id,\n      subject_id: data.subject_id,\n      assignHomeworkList: homeworkClass,\n      inputText: data.files_name\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.levels !== this.props.levels) {\n      this.setState({\n        levels: this.props.levels\n      });\n    }\n\n    if (prevProps.subjectsProf !== this.props.subjectsProf) {\n      let list = this.props.subjectsProf.filter(element => element.level_id === this.state.level_id);\n      this.setState({\n        subjectList: list\n      });\n    }\n  }\n\n  handleCancel() {\n    this.props.cancelModal();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    let {\n      sections\n    } = this.props;\n    let {\n      sectionsDisable,\n      subjectList,\n      assignHomeworkList,\n      professorsList,\n      classes,\n      levels\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Auxiliary, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.previewVisible,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      className: \"modal-box-header bg-primary text-white\",\n      toggle: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"modal.addToDo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(RoleContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 29\n      }\n    }, ({\n      role\n    }) => /*#__PURE__*/React.createElement(Can, {\n      role: role,\n      perform: \"homework-filter:visit\",\n      yes: () => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-lg-12 text-primary\",\n        heading: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"component.etablishments.info.general\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 102\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: \"level_id\",\n        name: \"level_id\",\n        select: true,\n        value: this.state.level_id,\n        onChange: this.handleChangeLevel(),\n        SelectProps: {},\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"components.note.niveau\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 72\n          }\n        }),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 61\n        }\n      }, levels.map(level => /*#__PURE__*/React.createElement(MenuItem, {\n        key: level.id,\n        value: level.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 69\n        }\n      }, level.name)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: \"section_id\",\n        name: \"section_id\",\n        select: true,\n        value: this.state.section_id,\n        onChange: this.handleChangeSection(),\n        disabled: sectionsDisable,\n        SelectProps: {},\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"components.class.level.input.label.section\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 72\n          }\n        }),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 61\n        }\n      }, sections.map(section => /*#__PURE__*/React.createElement(MenuItem, {\n        key: section.id,\n        value: section.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 69\n        }\n      }, section.name)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        select: true,\n        id: \"subject_id\",\n        name: \"subject_id\",\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"sidebar.subjects\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 72\n          }\n        }),\n        value: this.state.subject_id,\n        onChange: this.handleChangeSubject('subject_id'),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 61\n        }\n      }, subjectList.map(subject => /*#__PURE__*/React.createElement(MenuItem, {\n        key: subject.id,\n        value: subject.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 69\n        }\n      }, getName(subject))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        id: \"title\",\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.titre\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 72\n          }\n        }),\n        value: this.state.title,\n        onChange: this.handleChange('title'),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Can, {\n        role: role,\n        perform: \"homework-filter-professor:visit\",\n        yes: () => /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-md-6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          id: \"professor_id\",\n          name: \"professor_id\",\n          select: true,\n          label: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"toDo.professor\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 80\n            }\n          }),\n          value: this.state.professor_id,\n          onChange: this.handleChange('professor_id'),\n          SelectProps: {},\n          margin: \"normal\",\n          fullWidth: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 69\n          }\n        }, professorsList.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n          key: option.professor.id,\n          value: option.professor.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 77\n          }\n        }, option.professor.profile.user.name + ' ' + option.professor.profile.user.surname)))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 57\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        name: \"description\",\n        multiline: true,\n        rows: 3,\n        id: \"description\",\n        variant: \"outlined\",\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"room.description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 72\n          }\n        }),\n        onChange: this.handleChange('description'),\n        value: this.state.description,\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 61\n        }\n      })))), /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-lg-12 text-primary\",\n        heading: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"stuppUser.formadd.file\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 102\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-12 pt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"name-multiple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.homework.task\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 98\n        }\n      })), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 159\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"files\",\n        className: \"btn\",\n        style: {\n          cursor: \"pointer\",\n          color: \"white\",\n          fontWeight: \"bold\",\n          backgroundColor: '#4B58B9',\n          borderRadius: '4rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 217\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"stuppUser.formadd.file\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 226\n        }\n      }))), \" \", /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"files\",\n        className: \"btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 289\n        }\n      }, this.state.inputText), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"files\",\n        type: \"file\",\n        style: {\n          visibility: \"hidden\"\n        },\n        onChange: e => this.onDrop(e),\n        accept: \"application/pdf,image/*, application/txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 61\n        }\n      })))), /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-12\",\n        heading: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"modal.assign_homework\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 86\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 53\n        }\n      }, assignHomeworkList.map((val, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row\",\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-sm-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          required: true,\n          id: `${index}`,\n          variant: \"outlined\",\n          select: true,\n          label: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"sidebar.classes\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 88\n            }\n          }),\n          onChange: event => this.assignClass(event, \"classId\", index),\n          name: \"classId\",\n          value: val.classId,\n          SelectProps: {},\n          margin: \"normal\",\n          fullWidth: true,\n          size: \"small\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 77\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 81\n          }\n        }), classes.map(itemClass => /*#__PURE__*/React.createElement(\"option\", {\n          key: itemClass.id,\n          value: itemClass.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 85\n          }\n        }, itemClass.name)))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-sm-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 77\n          }\n        }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n          label: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"toDo.correctionDate\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 92\n            }\n          }),\n          fullWidth: true,\n          id: `${index}`,\n          name: \"correctionDate\",\n          value: val.correctionDate,\n          onChange: event => this.assignClass(event, \"correctionDate\", index),\n          format: \"MM-DD-YYYY\",\n          autoOk: true,\n          minDate: new Date(),\n          required: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 81\n          }\n        }))));\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-12 pt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"font\", {\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 57\n        }\n      }, \"*\"), \" \", /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"component.required_fields\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 85\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12 text-left \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: \"jr-btn bg-indigo text-white \",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.establishments.formadd.buttonAdd\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 138\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: \"jr-btn bg-grey text-white \",\n        onClick: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.establishments.formadd.buttonCancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 149\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 37\n      }\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userProfile: state.auth.userProfile,\n    levels: state.ClassLevels.remoteLevels,\n    subjects: state.subject.remoteSubjects,\n    sections: state.classSections.remoteSections,\n    classes: state.classes,\n    subjectsProf: state.subject.subjectsProf\n  };\n};\n\nexport default connect(mapStateToProps)(EditHomework);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/todo/Devoir/editHomework.js"],"names":["React","Modal","ModalBody","ModalHeader","IntlMessages","TextField","Button","Auxiliary","MenuItem","connect","editHomework","getName","InputLabel","classService","Can","RoleContext","_","AddIcon","Fab","KeyboardDatePicker","MuiPickersUtilsProvider","DateFnsUtils","CardBox","roleIdProfessor","getSectionsByLevelId","subjectsByLevelBySection","getSubjectsForProf","getlevelsForProf","titles","value","label","EditHomework","Component","constructor","props","assignNewClass","index","setState","prevState","assignHomeworkList","id","handleChangeSubject","name","event","apiEndpoint","localStorage","token","target","get","then","res","data","listProfByEstablishment","filter","element","professor","profile","establishment_id","userProfile","professorsList","handleChangeLevel","levelId","sectionsDisable","role_id","level_id","dispatch","subjectList","subjects","handleChangeSection","sectionId","state","subjectsAffectedToProf","listSubject","dataSubjectsFiltred","forEach","item","dataFiltred","isEmpty","push","handleChange","handleSubmit","e","preventDefault","date","Date","title","description","date_creation","professor_id","subject_id","files","homework","newFile","fileList","files_name","inputText","cancelModal","onDrop","file","previewVisible","subject","levels","modal","pictures","classes","section_id","handleCancel","bind","toggle","assignClass","newList","map","objSubject","classId","correctionDate","_d","componentDidMount","response","classesList","homeworkClass","obj","indexOf","class_id","correction_date","componentDidUpdate","prevProps","subjectsProf","list","render","sections","role","level","section","option","user","surname","cursor","color","fontWeight","backgroundColor","borderRadius","visibility","val","itemClass","mapStateToProps","auth","ClassLevels","remoteLevels","remoteSubjects","classSections","remoteSections"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport IntlMessages from '../../../../util/IntlMessages';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Auxiliary from \"../../../../util/Auxiliary\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from \"react-redux\";\nimport { editHomework } from '../../../../actions/ToDo';\nimport { getName } from \"../../../../actions/countriesAction\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { classService } from \"../../../../_services/class.service\";\nimport Can from '../../../../can';\nimport { RoleContext } from '../../../../Context';\nimport _ from \"lodash\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/moment';\nimport CardBox from '../../../../components/CardBox/index';\nimport { roleIdProfessor } from '../../../../config/config';\nimport { getSectionsByLevelId } from \"../../../../actions/sectionAction\";\nimport { subjectsByLevelBySection, getSubjectsForProf } from '../../../../actions/subjectAction'\nimport { getlevelsForProf } from '../../../../actions/classLevelAction';\n\n\nconst titles = [\n    {\n        value: 'Exercice de livre',\n        label: <IntlMessages id=\"toDo.book.exercise\" />,\n    },\n    {\n        value: 'Serie d\\'exercice',\n        label: <IntlMessages id=\"toDo.series.exercise\" />,\n    },\n    {\n        value: 'Autre',\n        label: <IntlMessages id=\"toDo.other.exercise\" />,\n    }\n\n];\n\nclass EditHomework extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            previewVisible: true,\n            title: '',\n            subject_id: '',\n            description: '',\n            professor_id: 0,\n            professorsList: [],\n            subject: [],\n            levels: [],\n            modal: false,\n            pictures: [],\n            file: null,\n            fileList: null,\n            inputText: '',\n            assignHomeworkList: [{ id: 0 }],\n            sectionsDisable: true,\n            level_id: 0,\n            subjectsAffectedToProf: [],\n            classes: [],\n            subjectList: [],\n            section_id: 0\n        };\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.handleChangeLevel = this.handleChangeLevel.bind(this);\n        this.handleChangeSection = this.handleChangeSection.bind(this);\n        this.handleChangeSubject = this.handleChangeSubject.bind(this);\n        this.assignClass = this.assignClass.bind(this);\n        this.assignNewClass = this.assignNewClass.bind(this);\n    };\n    assignNewClass = index => {\n        this.setState(prevState => ({\n            assignHomeworkList: [\n                ...prevState.assignHomeworkList,\n                {\n                    id: index\n\n                }\n            ]\n        }));\n    };\n\n    assignClass(event, name, index) {\n        if (name === \"classId\") {\n            let newList = this.state.assignHomeworkList.map(objSubject =>\n                objSubject.id === index\n                    ? { ...objSubject, classId: event.target.value }\n                    : objSubject\n            )\n            this.setState({ assignHomeworkList: newList })\n\n        } else {\n            let newList = this.state.assignHomeworkList.map(objSubject =>\n                objSubject.id === index\n                    ? { ...objSubject, correctionDate: event._d }\n                    : objSubject\n            )\n            this.setState({ assignHomeworkList: newList })\n\n        }\n    }\n\n    handleChangeSubject = name => event => {\n\n        let apiEndpoint = `/prof_subjects?access_token=${localStorage.token}&filter[include][professor][profile][user]&filter[where][subject_id]=${event.target.value}`\n        classService.get(apiEndpoint)\n            .then(res => {\n                if (res) {\n                    const data = res.data;\n                    let listProfByEstablishment = data.filter(element => element.professor.profile.establishment_id === this.props.userProfile.establishment_id)\n                    this.setState({ professorsList: listProfByEstablishment })\n                }\n            });\n\n        this.setState({ [name]: event.target.value });\n    };\n\n    handleChangeLevel = name => event => {\n        let levelId = event.target.value;\n        if (levelId > 10) {\n            this.setState({ sectionsDisable: false })\n        } else {\n            if (this.props.userProfile.role_id === roleIdProfessor) {\n                this.setState({ level_id: levelId });\n                this.props.dispatch(getSubjectsForProf(this.props.userProfile.id))\n            } else {\n                this.setState({ subjectList: subjectsByLevelBySection(this.props.subjects, levelId, 0), level_id: levelId });\n            }\n\n        }\n        this.props.dispatch(getSectionsByLevelId(levelId))\n\n    }\n    handleChangeSection = name => event => {\n        let sectionId = event.target.value;\n        if (this.props.userProfile.role_id === roleIdProfessor) {\n            let data = this.state.subjectsAffectedToProf;\n            let listSubject = subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId);\n            let dataSubjectsFiltred = []\n            data.forEach(item => {\n                let dataFiltred = listSubject.filter(element => element.id === item)\n                if (!_.isEmpty(dataFiltred[0])) {\n                    dataSubjectsFiltred.push(dataFiltred[0])\n                }\n\n                this.setState({ subjectList: dataSubjectsFiltred });\n            });\n        } else {\n            this.setState({ subjectList: subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId) })\n        }\n    }\n    componentDidMount() {\n        let data = this.props.homework\n        let apiEndpoint = `/subjects/${data.subject_id}?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint)\n            .then((response) => {\n                if (response) {\n                    let levelId = response.data.level_id;\n                    this.setState({ level_id: response.data.level_id, section_id: response.data.section_id })\n                    this.props.dispatch(getSectionsByLevelId(response.data.level_id))\n                    if (levelId > 10) {\n                        this.setState({ sectionsDisable: false })\n                    }\n                    if (this.props.userProfile.role_id === roleIdProfessor) {\n                        this.props.dispatch(getlevelsForProf(this.props.userProfile.id))\n                        this.props.dispatch(getSubjectsForProf(this.props.userProfile.id))\n                        this.setState({ classes: this.props.classesList })\n                    } else {\n                        let subjectList = this.props.subjects.filter(element => element.level_id === levelId)\n                        let apiEndpoint = `/prof_subjects?access_token=${localStorage.token}&filter[include][professor][profile][user]&filter[where][subject_id]=${data.subject_id}`\n                        classService.get(apiEndpoint)\n                            .then(res => {\n                                if (res) {\n                                    let listProfByEstablishment = res.data.filter(element => element.professor.profile.establishment_id === this.props.userProfile.establishment_id)\n                                    this.setState({ professorsList: listProfByEstablishment })\n                                }\n                            });\n                            \n                        this.setState({ classes: this.props.classes, levels: this.props.levels, subjectList: subjectList })\n                    }\n                }\n            })\n\n\n        let homeworkClass = []\n        if(!_.isEmpty(data.homeworkClass)){\n            \n            data.homeworkClass.forEach(element => {\n                let obj = {\n                    'id': data.homeworkClass.indexOf(element),\n                    'classId': element.class_id,\n                    'correctionDate': element.correction_date\n                }\n                homeworkClass.push(obj)\n            });\n        }else{\n            homeworkClass= [{ id: 0 }];\n        }\n       \n        this.setState({\n            title: data.title,\n            description: data.description,\n            professor_id: data.professor_id,\n            subject_id: data.subject_id,\n            assignHomeworkList: homeworkClass,\n            inputText: data.files_name\n\n        })\n\n    }\n    componentDidUpdate(prevProps) {\n        if ((prevProps.levels !== this.props.levels)) {\n            this.setState({ levels: this.props.levels })\n        }\n        if ((prevProps.subjectsProf !== this.props.subjectsProf)) {\n            let list = this.props.subjectsProf.filter(element => element.level_id === this.state.level_id)\n            this.setState({ subjectList: list })\n        }\n    }\n    handleCancel() {\n        this.props.cancelModal();\n    };\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let date = new Date();\n        const title = this.state.title;\n        const description = this.state.description;\n        const date_creation = date;\n        const professor_id = this.state.professor_id;\n        const subject_id = this.state.subject_id;\n        let files = this.props.homework.files\n        const establishment_id = this.props.userProfile.establishment_id\n        const newFile = this.state.fileList\n        const files_name = this.state.inputText; \n        const id = this.props.homework.id\n        const assignHomeworkList = this.state.assignHomeworkList\n        const data = { id, title,files_name, description, date_creation, professor_id, subject_id, establishment_id, newFile, assignHomeworkList ,files};\n        this.props.dispatch(editHomework(data, files));\n\n        this.setState({\n            title: '',\n            subject_id: 0,\n            description: '',\n            professor_id: 0,\n            assignHomeworkList: [{ id: 0 }]\n        });\n        this.props.cancelModal();\n\n    };\n\n    toggle() {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    }\n\n    onDrop = e => {\n        let file = e.target.files[0]\n        this.setState({\n            fileList: file,\n            inputText: file.name\n        });\n    };\n\n\n\n\n\n    render() {\n        let { sections } = this.props;\n        let { sectionsDisable, subjectList, assignHomeworkList, professorsList, classes, levels } = this.state;\n        return (\n            <Auxiliary>\n                <Modal isOpen={this.state.previewVisible}>\n                    <ModalHeader className=\"modal-box-header bg-primary text-white\"\n                        toggle={this.handleCancel}\n                    >\n                        {<IntlMessages id=\"modal.addToDo\" />}\n                    </ModalHeader>\n                    <ModalBody>\n                        <form onSubmit={this.handleSubmit}>\n                            <RoleContext.Consumer>\n                                {({ role }) => (\n                                    <Can\n                                        role={role}\n                                        perform=\"homework-filter:visit\"\n                                        yes={() => (\n                                            <div>\n                                                <CardBox styleName=\"col-lg-12 text-primary\" heading={<IntlMessages id=\"component.etablishments.info.general\" />} >\n                                                    <div className=\"row\">\n                                                        <div className=\"col-md-6\">\n\n                                                            <TextField\n                                                                id=\"level_id\"\n                                                                name=\"level_id\"\n                                                                select\n                                                                value={this.state.level_id}\n                                                                onChange={this.handleChangeLevel()}\n                                                                SelectProps={{}}\n                                                                label={<IntlMessages id=\"components.note.niveau\" />}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            >\n                                                                {levels.map((level) => (\n                                                                    <MenuItem key={level.id} value={level.id}>\n                                                                        {level.name}\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </TextField>\n\n                                                        </div>\n                                                        <div className=\"col-md-6\">\n\n                                                            <TextField\n                                                                id=\"section_id\"\n                                                                name=\"section_id\"\n                                                                select\n                                                                value={this.state.section_id}\n                                                                onChange={this.handleChangeSection()}\n                                                                disabled={sectionsDisable}\n                                                                SelectProps={{}}\n                                                                label={<IntlMessages id=\"components.class.level.input.label.section\" />}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            >\n                                                                {sections.map((section) => (\n                                                                    <MenuItem key={section.id} value={section.id}>\n                                                                        {section.name}\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </TextField>\n\n                                                        </div>\n                                                        <div className=\"col-sm-6\">\n                                                            <TextField\n                                                                required\n                                                                select\n                                                                id=\"subject_id\"\n                                                                name='subject_id'\n                                                                label={<IntlMessages id=\"sidebar.subjects\" />}\n                                                                value={this.state.subject_id}\n                                                                onChange={this.handleChangeSubject('subject_id')}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            >\n                                                                {subjectList.map(subject => (\n                                                                    <MenuItem key={subject.id} value={subject.id}>\n                                                                        {getName(subject)}\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </TextField>\n                                                        </div>\n                                                        <div className=\"col-sm-6\">\n                                                            <TextField\n                                                                required\n                                                                id=\"title\"\n                                                                label={<IntlMessages id=\"toDo.titre\" />}\n                                                                value={this.state.title}\n                                                                onChange={this.handleChange('title')}\n                                                                margin=\"normal\"\n                                                                fullWidth />\n                                                        </div>\n                                                        <Can\n                                                            role={role}\n                                                            perform=\"homework-filter-professor:visit\"\n                                                            yes={() => (\n                                                                <div className=\"col-md-6\">\n\n                                                                    <TextField\n                                                                        id=\"professor_id\"\n                                                                        name=\"professor_id\"\n                                                                        select\n                                                                        label={<IntlMessages id=\"toDo.professor\" />}\n                                                                        value={this.state.professor_id}\n                                                                        onChange={this.handleChange('professor_id')}\n                                                                        SelectProps={{}}\n                                                                        margin=\"normal\"\n                                                                        fullWidth\n                                                                    >\n                                                                        {professorsList.map((option) => (\n                                                                            <MenuItem\n                                                                                key={option.professor.id}\n                                                                                value={option.professor.id}\n                                                                            >\n                                                                                {option.professor.profile.user.name +\n                                                                                    ' ' +\n                                                                                    option.professor.profile.user.surname}\n                                                                            </MenuItem>\n                                                                        ))}\n                                                                    </TextField>\n\n                                                                </div>\n\n                                                            )}\n                                                        />\n\n                                                        <div className=\"col-sm-12\">\n                                                            <TextField\n                                                                name='description'\n                                                                multiline\n                                                                rows={3}\n                                                                id=\"description\"\n                                                                variant=\"outlined\"\n                                                                label={<IntlMessages id=\"room.description\" />}\n                                                                onChange={this.handleChange('description')}\n                                                                value={this.state.description}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </CardBox>\n\n                                                <CardBox styleName=\"col-lg-12 text-primary\" heading={<IntlMessages id=\"stuppUser.formadd.file\" />} >\n\n                                                    <div className=\"row\">\n                                                        <div className=\"col-sm-12 pt-3\">\n                                                            <InputLabel htmlFor=\"name-multiple\">{<IntlMessages id=\"components.homework.task\" />}</InputLabel> <br />\n                                                            <label htmlFor=\"files\" className=\"btn\" style={{ cursor: \"pointer\", color: \"white\", fontWeight: \"bold\", backgroundColor: '#4B58B9', borderRadius: '4rem' }} ><strong>{<IntlMessages id=\"stuppUser.formadd.file\" />}</strong></label> <label htmlFor=\"files\" className=\"btn\">{this.state.inputText}</label>\n                                                            <input id=\"files\" type=\"file\" style={{ visibility: \"hidden\" }} onChange={(e) => this.onDrop(e)} accept=\"application/pdf,image/*, application/txt\" />\n                                                        </div>\n                                                    </div>\n                                                </CardBox>\n                                                <CardBox styleName=\"col-12\" heading={<IntlMessages id=\"modal.assign_homework\" />} >\n                                                    <div >\n                                                        {\n                                                            assignHomeworkList.map((val, index) => {\n                                                                return (\n                                                                    <div className=\"row\" key={index}>\n                                                                        <div className=\"col-sm-5\">\n                                                                            <TextField\n                                                                                required\n                                                                                id={`${index}`}\n                                                                                variant=\"outlined\"\n                                                                                select\n                                                                                label={<IntlMessages id=\"sidebar.classes\" />}\n                                                                                onChange={event =>\n                                                                                    this.assignClass(event, \"classId\", index)\n                                                                                }\n                                                                                name=\"classId\"\n                                                                                value={val.classId}\n                                                                                SelectProps={{}}\n                                                                                margin=\"normal\"\n                                                                                fullWidth\n                                                                                size=\"small\"\n                                                                            >\n                                                                                <option></option>\n                                                                                {classes.map(itemClass => (\n                                                                                    <option key={itemClass.id} value={itemClass.id}>\n                                                                                        {itemClass.name}\n                                                                                    </option>\n                                                                                ))}\n                                                                            </TextField>\n                                                                        </div>\n                                                                        <div className=\"col-sm-5\">\n\n                                                                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                                                                <KeyboardDatePicker\n                                                                                    label={<IntlMessages id=\"toDo.correctionDate\" />}\n                                                                                    fullWidth\n                                                                                    id={`${index}`}\n                                                                                    name=\"correctionDate\"\n                                                                                    value={val.correctionDate}\n                                                                                    onChange={event =>\n                                                                                        this.assignClass(event, \"correctionDate\", index)\n                                                                                    }\n                                                                                    format=\"MM-DD-YYYY\"\n                                                                                    autoOk\n                                                                                    minDate={new Date()}\n                                                                                    required\n                                                                                />\n                                                                            </MuiPickersUtilsProvider>\n                                                                        </div>\n\n\n                                                                        {/* <div className=\"col-sm-2\">\n                                                                            <Fab\n                                                                                size=\"small\"\n                                                                                value={`${index}`}\n                                                                                color=\"primary\"\n                                                                                aria-label=\"Add\"\n                                                                                onClick={() => this.assignNewClass(index + 1)}\n                                                                            >\n                                                                                <AddIcon />\n                                                                            </Fab>\n                                                                        </div> */}\n                                                                    </div>\n                                                                )\n                                                            })\n                                                        }\n                                                    </div>\n                                                </CardBox>\n                                                <div className=\"col-sm-12 pt-4\">\n                                                    <h4><font color=\"red\">*</font> {<IntlMessages id=\"component.required_fields\" />}</h4>\n                                                </div>\n                                                <div className=\"col-md-12 text-left \">\n                                                    <Button variant=\"contained\" className=\"jr-btn bg-indigo text-white \" type=\"submit\" >{<IntlMessages id=\"components.establishments.formadd.buttonAdd\" />}</Button>\n                                                    <Button variant=\"contained\" className=\"jr-btn bg-grey text-white \" onClick={this.handleCancel}>{<IntlMessages id=\"components.establishments.formadd.buttonCancel\" />}</Button>\n                                                </div>\n                                            </div>\n\n                                        )}\n                                    />\n                                )}\n                            </RoleContext.Consumer>\n                        </form>\n                    </ModalBody>\n\n                </Modal>\n            </Auxiliary>\n\n        )\n    };\n}\nconst mapStateToProps = (state) => {\n    return {\n        userProfile: state.auth.userProfile,\n        levels: state.ClassLevels.remoteLevels,\n        subjects: state.subject.remoteSubjects,\n        sections: state.classSections.remoteSections,\n        classes: state.classes,\n        subjectsProf: state.subject.subjectsProf\n    }\n}\nexport default connect(mapStateToProps)(EditHomework);\n\n"]},"metadata":{},"sourceType":"module"}