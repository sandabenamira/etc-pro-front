{"ast":null,"code":"import { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport { SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE, GET_HOMEWORKS, ARCHIVED_GET_HOMEWORKS, ADD_NEW_HOMEWORK, DELETE_HOMEWORK, EDIT_HOMEWORK } from '../constants/ActionTypes';\nimport axios from 'axios';\nexport const addNewHomework = (data, homeworkFiles, classesData) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/addAndAssignHomework?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response && homeworkFiles.length > 0) {\n        let homeworkId = response.data.homework.id;\n        homeworkItem = response.data.homework;\n        let formadata = new FormData();\n        homeworkFiles.map((element, index) => {\n          let homeworkFile = element;\n          const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n          const fileName = 'homework' + homeworkId + index + String(Date.now()).slice(-2) + 'N' + element.name;\n          var object = {};\n          object.file = homeworkFile;\n          object.fileName = fileName;\n          const myNewFile = new File([object.file], fileName, {\n            type: object.file.type\n          });\n          formadata.append('file', myNewFile);\n        });\n        let filesURL = [];\n        const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n        axios({\n          url: URLMaterailCourse,\n          method: 'POST',\n          data: formadata\n        }).then(response => {\n          if (response) {\n            filesURL = response.data.result.files.file.map((urlFile, index) => {\n              return {\n                name: urlFile.name,\n                url_file: urlFile.providerResponse.location,\n                status: true,\n                assignement_date: new Date(),\n                update_date: new Date(),\n                fk_id_homework: homeworkId\n              };\n            });\n            let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n            classService.post(apiEndpointFiles, filesURL).then(homeworksFiles => {\n              if (homeworksFiles) {\n                classesData.forEach(element => {\n                  let object = {};\n                  object.classId = element.id;\n                  object.className = element.label;\n                  object.courseId = element.id;\n                  object.homework = { ...homeworkItem,\n                    homeworkFiles: homeworksFiles.data,\n                    subject: {\n                      name: data.subjectName,\n                      id: data.subjectId,\n                      color: data.subjectColor\n                    }\n                  };\n                  newhomework.push(object);\n                });\n                dispatch({\n                  type: ADD_NEW_HOMEWORK,\n                  payload: newhomework\n                });\n                dispatch({\n                  type: SHOW_SUCCESS_MESSAGE,\n                  payload: 'La création est effectuée avec succès'\n                });\n                setTimeout(() => {\n                  dispatch({\n                    type: HIDE_SUCCESS_MESSAGE\n                  });\n                }, 4000); // this.dispatch(getHomework)\n              } else {}\n            });\n          }\n        }).catch(err => {});\n      } else if (!response) {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      } else if (response && homeworkFiles.length == 0) {\n        classesData.forEach(element => {\n          let object = {};\n          object.classId = element.id;\n          object.className = element.label;\n          object.homework = { ...response.data.homework,\n            homeworkFiles: [],\n            subject: {\n              name: data.subjectName,\n              id: data.subjectId,\n              color: data.subjectColor\n            }\n          };\n          newhomework.push(object);\n        });\n        dispatch({\n          type: ADD_NEW_HOMEWORK,\n          payload: newhomework\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'La création est effectuée avec succès'\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const deleteHomework = idHomework => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/` + idHomework + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, {\n      status: false\n    }).then(response => {\n      if (response) {\n        dispatch({\n          type: DELETE_HOMEWORK,\n          payload: response.data.id\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'archivage est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'archivage merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport function getHomework(establishmentId, schoolYearId, profileId, roleId) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/getHomework/${establishmentId}/${schoolYearId}/${profileId}/${roleId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let homeworkList = response.data.homeworks;\n        let archivedHomeworksList = [];\n        let homeworkListUnarchived = [];\n        homeworkList.map(elementItem => {\n          if (elementItem.homework.status === false) {\n            archivedHomeworksList.push(elementItem);\n          } else {\n            homeworkListUnarchived.push(elementItem);\n          }\n        });\n        dispatch({\n          type: GET_HOMEWORKS,\n          payload: homeworkListUnarchived\n        });\n        dispatch({\n          type: ARCHIVED_GET_HOMEWORKS,\n          payload: archivedHomeworksList\n        });\n      }\n    });\n  };\n}\nexport const editHomework = (data, homeworkFiles, classesData, oldFiles) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/edit-homework?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then(response => {\n      if (response && homeworkFiles.length > 0) {\n        let homeworkId = response.data.editHomeworkData.id;\n        homeworkItem = response.data.editHomeworkData;\n        let formadata = new FormData();\n        homeworkFiles.map((element, index) => {\n          let homeworkFile = element;\n          const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n          const fileName = 'homework' + homeworkId + index + String(Date.now()).slice(-2) + 'N' + element.name;\n          var object = {};\n          object.file = homeworkFile;\n          object.fileName = fileName;\n          const myNewFile = new File([object.file], fileName, {\n            type: object.file.type\n          });\n          formadata.append('file', myNewFile);\n        });\n        let filesURL = [];\n        const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n        axios({\n          url: URLMaterailCourse,\n          method: 'POST',\n          data: formadata\n        }).then(response => {\n          if (response) {\n            filesURL = response.data.result.files.file.map((urlFile, index) => {\n              return {\n                name: urlFile.name,\n                url_file: urlFile.providerResponse.location,\n                status: true,\n                assignement_date: new Date(),\n                update_date: new Date(),\n                fk_id_homework: homeworkId\n              };\n            });\n            let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n            classService.post(apiEndpointFiles, filesURL).then(homeworksFiles => {\n              if (homeworksFiles) {\n                classesData.forEach(element => {\n                  let object = {};\n                  object.classId = element.id;\n                  object.className = element.label;\n                  object.courseId = element.id;\n                  object.homework = { ...homeworkItem,\n                    homeworkFiles: oldFiles.concat(homeworksFiles.data),\n                    subject: {\n                      name: data.subjectName,\n                      id: data.subjectId,\n                      color: data.subjectColor\n                    }\n                  };\n                  newhomework.push(object);\n                });\n                dispatch({\n                  type: EDIT_HOMEWORK,\n                  payload: newhomework\n                });\n                dispatch({\n                  type: SHOW_SUCCESS_MESSAGE,\n                  payload: 'La modification est effectuée avec succès'\n                });\n                setTimeout(() => {\n                  dispatch({\n                    type: HIDE_SUCCESS_MESSAGE\n                  });\n                }, 4000); // this.dispatch(getHomework)\n              } else {}\n            });\n          }\n        }).catch(err => {});\n      } else if (!response) {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      } else if (response && homeworkFiles.length == 0) {\n        classesData.forEach(element => {\n          let object = {};\n          object.classId = element.id;\n          object.className = element.label;\n          object.courseId = element.id;\n          object.homework = { ...response.data.editHomeworkData,\n            homeworkFiles: oldFiles,\n            subject: {\n              name: data.subjectName,\n              id: data.subjectId,\n              color: data.subjectColor\n            }\n          };\n          newhomework.push(object);\n        });\n        dispatch({\n          type: EDIT_HOMEWORK,\n          payload: newhomework\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'La modification est effectuée avec succès'\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/HomeworkAction.js"],"names":["classService","baseUrl","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","GET_HOMEWORKS","ARCHIVED_GET_HOMEWORKS","ADD_NEW_HOMEWORK","DELETE_HOMEWORK","EDIT_HOMEWORK","axios","addNewHomework","data","homeworkFiles","classesData","newhomework","homeworkItem","dispatch","apiEndpoint","localStorage","token","post","then","response","length","homeworkId","homework","id","formadata","FormData","map","element","index","homeworkFile","fileExtension","name","replace","fileName","String","Date","now","slice","object","file","myNewFile","File","type","append","filesURL","URLMaterailCourse","url","method","result","files","urlFile","url_file","providerResponse","location","status","assignement_date","update_date","fk_id_homework","apiEndpointFiles","homeworksFiles","forEach","classId","className","label","courseId","subject","subjectName","subjectId","color","subjectColor","push","payload","setTimeout","catch","err","deleteHomework","idHomework","patch","getHomework","establishmentId","schoolYearId","profileId","roleId","get","homeworkList","homeworks","archivedHomeworksList","homeworkListUnarchived","elementItem","editHomework","oldFiles","put","editHomeworkData","concat"],"mappings":"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","sourcesContent":["import { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport {\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n  GET_HOMEWORKS,\n  ARCHIVED_GET_HOMEWORKS,\n  ADD_NEW_HOMEWORK,\n  DELETE_HOMEWORK,\n  EDIT_HOMEWORK,\n} from '../constants/ActionTypes';\nimport axios from 'axios';\n\nexport const addNewHomework = (data, homeworkFiles, classesData) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/addAndAssignHomework?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then((response) => {\n      if (response && homeworkFiles.length > 0) {\n        let homeworkId = response.data.homework.id;\n        homeworkItem = response.data.homework;\n        let formadata = new FormData();\n        homeworkFiles.map((element, index) => {\n          let homeworkFile = element;\n          const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n          const fileName =\n            'homework' + homeworkId + index + String(Date.now()).slice(-2) + 'N' + element.name;\n\n          var object = {};\n          object.file = homeworkFile;\n          object.fileName = fileName;\n          const myNewFile = new File([object.file], fileName, {\n            type: object.file.type,\n          });\n          formadata.append('file', myNewFile);\n        });\n\n        let filesURL = [];\n\n        const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n        axios({\n          url: URLMaterailCourse,\n          method: 'POST',\n          data: formadata,\n        })\n          .then((response) => {\n            if (response) {\n              filesURL = response.data.result.files.file.map((urlFile, index) => {\n                return {\n                  name: urlFile.name,\n                  url_file: urlFile.providerResponse.location,\n                  status: true,\n                  assignement_date: new Date(),\n                  update_date: new Date(),\n                  fk_id_homework: homeworkId,\n                };\n              });\n              let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n              classService.post(apiEndpointFiles, filesURL).then((homeworksFiles) => {\n                if (homeworksFiles) {\n                  classesData.forEach((element) => {\n                    let object = {};\n                    object.classId = element.id;\n                    object.className = element.label;\n                    object.courseId = element.id;\n                    object.homework = {\n                      ...homeworkItem,\n                      homeworkFiles: homeworksFiles.data,\n                      subject: {\n                        name: data.subjectName,\n                        id: data.subjectId,\n                        color: data.subjectColor,\n                      },\n                    };\n                    newhomework.push(object);\n                  });\n                  dispatch({\n                    type: ADD_NEW_HOMEWORK,\n                    payload: newhomework,\n                  });\n                  dispatch({\n                    type: SHOW_SUCCESS_MESSAGE,\n                    payload: 'La création est effectuée avec succès',\n                  });\n\n                  setTimeout(() => {\n                    dispatch({ type: HIDE_SUCCESS_MESSAGE });\n                  }, 4000);\n                  // this.dispatch(getHomework)\n                } else {\n                 }\n              });\n            }\n          })\n          .catch((err) => {});\n      } else if (!response) {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      } else if (response && homeworkFiles.length == 0) {\n        classesData.forEach((element) => {\n          let object = {};\n          object.classId = element.id;\n          object.className = element.label;\n          object.homework = {\n            ...response.data.homework,\n            homeworkFiles: [],\n            subject: {\n              name: data.subjectName,\n              id: data.subjectId,\n              color: data.subjectColor,\n            },\n          };\n          newhomework.push(object);\n        });\n        dispatch({\n          type: ADD_NEW_HOMEWORK,\n          payload: newhomework,\n        });\n\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'La création est effectuée avec succès',\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n\nexport const deleteHomework = (idHomework) => {\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/` + idHomework + `?access_token=${localStorage.token}`;\n    classService\n      .patch(apiEndpoint, {\n        status: false,\n      })\n      .then((response) => {\n        if (response) {\n          dispatch({ type: DELETE_HOMEWORK, payload: response.data.id });\n\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: \"L'archivage est effectuée avec succès\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 4000);\n        } else {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"Une erreur est survenue lors de l'archivage merci d'essayer à nouveau\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 4000);\n        }\n      });\n  };\n};\n\nexport function getHomework(establishmentId, schoolYearId, profileId, roleId) {\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/getHomework/${establishmentId}/${schoolYearId}/${profileId}/${roleId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        let homeworkList = response.data.homeworks;\n        let archivedHomeworksList = [];\n        let homeworkListUnarchived = [];\n\n        homeworkList.map((elementItem) => {\n          if (elementItem.homework.status === false) {\n            archivedHomeworksList.push(elementItem);\n          } else {\n            homeworkListUnarchived.push(elementItem);\n          }\n        });\n\n        dispatch({\n          type: GET_HOMEWORKS,\n          payload: homeworkListUnarchived,\n        });\n        dispatch({\n          type: ARCHIVED_GET_HOMEWORKS,\n          payload: archivedHomeworksList,\n        });\n      }\n    });\n  };\n}\n\nexport const editHomework = (data, homeworkFiles, classesData, oldFiles) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/edit-homework?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then((response) => {\n       if (response && homeworkFiles.length > 0) {\n        let homeworkId = response.data.editHomeworkData.id;\n        homeworkItem = response.data.editHomeworkData;\n        let formadata = new FormData();\n        homeworkFiles.map((element, index) => {\n          let homeworkFile = element;\n          const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n          const fileName =\n            'homework' + homeworkId + index + String(Date.now()).slice(-2) + 'N' + element.name;\n\n          var object = {};\n          object.file = homeworkFile;\n          object.fileName = fileName;\n          const myNewFile = new File([object.file], fileName, {\n            type: object.file.type,\n          });\n          formadata.append('file', myNewFile);\n        });\n\n        let filesURL = [];\n\n        const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n        axios({\n          url: URLMaterailCourse,\n          method: 'POST',\n          data: formadata,\n        })\n          .then((response) => {\n            if (response) {\n              filesURL = response.data.result.files.file.map((urlFile, index) => {\n                return {\n                  name: urlFile.name,\n                  url_file: urlFile.providerResponse.location,\n                  status: true,\n                  assignement_date: new Date(),\n                  update_date: new Date(),\n                  fk_id_homework: homeworkId,\n                };\n              });\n              let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n              classService.post(apiEndpointFiles, filesURL).then((homeworksFiles) => {\n                if (homeworksFiles) {\n                  classesData.forEach((element) => {\n                    let object = {};\n                    object.classId = element.id;\n                    object.className = element.label;\n                    object.courseId = element.id;\n\n                    object.homework = {\n                      ...homeworkItem,\n                      homeworkFiles: oldFiles.concat(homeworksFiles.data),\n                      subject: {\n                        name: data.subjectName,\n                        id: data.subjectId,\n                        color: data.subjectColor,\n                      },\n                    };\n                    newhomework.push(object);\n                  });\n                   dispatch({\n                    type: EDIT_HOMEWORK,\n                    payload: newhomework,\n                  });\n                  dispatch({\n                    type: SHOW_SUCCESS_MESSAGE,\n                    payload: 'La modification est effectuée avec succès',\n                  });\n\n                  setTimeout(() => {\n                    dispatch({ type: HIDE_SUCCESS_MESSAGE });\n                  }, 4000);\n                  // this.dispatch(getHomework)\n                } else {\n                 }\n              });\n            }\n          })\n          .catch((err) => {});\n      } else if (!response) {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      } else if (response && homeworkFiles.length == 0) {\n        classesData.forEach((element) => {\n          let object = {};\n          object.classId = element.id;\n          object.className = element.label;\n          object.courseId = element.id;\n\n          object.homework = {\n            ...response.data.editHomeworkData,\n            homeworkFiles: oldFiles,\n            subject: {\n              name: data.subjectName,\n              id: data.subjectId,\n              color: data.subjectColor,\n            },\n          };\n          newhomework.push(object);\n        });\n        dispatch({\n          type: EDIT_HOMEWORK,\n          payload: newhomework,\n        });\n\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'La modification est effectuée avec succès',\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}