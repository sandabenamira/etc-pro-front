{"ast":null,"code":"import axios from \"axios\";\nimport baseUrl from \"../config/config\";\nimport { classService } from \"../_services/class.service\";\nimport { ADD_ALLOCATION_SERVICE, FETECHED_ALL_ALLOCATION_SERVICE, EDIT_ALLOCATION_SERVICE, DELETE_ALLOCATION_SERVICE, HANDLE_REQUEST_CLOSE, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE } from \"../constants/ActionTypes\";\nexport const editAllocationService = (data, establishmentId) => {\n  return dispatch => {\n    let apiEndpoint = \"/allocation_service_v2/\" + data.id + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, data).then(response => {\n      if (response) {\n        dispatch(getAllocationServiceByEstablishment(establishmentId));\n      }\n    });\n  };\n};\nexport const addAllocationService = (item, establishmentId) => {\n  return dispatch => {\n    let apiEndpoint = `/allocation_service_v2?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, item).then(response => {\n      if (response) {\n        dispatch(getAllocationServiceByEstablishment(establishmentId));\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'affectaion est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'affectation merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const getAllocationService = () => {\n  return dispatch => {\n    let apiEndpoint = `/allocation_service_v2?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const list = response.data;\n      const ClassVirtualList = list.filter(element => element.status);\n      dispatch({\n        type: FETECHED_ALL_ALLOCATION_SERVICE,\n        payload: ClassVirtualList\n      });\n    }).catch(err => {});\n  };\n};\nexport const getAllocationServiceByEstablishmentId = establishmentId => {\n  return dispatch => {\n    let apiEndpoint = `/allocation_service_v2?access_token=${localStorage.token}&filter[where][establishment_id]=` + establishmentId;\n    classService.get(apiEndpoint).then(response => {\n      const list = response.data;\n      const ClassVirtualList = list.filter(element => element.status);\n      dispatch({\n        type: FETECHED_ALL_ALLOCATION_SERVICE,\n        payload: ClassVirtualList\n      });\n    }).catch(err => {});\n  };\n};\nexport const deleteFailed = (data, establishmentId) => {\n  return dispatch => {\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload: \"La Suppression est impossible , il y a des factures déja générées\"\n    });\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_ERROR_MESSAGE\n      });\n    }, 4000);\n  };\n};\nexport const studentExist = student => {\n  return dispatch => {\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload: \"L'éléve  ' \" + student + \" '  est déja affecté a des prestations ,Vous pouvez faire la modification \"\n    });\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_ERROR_MESSAGE\n      });\n    }, 4500);\n  };\n};\nexport const deleteAllocationService = (data, establishmentId) => {\n  return dispatch => {\n    let apiEndpoint = \"/allocation_service_v2/\" + data.id + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, data).then(response => {\n      if (response) {\n        dispatch(getAllocationServiceByEstablishment(establishmentId));\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"Suppression est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la suppression merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport function getAllocationServiceByEstablishment(idEstablishment) {\n  return dispatch => {\n    let apiEndpoint = `/allocation_service_v2/fetchAllocationservicev2Data/${idEstablishment}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: FETECHED_ALL_ALLOCATION_SERVICE,\n          payload: response.data.Allocationservicev2Data\n        });\n      }\n    });\n  };\n}\nexport const serviceAction = {\n  addAllocationService,\n  getAllocationService,\n  deleteAllocationService,\n  editAllocationService,\n  getAllocationServiceByEstablishmentId,\n  deleteFailed,\n  studentExist\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/AllocationServiceAction.js"],"names":["axios","baseUrl","classService","ADD_ALLOCATION_SERVICE","FETECHED_ALL_ALLOCATION_SERVICE","EDIT_ALLOCATION_SERVICE","DELETE_ALLOCATION_SERVICE","HANDLE_REQUEST_CLOSE","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","editAllocationService","data","establishmentId","dispatch","apiEndpoint","id","localStorage","token","patch","then","response","getAllocationServiceByEstablishment","addAllocationService","item","post","type","payload","setTimeout","getAllocationService","get","list","ClassVirtualList","filter","element","status","catch","err","getAllocationServiceByEstablishmentId","deleteFailed","studentExist","student","deleteAllocationService","idEstablishment","Allocationservicev2Data","serviceAction"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport baseUrl from \"../config/config\";\nimport { classService } from \"../_services/class.service\";\nimport {\n  ADD_ALLOCATION_SERVICE,\n  FETECHED_ALL_ALLOCATION_SERVICE,\n  EDIT_ALLOCATION_SERVICE,\n  DELETE_ALLOCATION_SERVICE,\n  HANDLE_REQUEST_CLOSE,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n} from \"../constants/ActionTypes\";\n\nexport const editAllocationService = (data, establishmentId) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      \"/allocation_service_v2/\" +\n      data.id +\n      `?access_token=${localStorage.token}`;\n\n    classService.patch(apiEndpoint, data).then((response) => {\n      if (response) {\n        dispatch(getAllocationServiceByEstablishment(establishmentId));\n      }\n    });\n  };\n};\n\nexport const addAllocationService = (item, establishmentId) => {\n  return (dispatch) => {\n    let apiEndpoint = `/allocation_service_v2?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, item).then((response) => {\n      if (response) {\n        dispatch(getAllocationServiceByEstablishment(establishmentId));\n\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'affectaion est effectuée avec succès\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de l'affectation merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n\nexport const getAllocationService = () => {\n  return (dispatch) => {\n    let apiEndpoint = `/allocation_service_v2?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const list = response.data;\n        const ClassVirtualList = list.filter((element) => element.status);\n        dispatch({\n          type: FETECHED_ALL_ALLOCATION_SERVICE,\n          payload: ClassVirtualList,\n        });\n      })\n      .catch((err) => {});\n  };\n};\n\nexport const getAllocationServiceByEstablishmentId = (establishmentId) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/allocation_service_v2?access_token=${localStorage.token}&filter[where][establishment_id]=` +\n      establishmentId;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const list = response.data;\n        const ClassVirtualList = list.filter((element) => element.status);\n\n        dispatch({\n          type: FETECHED_ALL_ALLOCATION_SERVICE,\n          payload: ClassVirtualList,\n        });\n      })\n      .catch((err) => {});\n  };\n};\nexport const deleteFailed = (data, establishmentId) => {\n  return (dispatch) => {\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload:\n        \"La Suppression est impossible , il y a des factures déja générées\",\n    });\n    setTimeout(() => {\n      dispatch({ type: HIDE_ERROR_MESSAGE });\n    }, 4000);\n  };\n};\nexport const studentExist = (student) => {\n  return (dispatch) => {\n    dispatch({\n      type: SHOW_ERROR_MESSAGE,\n      payload:\n        \"L'éléve  ' \" +\n        student +\n        \" '  est déja affecté a des prestations ,Vous pouvez faire la modification \",\n    });\n    setTimeout(() => {\n      dispatch({ type: HIDE_ERROR_MESSAGE });\n    }, 4500);\n  };\n};\nexport const deleteAllocationService = (data, establishmentId) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      \"/allocation_service_v2/\" +\n      data.id +\n      `?access_token=${localStorage.token}`;\n\n    classService.patch(apiEndpoint, data).then((response) => {\n      if (response) {\n        dispatch(getAllocationServiceByEstablishment(establishmentId));\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"Suppression est effectuée avec succès\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de la suppression merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n\nexport function getAllocationServiceByEstablishment(idEstablishment) {\n  return (dispatch) => {\n    let apiEndpoint = `/allocation_service_v2/fetchAllocationservicev2Data/${idEstablishment}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        dispatch({\n          type: FETECHED_ALL_ALLOCATION_SERVICE,\n          payload: response.data.Allocationservicev2Data,\n        });\n      }\n    });\n  };\n}\n\nexport const serviceAction = {\n  addAllocationService,\n  getAllocationService,\n  deleteAllocationService,\n  editAllocationService,\n  getAllocationServiceByEstablishmentId,\n  deleteFailed,\n  studentExist,\n};\n"]},"metadata":{},"sourceType":"module"}