{"ast":null,"code":"import { GET_ALL_MAIL, GET_IMPORTANT_MAIL, GET_NAV_FILTERS, GET_NAV_FOLDER, GET_NAV_LABELS, GET_READ_MAIL, GET_STARRED_MAIL, GET_UNIMPORTANT_MAIL, GET_UNREAD_MAIL, GET_UNSELECTED_ALL_MAIL, GET_UNSTARRED_MAIL, HANDLE_REQUEST_CLOSE, ON_ALL_MAIL_SELECT, ON_COMPOSE_MAIL, ON_DELETE_MAIL, ON_FOLDER_MENU_ITEM_SELECT, ON_FOLDER_SELECT, ON_HIDE_LOADER, ON_IMPORTANT_SELECT, ON_LABEL_MENU_ITEM_SELECT, ON_LABEL_SELECT, ON_MAIL_CHECKED, ON_MAIL_SELECT, ON_MAIL_SEND, ON_OPTION_MENU_ITEM_SELECT, ON_OPTION_MENU_SELECT, ON_START_SELECT, ON_TOGGLE_DRAWER, SEARCH_MAIL, SET_CURRENT_MAIL_NULL, UPDATE_SEARCH } from '../constants/ActionTypes';\nimport _ from 'lodash';\nimport { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport axios from 'axios';\nimport { FETCH_ALL_MAIL_SUCCESS, SHOW_MESSAGE } from '../constants/ActionTypes';\nexport const fetchMails = id => {\n  return dispatch => {\n    let apiEndpoint = `/mails/fetchemails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const mailReceived = response.data;\n      dispatch(fetchMailsSuccess(mailReceived.emails));\n    }).catch(error => {});\n  };\n};\nexport const fetchMailsSuccess = mails => {\n  return {\n    type: FETCH_ALL_MAIL_SUCCESS,\n    payload: mails\n  };\n};\nexport const showMailMessage = message => {\n  return {\n    type: SHOW_MESSAGE,\n    payload: message\n  };\n};\nexport const onFolderMenuItemSelect = folderId => {\n  return {\n    type: ON_FOLDER_MENU_ITEM_SELECT,\n    payload: folderId\n  };\n};\nexport const onMailLabelMenuItemSelect = label => {\n  return {\n    type: ON_LABEL_MENU_ITEM_SELECT,\n    payload: label\n  };\n};\nexport const handleMailRequestClose = () => {\n  return {\n    type: HANDLE_REQUEST_CLOSE\n  };\n};\nexport const getMailNavFilters = filter => {\n  return {\n    type: GET_NAV_FILTERS,\n    payload: filter\n  };\n};\nexport const onFolderSelect = () => {\n  return {\n    type: ON_FOLDER_SELECT\n  };\n};\nexport const onMailLabelSelect = () => {\n  return {\n    type: ON_LABEL_SELECT\n  };\n};\nexport const onMailOptionMenuSelect = () => {\n  return {\n    type: ON_OPTION_MENU_SELECT\n  };\n};\nexport const onOptionMenuItemSelect = option => {\n  return {\n    type: ON_OPTION_MENU_ITEM_SELECT,\n    payload: option\n  };\n};\nexport const getAllMail = () => {\n  return {\n    type: GET_ALL_MAIL\n  };\n};\nexport const getUnselectedAllMail = () => {\n  return {\n    type: GET_UNSELECTED_ALL_MAIL\n  };\n};\nexport const getReadMail = () => {\n  return {\n    type: GET_READ_MAIL\n  };\n};\nexport const getUnreadMail = () => {\n  return {\n    type: GET_UNREAD_MAIL\n  };\n};\nexport const getStarredMail = () => {\n  return {\n    type: GET_STARRED_MAIL\n  };\n};\nexport const getUnStarredMail = () => {\n  return {\n    type: GET_UNSTARRED_MAIL\n  };\n};\nexport const getImportantMail = () => {\n  return {\n    type: GET_IMPORTANT_MAIL\n  };\n};\nexport const getUnimportantMail = () => {\n  return {\n    type: GET_UNIMPORTANT_MAIL\n  };\n};\nexport const getMailNavLabels = label => {\n  return {\n    type: GET_NAV_LABELS,\n    payload: label\n  };\n};\nexport const onSearchMail = searchText => {\n  return {\n    type: SEARCH_MAIL,\n    payload: searchText\n  };\n};\nexport const onMailChecked = data => {\n  return {\n    type: ON_MAIL_CHECKED,\n    payload: data\n  };\n};\nexport const onAllMailSelect = () => {\n  return {\n    type: ON_ALL_MAIL_SELECT\n  };\n};\nexport const onStartSelect = data => {\n  return {\n    type: ON_START_SELECT,\n    payload: data\n  };\n};\nexport const onImportantSelect = data => {\n  return {\n    type: ON_IMPORTANT_SELECT,\n    payload: data\n  };\n};\nexport const onMailSend = data => {\n  if (data.file !== null) {\n    return dispatch => {\n      let dataMail = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_mail: data.date_hour_mail,\n        profile_id: data.sender_id\n      };\n      let apiEndpoint = `/mails/send-mail?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, dataMail).then(response => {\n        if (_.isEmpty(response.data)) {\n          dispatch({\n            type: 'MAIL_NOT_FOUND',\n            payload: \" mail n'existe pas \"\n          });\n        } else {\n          const fileExtension = data.file.name.replace(/^.*\\./, '');\n          const fileName = 'Mail_' + response.data.mail.id + '_Sender_' + data.sender_id + '.' + fileExtension;\n          const myNewFile = new File([data.file], fileName, {\n            type: data.file.type\n          });\n          const upload = {\n            file: myNewFile,\n            establishment_id: data.establishmentId\n          };\n          axios.put(`${baseUrl.baseUrl}/mails/` + response.data.mail.id + `?access_token=${localStorage.token}`, {\n            sender_id: data.sender_id,\n            receiver_id: data.receiver_id,\n            subject: data.subject,\n            message: data.message,\n            date_hour_mail: data.date_hour_mail,\n            profile_id: data.sender_id,\n            files: fileName\n          }).then(response => {\n            dispatch(uploadFile(upload));\n            dispatch({\n              type: ON_MAIL_SEND,\n              payload: response.data\n            });\n          });\n        }\n      }).catch(error => {});\n    };\n  } else {\n    return dispatch => {\n      let mailWithoutFile = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_mail: data.date_hour_mail,\n        profile_id: data.sender_id,\n        files: null\n      };\n      let apiEndpoint = `/mails/send-mail?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, mailWithoutFile).then(response => {\n        if (_.isEmpty(response.data)) {\n          dispatch({\n            type: 'MAIL_NOT_FOUND',\n            payload: \" mail n'existe pas \"\n          });\n        } else {\n          dispatch({\n            type: ON_MAIL_SEND,\n            payload: response.data\n          });\n        }\n      }).catch(error => {});\n    };\n  }\n};\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return dispatch => {\n      let apiEndpoint = `/establishments/` + payload.establishment_id + `?access_token=${localStorage.token}`;\n      classService.get(apiEndpoint).then(response => {\n        let formadata = new FormData();\n        formadata.append('image', payload.file);\n        const establishLogoUrl = `/containers/` + response.data.name + `/upload?access_token=${localStorage.token}`;\n        classService.post(establishLogoUrl, formadata).then(response => {}).catch(error => {});\n      }).catch(error => {});\n    };\n  } else {\n    return function (dispatch) {};\n  }\n}\nexport const onMailSelect = mail => {\n  return {\n    type: ON_MAIL_SELECT,\n    payload: mail\n  };\n};\nexport const getNavFolders = folder => {\n  switch (folder.id) {\n    case 0:\n      return dispatch => {\n        let apiEndpoint = `/mails/fetchemails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint).then(response => {\n          const mailReceived = response.data;\n          dispatch({\n            type: GET_NAV_FOLDER,\n            payload: {\n              id: folder.id,\n              data: mailReceived.emails\n            }\n          });\n        }).catch(error => {});\n      };\n\n    case 1:\n      return dispatch => {\n        let apiEndpoint = `/mails/fetchSentEmails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint).then(response => {\n          const mailReceived = response.data;\n          dispatch({\n            type: GET_NAV_FOLDER,\n            payload: {\n              id: folder.id,\n              data: mailReceived.emails\n            }\n          });\n        }).catch(error => {});\n      };\n\n    default:\n  }\n};\nexport const updateMailSearch = searchText => {\n  return {\n    type: UPDATE_SEARCH,\n    payload: searchText\n  };\n};\nexport const onMailToggleDrawer = () => {\n  return {\n    type: ON_TOGGLE_DRAWER\n  };\n};\nexport const onDeleteMail = () => {\n  return {\n    type: ON_DELETE_MAIL\n  };\n};\nexport const hideMailLoader = () => {\n  return {\n    type: ON_HIDE_LOADER\n  };\n};\nexport const setCurrentMailNull = () => {\n  return {\n    type: SET_CURRENT_MAIL_NULL\n  };\n};\nexport const onComposeMail = () => {\n  return {\n    type: ON_COMPOSE_MAIL\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/Mail.js"],"names":["GET_ALL_MAIL","GET_IMPORTANT_MAIL","GET_NAV_FILTERS","GET_NAV_FOLDER","GET_NAV_LABELS","GET_READ_MAIL","GET_STARRED_MAIL","GET_UNIMPORTANT_MAIL","GET_UNREAD_MAIL","GET_UNSELECTED_ALL_MAIL","GET_UNSTARRED_MAIL","HANDLE_REQUEST_CLOSE","ON_ALL_MAIL_SELECT","ON_COMPOSE_MAIL","ON_DELETE_MAIL","ON_FOLDER_MENU_ITEM_SELECT","ON_FOLDER_SELECT","ON_HIDE_LOADER","ON_IMPORTANT_SELECT","ON_LABEL_MENU_ITEM_SELECT","ON_LABEL_SELECT","ON_MAIL_CHECKED","ON_MAIL_SELECT","ON_MAIL_SEND","ON_OPTION_MENU_ITEM_SELECT","ON_OPTION_MENU_SELECT","ON_START_SELECT","ON_TOGGLE_DRAWER","SEARCH_MAIL","SET_CURRENT_MAIL_NULL","UPDATE_SEARCH","_","classService","baseUrl","axios","FETCH_ALL_MAIL_SUCCESS","SHOW_MESSAGE","fetchMails","id","dispatch","apiEndpoint","localStorage","profileId","token","get","then","response","mailReceived","data","fetchMailsSuccess","emails","catch","error","mails","type","payload","showMailMessage","message","onFolderMenuItemSelect","folderId","onMailLabelMenuItemSelect","label","handleMailRequestClose","getMailNavFilters","filter","onFolderSelect","onMailLabelSelect","onMailOptionMenuSelect","onOptionMenuItemSelect","option","getAllMail","getUnselectedAllMail","getReadMail","getUnreadMail","getStarredMail","getUnStarredMail","getImportantMail","getUnimportantMail","getMailNavLabels","onSearchMail","searchText","onMailChecked","onAllMailSelect","onStartSelect","onImportantSelect","onMailSend","file","dataMail","sender_id","receiver_id","subject","date_hour_mail","profile_id","post","isEmpty","fileExtension","name","replace","fileName","mail","myNewFile","File","upload","establishment_id","establishmentId","put","files","uploadFile","mailWithoutFile","formadata","FormData","append","establishLogoUrl","onMailSelect","getNavFolders","folder","updateMailSearch","onMailToggleDrawer","onDeleteMail","hideMailLoader","setCurrentMailNull","onComposeMail"],"mappings":"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","sourcesContent":["import {\n  GET_ALL_MAIL,\n  GET_IMPORTANT_MAIL,\n  GET_NAV_FILTERS,\n  GET_NAV_FOLDER,\n  GET_NAV_LABELS,\n  GET_READ_MAIL,\n  GET_STARRED_MAIL,\n  GET_UNIMPORTANT_MAIL,\n  GET_UNREAD_MAIL,\n  GET_UNSELECTED_ALL_MAIL,\n  GET_UNSTARRED_MAIL,\n  HANDLE_REQUEST_CLOSE,\n  ON_ALL_MAIL_SELECT,\n  ON_COMPOSE_MAIL,\n  ON_DELETE_MAIL,\n  ON_FOLDER_MENU_ITEM_SELECT,\n  ON_FOLDER_SELECT,\n  ON_HIDE_LOADER,\n  ON_IMPORTANT_SELECT,\n  ON_LABEL_MENU_ITEM_SELECT,\n  ON_LABEL_SELECT,\n  ON_MAIL_CHECKED,\n  ON_MAIL_SELECT,\n  ON_MAIL_SEND,\n  ON_OPTION_MENU_ITEM_SELECT,\n  ON_OPTION_MENU_SELECT,\n  ON_START_SELECT,\n  ON_TOGGLE_DRAWER,\n  SEARCH_MAIL,\n  SET_CURRENT_MAIL_NULL,\n  UPDATE_SEARCH\n} from '../constants/ActionTypes';\nimport _ from 'lodash';\nimport { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport axios from 'axios';\nimport { FETCH_ALL_MAIL_SUCCESS, SHOW_MESSAGE } from '../constants/ActionTypes';\n\nexport const fetchMails = id => {\n  return dispatch => {\n    let apiEndpoint =\n      `/mails/fetchemails/` +\n      localStorage.profileId +\n      `?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then(response => {\n        const mailReceived = response.data;\n        dispatch(fetchMailsSuccess(mailReceived.emails));\n      })\n      .catch(error => {});\n  };\n};\n\nexport const fetchMailsSuccess = mails => {\n  return {\n    type: FETCH_ALL_MAIL_SUCCESS,\n    payload: mails\n  };\n};\nexport const showMailMessage = message => {\n  return {\n    type: SHOW_MESSAGE,\n    payload: message\n  };\n};\n\nexport const onFolderMenuItemSelect = folderId => {\n  return {\n    type: ON_FOLDER_MENU_ITEM_SELECT,\n    payload: folderId\n  };\n};\n\nexport const onMailLabelMenuItemSelect = label => {\n  return {\n    type: ON_LABEL_MENU_ITEM_SELECT,\n    payload: label\n  };\n};\nexport const handleMailRequestClose = () => {\n  return {\n    type: HANDLE_REQUEST_CLOSE\n  };\n};\n\nexport const getMailNavFilters = filter => {\n  return {\n    type: GET_NAV_FILTERS,\n    payload: filter\n  };\n};\nexport const onFolderSelect = () => {\n  return {\n    type: ON_FOLDER_SELECT\n  };\n};\nexport const onMailLabelSelect = () => {\n  return {\n    type: ON_LABEL_SELECT\n  };\n};\nexport const onMailOptionMenuSelect = () => {\n  return {\n    type: ON_OPTION_MENU_SELECT\n  };\n};\nexport const onOptionMenuItemSelect = option => {\n  return {\n    type: ON_OPTION_MENU_ITEM_SELECT,\n    payload: option\n  };\n};\nexport const getAllMail = () => {\n  return {\n    type: GET_ALL_MAIL\n  };\n};\nexport const getUnselectedAllMail = () => {\n  return {\n    type: GET_UNSELECTED_ALL_MAIL\n  };\n};\nexport const getReadMail = () => {\n  return {\n    type: GET_READ_MAIL\n  };\n};\nexport const getUnreadMail = () => {\n  return {\n    type: GET_UNREAD_MAIL\n  };\n};\nexport const getStarredMail = () => {\n  return {\n    type: GET_STARRED_MAIL\n  };\n};\n\nexport const getUnStarredMail = () => {\n  return {\n    type: GET_UNSTARRED_MAIL\n  };\n};\nexport const getImportantMail = () => {\n  return {\n    type: GET_IMPORTANT_MAIL\n  };\n};\nexport const getUnimportantMail = () => {\n  return {\n    type: GET_UNIMPORTANT_MAIL\n  };\n};\nexport const getMailNavLabels = label => {\n  return {\n    type: GET_NAV_LABELS,\n    payload: label\n  };\n};\nexport const onSearchMail = searchText => {\n  return {\n    type: SEARCH_MAIL,\n    payload: searchText\n  };\n};\nexport const onMailChecked = data => {\n  return {\n    type: ON_MAIL_CHECKED,\n    payload: data\n  };\n};\n\nexport const onAllMailSelect = () => {\n  return {\n    type: ON_ALL_MAIL_SELECT\n  };\n};\nexport const onStartSelect = data => {\n  return {\n    type: ON_START_SELECT,\n    payload: data\n  };\n};\nexport const onImportantSelect = data => {\n  return {\n    type: ON_IMPORTANT_SELECT,\n    payload: data\n  };\n};\nexport const onMailSend = data => {\n  if (data.file !== null) {\n    return dispatch => {\n      let dataMail = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_mail: data.date_hour_mail,\n        profile_id: data.sender_id\n      };\n      let apiEndpoint = `/mails/send-mail?access_token=${localStorage.token}`;\n      classService\n        .post(apiEndpoint, dataMail)\n        .then(response => {\n          if (_.isEmpty(response.data)) {\n            dispatch({\n              type: 'MAIL_NOT_FOUND',\n              payload: \" mail n'existe pas \"\n            });\n          } else {\n            const fileExtension = data.file.name.replace(/^.*\\./, '');\n            const fileName =\n              'Mail_' +\n              response.data.mail.id +\n              '_Sender_' +\n              data.sender_id +\n              '.' +\n              fileExtension;\n            const myNewFile = new File([data.file], fileName, {\n              type: data.file.type\n            });\n            const upload = {\n              file: myNewFile,\n              establishment_id: data.establishmentId\n            };\n            axios\n              .put(\n                `${baseUrl.baseUrl}/mails/` +\n                  response.data.mail.id +\n                  `?access_token=${localStorage.token}`,\n                {\n                  sender_id: data.sender_id,\n                  receiver_id: data.receiver_id,\n                  subject: data.subject,\n                  message: data.message,\n                  date_hour_mail: data.date_hour_mail,\n                  profile_id: data.sender_id,\n                  files: fileName\n                }\n              )\n              .then(response => {\n                dispatch(uploadFile(upload));\n                dispatch({ type: ON_MAIL_SEND, payload: response.data });\n              });\n          }\n        })\n        .catch(error => {});\n    };\n  } else {\n    return dispatch => {\n      let mailWithoutFile = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_mail: data.date_hour_mail,\n        profile_id: data.sender_id,\n        files: null\n      };\n      let apiEndpoint = `/mails/send-mail?access_token=${localStorage.token}`;\n      classService\n        .post(apiEndpoint, mailWithoutFile)\n        .then(response => {\n          if (_.isEmpty(response.data)) {\n            dispatch({\n              type: 'MAIL_NOT_FOUND',\n              payload: \" mail n'existe pas \"\n            });\n          } else {\n            dispatch({ type: ON_MAIL_SEND, payload: response.data });\n          }\n        })\n        .catch(error => {});\n    };\n  }\n};\n\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return dispatch => {\n      let apiEndpoint =\n        `/establishments/` +\n        payload.establishment_id +\n        `?access_token=${localStorage.token}`;\n      classService\n        .get(apiEndpoint)\n        .then(response => {\n          let formadata = new FormData();\n          formadata.append('image', payload.file);\n          const establishLogoUrl =\n            `/containers/` +\n            response.data.name +\n            `/upload?access_token=${localStorage.token}`;\n          classService\n            .post(establishLogoUrl, formadata)\n            .then(response => {})\n            .catch(error => {});\n        })\n        .catch(error => {});\n    };\n  } else {\n    return function(dispatch) {};\n  }\n}\nexport const onMailSelect = mail => {\n  return {\n    type: ON_MAIL_SELECT,\n    payload: mail\n  };\n};\nexport const getNavFolders = folder => {\n  switch (folder.id) {\n    case 0:\n      return dispatch => {\n        let apiEndpoint =\n          `/mails/fetchemails/` +\n          localStorage.profileId +\n          `?access_token=${localStorage.token}`;\n        classService\n          .get(apiEndpoint)\n          .then(response => {\n            const mailReceived = response.data;\n            dispatch({\n              type: GET_NAV_FOLDER,\n              payload: {\n                id: folder.id,\n                data: mailReceived.emails\n              }\n            });\n          })\n          .catch(error => {});\n      };\n    case 1:\n      return dispatch => {\n        let apiEndpoint =\n          `/mails/fetchSentEmails/` +\n          localStorage.profileId +\n          `?access_token=${localStorage.token}`;\n        classService\n          .get(apiEndpoint)\n          .then(response => {\n            const mailReceived = response.data;\n            dispatch({\n              type: GET_NAV_FOLDER,\n              payload: {\n                id: folder.id,\n                data: mailReceived.emails\n              }\n            });\n          })\n          .catch(error => {});\n      };\n    default:\n   }\n};\n\nexport const updateMailSearch = searchText => {\n  return {\n    type: UPDATE_SEARCH,\n    payload: searchText\n  };\n};\nexport const onMailToggleDrawer = () => {\n  return {\n    type: ON_TOGGLE_DRAWER\n  };\n};\nexport const onDeleteMail = () => {\n  return {\n    type: ON_DELETE_MAIL\n  };\n};\nexport const hideMailLoader = () => {\n  return {\n    type: ON_HIDE_LOADER\n  };\n};\nexport const setCurrentMailNull = () => {\n  return {\n    type: SET_CURRENT_MAIL_NULL\n  };\n};\nexport const onComposeMail = () => {\n  return {\n    type: ON_COMPOSE_MAIL\n  };\n};\n"]},"metadata":{},"sourceType":"module"}