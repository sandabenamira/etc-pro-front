{"ast":null,"code":"import { classService } from \"../_services/class.service\";\nimport axios from \"axios\";\nimport baseUrl from \"../config/config\";\nimport { ON_MAIL_SEND, HANDLE_REQUEST_CLOSE, MAIL_NOT_SEND_ALERT } from \"../constants/ActionTypes\";\nexport const sendMail = (data, receivers, files) => {\n  let mailItem = {};\n  return dispatch => {\n    let apiEndpoint = `/mails_v4?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response) {\n        let mailId = response.data.id;\n        let receiversMail = [];\n        receiversMail = receivers.map(receiverId => {\n          return {\n            status: true,\n            fk_id_mail: mailId,\n            fk_id_receiver_profile: receiverId\n          };\n        });\n        let apiEndpointFiles = `/receivers_mails?access_token=${localStorage.token}`;\n        classService.post(apiEndpointFiles, receiversMail).then(receivermail => {\n          if (receivermail) {\n            if (files.length > 0) {\n              let formadata = new FormData();\n              files.map((element, index) => {\n                console.log('element', element);\n                let mailFile = element;\n                const fileExtension = mailFile.name.replace(/^.*\\./, \"\");\n                const fileName = \"mail\" + mailId + \"N\" + index + \".\" + fileExtension;\n                var object = {};\n                object.file = mailFile;\n                object.fileName = fileName;\n                const myNewFile = new File([object.file], fileName, {\n                  type: object.file.type\n                });\n                console.log('object', object);\n                formadata.append(\"file\", myNewFile);\n              });\n              let filesURL = [];\n              const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n              axios({\n                url: URLMaterailCourse,\n                method: \"POST\",\n                data: formadata\n              }).then(response => {\n                if (response) {\n                  filesURL = response.data.result.files.file.map((urlFile, index) => {\n                    console.log('urlFile', urlFile);\n                    return {\n                      file_name: urlFile.name,\n                      url_file: urlFile.providerResponse.location,\n                      status: true,\n                      creation_date: new Date(),\n                      fk_id_mail: mailId\n                    };\n                  });\n                  let apiEndpointFiles = `/files_mails?access_token=${localStorage.token}`;\n                  classService.post(apiEndpointFiles, filesURL).then(mailsFiles => {\n                    if (mailsFiles) {\n                      dispatch({\n                        type: ON_MAIL_SEND,\n                        payload: mailsFiles.data\n                      });\n                      setTimeout(() => {\n                        dispatch({\n                          type: HANDLE_REQUEST_CLOSE\n                        });\n                      }, 4000);\n                    } else {}\n                  });\n                }\n              }).catch(err => {});\n            } else {\n              //l email ne contient pas des files\n              dispatch({\n                type: ON_MAIL_SEND,\n                payload: response.data\n              });\n              setTimeout(() => {\n                dispatch({\n                  type: HANDLE_REQUEST_CLOSE\n                });\n              }, 4000);\n            }\n          } else {}\n        });\n      } else {\n        //erreur lors de l'ajout\n        dispatch({\n          type: MAIL_NOT_SEND_ALERT,\n          payload: \"\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HANDLE_REQUEST_CLOSE\n          });\n        }, 4000);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/MailAction.js"],"names":["classService","axios","baseUrl","ON_MAIL_SEND","HANDLE_REQUEST_CLOSE","MAIL_NOT_SEND_ALERT","sendMail","data","receivers","files","mailItem","dispatch","apiEndpoint","localStorage","token","post","then","response","mailId","id","receiversMail","map","receiverId","status","fk_id_mail","fk_id_receiver_profile","apiEndpointFiles","receivermail","length","formadata","FormData","element","index","console","log","mailFile","fileExtension","name","replace","fileName","object","file","myNewFile","File","type","append","filesURL","URLMaterailCourse","url","method","result","urlFile","file_name","url_file","providerResponse","location","creation_date","Date","mailsFiles","payload","setTimeout","catch","err"],"mappings":"AAAA,SAASA,YAAT,QAA6B,4BAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SACEC,YADF,EAEEC,oBAFF,EAGEC,mBAHF,QAIO,0BAJP;AAKA,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,KAAlB,KAA4B;AAClD,MAAIC,QAAQ,GAAG,EAAf;AACA,SAAQC,QAAD,IAAc;AACnB,QAAIC,WAAW,GAAI,0BAAyBC,YAAY,CAACC,KAAM,EAA/D;AACAd,IAAAA,YAAY,CAACe,IAAb,CAAkBH,WAAlB,EAA+BL,IAA/B,EAAqCS,IAArC,CAA2CC,QAAD,IAAc;AACtD,UAAIA,QAAJ,EAAc;AACZ,YAAIC,MAAM,GAAGD,QAAQ,CAACV,IAAT,CAAcY,EAA3B;AACA,YAAIC,aAAa,GAAG,EAApB;AACAA,QAAAA,aAAa,GAAGZ,SAAS,CAACa,GAAV,CAAeC,UAAD,IAAgB;AAC5C,iBAAO;AACLC,YAAAA,MAAM,EAAE,IADH;AAELC,YAAAA,UAAU,EAAEN,MAFP;AAGLO,YAAAA,sBAAsB,EAAEH;AAHnB,WAAP;AAKD,SANe,CAAhB;AAOA,YAAII,gBAAgB,GAAI,iCAAgCb,YAAY,CAACC,KAAM,EAA3E;AACAd,QAAAA,YAAY,CACTe,IADH,CACQW,gBADR,EAC0BN,aAD1B,EAEGJ,IAFH,CAESW,YAAD,IAAkB;AACtB,cAAIA,YAAJ,EAAkB;AAChB,gBAAIlB,KAAK,CAACmB,MAAN,GAAe,CAAnB,EAAsB;AACpB,kBAAIC,SAAS,GAAG,IAAIC,QAAJ,EAAhB;AACArB,cAAAA,KAAK,CAACY,GAAN,CAAU,CAACU,OAAD,EAAUC,KAAV,KAAoB;AAC5BC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBH,OAAtB;AACA,oBAAII,QAAQ,GAAGJ,OAAf;AACA,sBAAMK,aAAa,GAAGD,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,OAAtB,EAA+B,EAA/B,CAAtB;AACA,sBAAMC,QAAQ,GACZ,SAASrB,MAAT,GAAkB,GAAlB,GAAwBc,KAAxB,GAAgC,GAAhC,GAAsCI,aADxC;AAEA,oBAAII,MAAM,GAAG,EAAb;AACAA,gBAAAA,MAAM,CAACC,IAAP,GAAcN,QAAd;AACAK,gBAAAA,MAAM,CAACD,QAAP,GAAkBA,QAAlB;AACA,sBAAMG,SAAS,GAAG,IAAIC,IAAJ,CAAS,CAACH,MAAM,CAACC,IAAR,CAAT,EAAwBF,QAAxB,EAAkC;AAClDK,kBAAAA,IAAI,EAAEJ,MAAM,CAACC,IAAP,CAAYG;AADgC,iBAAlC,CAAlB;AAGAX,gBAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBM,MAArB;AACAX,gBAAAA,SAAS,CAACgB,MAAV,CAAiB,MAAjB,EAAyBH,SAAzB;AAED,eAfD;AAiBA,kBAAII,QAAQ,GAAG,EAAf;AACA,oBAAMC,iBAAiB,GAAI,GAAE7C,OAAO,CAACA,OAAQ,2DAA0DW,YAAY,CAACC,KAAM,EAA1H;AACAb,cAAAA,KAAK,CAAC;AACJ+C,gBAAAA,GAAG,EAAED,iBADD;AAEJE,gBAAAA,MAAM,EAAE,MAFJ;AAGJ1C,gBAAAA,IAAI,EAAEsB;AAHF,eAAD,CAAL,CAKGb,IALH,CAKSC,QAAD,IAAc;AAClB,oBAAIA,QAAJ,EAAc;AACZ6B,kBAAAA,QAAQ,GAAG7B,QAAQ,CAACV,IAAT,CAAc2C,MAAd,CAAqBzC,KAArB,CAA2BgC,IAA3B,CAAgCpB,GAAhC,CACT,CAAC8B,OAAD,EAAUnB,KAAV,KAAoB;AAClBC,oBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBiB,OAAvB;AACA,2BAAO;AACLC,sBAAAA,SAAS,EAAED,OAAO,CAACd,IADd;AAELgB,sBAAAA,QAAQ,EAAEF,OAAO,CAACG,gBAAR,CAAyBC,QAF9B;AAGLhC,sBAAAA,MAAM,EAAE,IAHH;AAILiC,sBAAAA,aAAa,EAAE,IAAIC,IAAJ,EAJV;AAKLjC,sBAAAA,UAAU,EAAEN;AALP,qBAAP;AAOD,mBAVQ,CAAX;AAYA,sBAAIQ,gBAAgB,GAAI,6BAA4Bb,YAAY,CAACC,KAAM,EAAvE;AACAd,kBAAAA,YAAY,CACTe,IADH,CACQW,gBADR,EAC0BoB,QAD1B,EAEG9B,IAFH,CAES0C,UAAD,IAAgB;AACpB,wBAAIA,UAAJ,EAAgB;AACd/C,sBAAAA,QAAQ,CAAC;AACPiC,wBAAAA,IAAI,EAAEzC,YADC;AAEPwD,wBAAAA,OAAO,EAAED,UAAU,CAACnD;AAFb,uBAAD,CAAR;AAIAqD,sBAAAA,UAAU,CAAC,MAAM;AACfjD,wBAAAA,QAAQ,CAAC;AAAEiC,0BAAAA,IAAI,EAAExC;AAAR,yBAAD,CAAR;AACD,uBAFS,EAEP,IAFO,CAAV;AAGD,qBARD,MAQO,CACN;AACF,mBAbH;AAcD;AACF,eAnCH,EAoCGyD,KApCH,CAoCUC,GAAD,IAAS,CAAE,CApCpB;AAqCD,aA1DD,MA0DO;AACL;AACAnD,cAAAA,QAAQ,CAAC;AAAEiC,gBAAAA,IAAI,EAAEzC,YAAR;AAAsBwD,gBAAAA,OAAO,EAAE1C,QAAQ,CAACV;AAAxC,eAAD,CAAR;AACAqD,cAAAA,UAAU,CAAC,MAAM;AACfjD,gBAAAA,QAAQ,CAAC;AAAEiC,kBAAAA,IAAI,EAAExC;AAAR,iBAAD,CAAR;AACD,eAFS,EAEP,IAFO,CAAV;AAGD;AACF,WAlED,MAkEO,CACN;AACF,SAvEH;AAwED,OAnFD,MAmFO;AACL;AACAO,QAAAA,QAAQ,CAAC;AAAEiC,UAAAA,IAAI,EAAEvC,mBAAR;AAA6BsD,UAAAA,OAAO,EAAE;AAAtC,SAAD,CAAR;AACAC,QAAAA,UAAU,CAAC,MAAM;AACfjD,UAAAA,QAAQ,CAAC;AAAEiC,YAAAA,IAAI,EAAExC;AAAR,WAAD,CAAR;AACD,SAFS,EAEP,IAFO,CAAV;AAGD;AACF,KA3FD;AA4FD,GA9FD;AA+FD,CAjGM","sourcesContent":["import { classService } from \"../_services/class.service\";\nimport axios from \"axios\";\nimport baseUrl from \"../config/config\";\nimport {\n  ON_MAIL_SEND,\n  HANDLE_REQUEST_CLOSE,\n  MAIL_NOT_SEND_ALERT,\n} from \"../constants/ActionTypes\";\nexport const sendMail = (data, receivers, files) => {\n  let mailItem = {};\n  return (dispatch) => {\n    let apiEndpoint = `/mails_v4?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then((response) => {\n      if (response) {\n        let mailId = response.data.id;\n        let receiversMail = [];\n        receiversMail = receivers.map((receiverId) => {\n          return {\n            status: true,\n            fk_id_mail: mailId,\n            fk_id_receiver_profile: receiverId,\n          };\n        });\n        let apiEndpointFiles = `/receivers_mails?access_token=${localStorage.token}`;\n        classService\n          .post(apiEndpointFiles, receiversMail)\n          .then((receivermail) => {\n            if (receivermail) {\n              if (files.length > 0) {\n                let formadata = new FormData();\n                files.map((element, index) => {\n                  console.log('element',element);\n                  let mailFile = element;\n                  const fileExtension = mailFile.name.replace(/^.*\\./, \"\");\n                  const fileName =\n                    \"mail\" + mailId + \"N\" + index + \".\" + fileExtension;\n                  var object = {};\n                  object.file = mailFile;\n                  object.fileName = fileName;\n                  const myNewFile = new File([object.file], fileName, {\n                    type: object.file.type,\n                  });\n                  console.log('object',object);\n                  formadata.append(\"file\", myNewFile);\n\n                });\n\n                let filesURL = [];\n                const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n                axios({\n                  url: URLMaterailCourse,\n                  method: \"POST\",\n                  data: formadata,\n                })\n                  .then((response) => {\n                    if (response) {\n                      filesURL = response.data.result.files.file.map(\n                        (urlFile, index) => {\n                          console.log('urlFile', urlFile);\n                          return {\n                            file_name: urlFile.name,\n                            url_file: urlFile.providerResponse.location,\n                            status: true,\n                            creation_date: new Date(),\n                            fk_id_mail: mailId,\n                          };\n                        }\n                      );\n                      let apiEndpointFiles = `/files_mails?access_token=${localStorage.token}`;\n                      classService\n                        .post(apiEndpointFiles, filesURL)\n                        .then((mailsFiles) => {\n                          if (mailsFiles) {\n                            dispatch({\n                              type: ON_MAIL_SEND,\n                              payload: mailsFiles.data,\n                            });\n                            setTimeout(() => {\n                              dispatch({ type: HANDLE_REQUEST_CLOSE });\n                            }, 4000);\n                          } else {\n                          }\n                        });\n                    }\n                  })\n                  .catch((err) => {});\n              } else {\n                //l email ne contient pas des files\n                dispatch({ type: ON_MAIL_SEND, payload: response.data });\n                setTimeout(() => {\n                  dispatch({ type: HANDLE_REQUEST_CLOSE });\n                }, 4000);\n              }\n            } else {\n            }\n          });\n      } else {\n        //erreur lors de l'ajout\n        dispatch({ type: MAIL_NOT_SEND_ALERT, payload: \"\" });\n        setTimeout(() => {\n          dispatch({ type: HANDLE_REQUEST_CLOSE });\n        }, 4000);\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}