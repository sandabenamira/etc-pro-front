{"ast":null,"code":"import { classService } from \"../_services/class.service\";\nimport { FETECHED_LEVEL_TESTS_BY_PROFILE, FETCH_TESTS_FOR_STUDENT, FETCH_TESTS_PASSED_FOR_STUDENT, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE, FETCH_TESTS_FOR_PARENT, DELETE_TEST, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE } from \"../constants/ActionTypes\";\nimport _ from \"lodash\";\nimport baseUrl from \"../config/config\";\nimport axios from \"axios\";\nimport { roleIdParent } from \"../config/config\";\nimport { roleIdStudent } from \"../config/config\";\nexport const addLevelTest = (test, questions, classes) => {\n  return dispatch => {\n    let apiEndpoint = `/tests?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, test).then(response => {\n      if (response) {\n        ////// add test_Question //////////\n        let testQuestion = questions.map(questionId => ({\n          status: true,\n          id_test_question: questionId,\n          id_test: response.data.id\n        }));\n        let apiEndpoint1 = `/test_questions?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint1, testQuestion).then(response => {\n          if (response) {\n            console.log(\"okkk choices\", response.data);\n          } else {\n            dispatch({\n              type: SHOW_ERROR_MESSAGE,\n              payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n            });\n            setTimeout(() => {\n              dispatch({\n                type: HIDE_ERROR_MESSAGE\n              });\n            }, 4000);\n          }\n        }); ////// add test_Class //////////\n\n        let testClass = classes.map(classId => ({\n          status: true,\n          id_class: classId,\n          id_test: response.data.id\n        }));\n        let apiEndpoint2 = `/test_classes?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint2, testClass).then(response => {\n          if (response) {\n            console.log(\"okkk choices\", response.data);\n            dispatch(getProfLevelTests(test.id_profile_creator));\n            dispatch({\n              type: SHOW_SUCCESS_MESSAGE,\n              payload: \"Test de Niveau est crée avec succés\"\n            });\n            setTimeout(() => {\n              dispatch({\n                type: HIDE_SUCCESS_MESSAGE\n              });\n            }, 8000);\n          } else {\n            dispatch({\n              type: SHOW_ERROR_MESSAGE,\n              payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n            });\n            setTimeout(() => {\n              dispatch({\n                type: HIDE_ERROR_MESSAGE\n              });\n            }, 4000);\n          }\n        });\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const getProfLevelTests = profileId => {\n  return dispatch => {\n    let apiEndpoint = `/tests?access_token=${localStorage.token}&filter[where][id_profile_creator]=` + profileId + `&filter[include]=subjects&filter[include]=levels`;\n    classService.get(apiEndpoint).then(response => {\n      const listLevelTest = response.data.filter(element => element.status);\n      console.log(\"okkk choices\", response.data);\n      dispatch({\n        type: FETECHED_LEVEL_TESTS_BY_PROFILE,\n        payload: listLevelTest\n      });\n    }).catch(err => {});\n  };\n};\nexport const getStudentLevelTests = (profile, roleId) => {\n  return dispatch => {\n    let listTestsFiltred;\n    let listTestsPassed;\n    let finalTestStudent;\n    let profileId = profile.id;\n    let apiEndpoint = `/profiles?access_token=${localStorage.token}&filter[where][id]=` + profileId + `&filter[include][students][class][test_class][tests]=subjects`;\n    classService.get(apiEndpoint).then(response => {\n      const listTests = response.data;\n      listTestsFiltred = listTests[0].students[0].class.test_class.filter(element => element.tests.status);\n      let apiEndpoint1 = `/student_tests?access_token=${localStorage.token}&filter[where][id_profile_student]=` + profileId + `&filter[include][tests]=subjects`;\n      classService.get(apiEndpoint1).then(response => {\n        if (response) {\n          listTestsPassed = response.data;\n          finalTestStudent = _.map(listTestsFiltred, function (el) {\n            let exist = listTestsPassed.find(element => element.id_test == el.id_test);\n\n            if (exist == undefined) {\n              return { ...el,\n                studentData: profile\n              };\n            } else {\n              return { ...exist,\n                studentData: profile\n              };\n            }\n          });\n\n          if (roleId == roleIdStudent) {\n            dispatch({\n              type: FETCH_TESTS_FOR_STUDENT,\n              payload: finalTestStudent\n            });\n          } else if (roleId == roleIdParent) {\n            dispatch({\n              type: FETCH_TESTS_FOR_PARENT,\n              payload: finalTestStudent\n            });\n          }\n        } else {}\n      }).catch(err => {});\n    }).catch(err => {});\n  };\n};\nexport const getLevelTestsPassed = profileId => {\n  return dispatch => {\n    let apiEndpoint = `/student_tests?access_token=${localStorage.token}&filter[where][id_profile_student]=` + profileId + `&filter[include][tests]=subjects`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        dispatch({\n          type: FETCH_TESTS_PASSED_FOR_STUDENT,\n          payload: response.data\n        });\n      } else {\n        console.log(\"nooo getLevelTestsPassed\", response.data);\n      }\n    }).catch(err => {});\n  };\n};\nexport const addTestStudent = (testStudent, totalCorrectAnswer, totalQuestion) => {\n  return dispatch => {\n    let apiEndpoint = `/student_tests?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, testStudent).then(response => {\n      if (response) {\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"Test passé avec succés ,                   votre score est  \" + response.data.score + \" %  ,                          vous avez \" + totalCorrectAnswer + \" réponses correctes sur \" + totalQuestion + \" ,                      vous trouvez dans la méme carte de test des exercices pour améliorer votre niveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 15000);\n        console.log(\"okkk choices\", response.data);\n        dispatch(getLevelTestsPassed(testStudent.id_profile_student));\n      } else {\n        console.log(\"nooo choices\", response.data);\n      }\n    }).catch(err => {});\n  };\n};\nexport const deleteTest = testId => {\n  return dispatch => {\n    axios.patch(`${baseUrl.baseUrl}/tests/` + testId + `?access_token=${localStorage.token}`, {\n      status: false\n    }).then(response => {\n      dispatch({\n        type: DELETE_TEST,\n        payload: response.data\n      });\n      dispatch({\n        type: SHOW_SUCCESS_MESSAGE,\n        payload: \"Test de niveau est supprimé avec succés\"\n      });\n      setTimeout(() => {\n        dispatch({\n          type: HIDE_SUCCESS_MESSAGE\n        });\n      }, 8000);\n    }).catch(function (error) {\n      console.log(\"error\", error);\n      dispatch({\n        type: SHOW_ERROR_MESSAGE,\n        payload: \"Une erreur est survenue lors de la suppression merci d'essayer à nouveau\"\n      });\n      setTimeout(() => {\n        dispatch({\n          type: HIDE_ERROR_MESSAGE\n        });\n      }, 4000);\n    });\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/levelTestAction.js"],"names":["classService","FETECHED_LEVEL_TESTS_BY_PROFILE","FETCH_TESTS_FOR_STUDENT","FETCH_TESTS_PASSED_FOR_STUDENT","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","FETCH_TESTS_FOR_PARENT","DELETE_TEST","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","_","baseUrl","axios","roleIdParent","roleIdStudent","addLevelTest","test","questions","classes","dispatch","apiEndpoint","localStorage","token","post","then","response","testQuestion","map","questionId","status","id_test_question","id_test","data","id","apiEndpoint1","console","log","type","payload","setTimeout","testClass","classId","id_class","apiEndpoint2","getProfLevelTests","id_profile_creator","profileId","get","listLevelTest","filter","element","catch","err","getStudentLevelTests","profile","roleId","listTestsFiltred","listTestsPassed","finalTestStudent","listTests","students","class","test_class","tests","el","exist","find","undefined","studentData","getLevelTestsPassed","addTestStudent","testStudent","totalCorrectAnswer","totalQuestion","score","id_profile_student","deleteTest","testId","patch","error"],"mappings":"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","sourcesContent":["import { classService } from \"../_services/class.service\";\nimport {\n  FETECHED_LEVEL_TESTS_BY_PROFILE,\n  FETCH_TESTS_FOR_STUDENT,\n  FETCH_TESTS_PASSED_FOR_STUDENT,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n  FETCH_TESTS_FOR_PARENT,\n  DELETE_TEST,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n} from \"../constants/ActionTypes\";\nimport _ from \"lodash\";\nimport baseUrl from \"../config/config\";\nimport axios from \"axios\";\nimport { roleIdParent } from \"../config/config\";\nimport { roleIdStudent } from \"../config/config\";\nexport const addLevelTest = (test, questions, classes) => {\n  return (dispatch) => {\n    let apiEndpoint = `/tests?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, test).then((response) => {\n      if (response) {\n        ////// add test_Question //////////\n        let testQuestion = questions.map((questionId) => ({\n          status: true,\n          id_test_question: questionId,\n          id_test: response.data.id,\n        }));\n        let apiEndpoint1 = `/test_questions?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint1, testQuestion).then((response) => {\n          if (response) {\n            console.log(\"okkk choices\", response.data);\n          } else {\n            dispatch({\n              type: SHOW_ERROR_MESSAGE,\n              payload:\n                \"Une erreur est survenue lors de la création merci d'essayer à nouveau\",\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_ERROR_MESSAGE });\n            }, 4000);\n          }\n        });\n        ////// add test_Class //////////\n        let testClass = classes.map((classId) => ({\n          status: true,\n          id_class: classId,\n          id_test: response.data.id,\n        }));\n        let apiEndpoint2 = `/test_classes?access_token=${localStorage.token}`;\n        classService.post(apiEndpoint2, testClass).then((response) => {\n          if (response) {\n            console.log(\"okkk choices\", response.data);\n            dispatch(getProfLevelTests(test.id_profile_creator));\n            dispatch({\n              type: SHOW_SUCCESS_MESSAGE,\n              payload: \"Test de Niveau est crée avec succés\",\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_SUCCESS_MESSAGE });\n            }, 8000);\n          } else {\n            dispatch({\n              type: SHOW_ERROR_MESSAGE,\n              payload:\n                \"Une erreur est survenue lors de la création merci d'essayer à nouveau\",\n            });\n            setTimeout(() => {\n              dispatch({ type: HIDE_ERROR_MESSAGE });\n            }, 4000);\n          }\n        });\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de la création merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const getProfLevelTests = (profileId) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/tests?access_token=${localStorage.token}&filter[where][id_profile_creator]=` +\n      profileId +\n      `&filter[include]=subjects&filter[include]=levels`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const listLevelTest = response.data.filter((element) => element.status);\n        console.log(\"okkk choices\", response.data);\n\n        dispatch({\n          type: FETECHED_LEVEL_TESTS_BY_PROFILE,\n          payload: listLevelTest,\n        });\n      })\n      .catch((err) => {});\n  };\n};\n\nexport const getStudentLevelTests = (profile, roleId) => {\n  return (dispatch) => {\n    let listTestsFiltred;\n    let listTestsPassed;\n    let finalTestStudent;\n    let profileId = profile.id;\n    let apiEndpoint =\n      `/profiles?access_token=${localStorage.token}&filter[where][id]=` +\n      profileId +\n      `&filter[include][students][class][test_class][tests]=subjects`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const listTests = response.data;\n        listTestsFiltred = listTests[0].students[0].class.test_class.filter(\n          (element) => element.tests.status\n        );\n        let apiEndpoint1 =\n          `/student_tests?access_token=${localStorage.token}&filter[where][id_profile_student]=` +\n          profileId +\n          `&filter[include][tests]=subjects`;\n        classService\n          .get(apiEndpoint1)\n          .then((response) => {\n            if (response) {\n              listTestsPassed = response.data;\n\n              finalTestStudent = _.map(listTestsFiltred, function(el) {\n                let exist = listTestsPassed.find(\n                  (element) => element.id_test == el.id_test\n                );\n                if (exist == undefined) {\n                  return { ...el, studentData: profile };\n                } else {\n                  return { ...exist, studentData: profile };\n                }\n              });\n              if (roleId == roleIdStudent) {\n                dispatch({\n                  type: FETCH_TESTS_FOR_STUDENT,\n                  payload: finalTestStudent,\n                });\n              } else if (roleId == roleIdParent) {\n                dispatch({\n                  type: FETCH_TESTS_FOR_PARENT,\n                  payload: finalTestStudent,\n                });\n              }\n            } else {\n            }\n          })\n          .catch((err) => {});\n      })\n      .catch((err) => {});\n  };\n};\nexport const getLevelTestsPassed = (profileId) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/student_tests?access_token=${localStorage.token}&filter[where][id_profile_student]=` +\n      profileId +\n      `&filter[include][tests]=subjects`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        if (response) {\n          dispatch({\n            type: FETCH_TESTS_PASSED_FOR_STUDENT,\n            payload: response.data,\n          });\n        } else {\n          console.log(\"nooo getLevelTestsPassed\", response.data);\n        }\n      })\n      .catch((err) => {});\n  };\n};\nexport const addTestStudent = (\n  testStudent,\n  totalCorrectAnswer,\n  totalQuestion\n) => {\n  return (dispatch) => {\n    let apiEndpoint = `/student_tests?access_token=${localStorage.token}`;\n\n    classService\n      .post(apiEndpoint, testStudent)\n      .then((response) => {\n        if (response) {\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload:\n              \"Test passé avec succés ,                   votre score est  \" +\n              response.data.score +\n              \" %  ,                          vous avez \" +\n              totalCorrectAnswer +\n              \" réponses correctes sur \" +\n              totalQuestion +\n              \" ,                      vous trouvez dans la méme carte de test des exercices pour améliorer votre niveau\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 15000);\n          console.log(\"okkk choices\", response.data);\n          dispatch(getLevelTestsPassed(testStudent.id_profile_student));\n        } else {\n          console.log(\"nooo choices\", response.data);\n        }\n      })\n      .catch((err) => {});\n  };\n};\nexport const deleteTest = (testId) => {\n  return (dispatch) => {\n    axios\n      .patch(\n        `${baseUrl.baseUrl}/tests/` +\n          testId +\n          `?access_token=${localStorage.token}`,\n        {\n          status: false,\n        }\n      )\n      .then((response) => {\n        dispatch({ type: DELETE_TEST, payload: response.data });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"Test de niveau est supprimé avec succés\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 8000);\n      })\n      .catch(function(error) {\n        console.log(\"error\", error);\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de la suppression merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}