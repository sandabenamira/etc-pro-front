{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/RegistreAppel/CallRegister.js\";\nimport React from 'react';\nimport Entete from './Entete';\nimport StudentList from './StudentList/StudentList';\nimport ConfirmAppel from './ConfirmAppel';\nimport InitAppelDialog from './InitAppelDialog';\nimport IntlMessages from '../../../util/IntlMessages';\nimport { UncontrolledAlert, Alert } from 'reactstrap';\nimport axios from 'axios';\nimport baseUrl from '../../../config/config';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { getStudentClass } from \"../../../actions/RegistreAction\";\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CardBox from '../../../components/CardBox/index';\nimport moment from 'moment';\nimport { getClassesByEstablishmentId } from '../../../actions/classeAction';\nimport { getSubjectName, getSubject } from '../../../actions/subjectAction';\nimport DateFnsUtils from '@date-io/moment';\nimport { withStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport AssignmentInd from '@material-ui/icons/AssignmentIndOutlined';\nimport AssignmentReturn from '@material-ui/icons/AssignmentReturnOutlined';\nimport AssignmentLate from '@material-ui/icons/AssignmentLateOutlined';\nlet timeout; //TODO controller l'affichage de temps selon la langue ?\n\nfunction notEmpty(value) {\n  return !_.isEmpty(value);\n}\n\nconst styles = {\n  selected: {\n    /* Increase the specificity */\n    color: \"blue\"\n  },\n  button: {\n    backgroundColor: \"#00b894\"\n  }\n};\n\nclass CallRegister extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeClasse = name => event => {\n      this.setState({\n        [name]: event.target.value,\n        list_gEvent: [],\n        result: [],\n        prevStudentStatus: [],\n        contextEvent: '',\n        gEvent: '',\n        seance: '',\n        readyRender: false,\n        last_version: {},\n        callRegister: {},\n        lastVerStudentStats: []\n      });\n      this.props.dispatch(getStudentClass(event.target.value)); //Création de l'input data pour la remothe methode getListSeances\n\n      let data = {\n        class_id: event.target.value,\n        choixDate: moment(this.state.date_gEvent).format()\n      };\n      axios.get(`${baseUrl.baseUrl}/classes/getListSeances/${JSON.stringify(data)}?access_token=${localStorage.token}`).then(res => {\n        this.setState({\n          list_gEvent: [...res.data.contextualEvent]\n        });\n      });\n      axios.get(`${baseUrl.baseUrl}/call_registers/getLastV_Calls?class_id=${event.target.value}&access_token=${localStorage.token}`).then(res => {\n        let data = {\n          callRegister: {\n            class_id: 3,\n            last_version: 1,\n            year: 2020,\n            id: 8\n          },\n          last_version: {\n            time_stamp: \"2020-01-07T14:56:45.000Z\",\n            id: 1,\n            context_event_id: 1,\n            context_event: {\n              \"data\": '...'\n            }\n          },\n          student_calls: []\n        };\n\n        if (_.isEmpty(res.data.last_version)) {\n          this.setState({\n            callRegister: res.data.callRegister,\n            last_version: {},\n            lastVerStudentStats: [],\n            prevStudentStatus: []\n          });\n        } else {\n          this.setState({\n            callRegister: res.data.callRegister,\n            last_version: res.data.last_version,\n            lastVerStudentStats: res.data.student_calls,\n            prevStudentStatus: res.data.student_calls\n          });\n        }\n      });\n    };\n\n    this.handleDateChange = date => {\n      /** date change => new getListSeances\n       * => save : list_gEvents & date_gEvent\n       * if last_version exist & last_version_context_start_date is before date \n       * => await : render & seance change \n       * => save : reset prevStudentStats & contextEvent & result & readyRender\n       */\n      let data = {\n        class_id: this.state.classe,\n        choixDate: moment(date).format()\n      };\n      axios.get(`${baseUrl.baseUrl}/classes/getListSeances/${JSON.stringify(data)}?access_token=${localStorage.token}`).then(res => {\n        this.setState({\n          date_gEvent: date,\n          list_gEvent: [...res.data.contextualEvent]\n        });\n      });\n      let lastV_contextE = notEmpty(this.state.last_version) ? this.state.last_version.context_event : {};\n\n      if (notEmpty(lastV_contextE) && moment(date).isSameOrAfter(lastV_contextE.start_lesson, \"day\")) {\n        this.setState({\n          date_gEvent: date,\n          result: [],\n          prevStudentStatus: [],\n          contextEvent: '',\n          gEvent: '',\n          seance: '',\n          readyRender: false,\n          alertOldCall: false\n        });\n      } else if (notEmpty(lastV_contextE) && moment(date).isBefore(lastV_contextE.start_lesson, \"day\")) {\n        this.setState({\n          date_gEvent: date,\n          result: [],\n          prevStudentStatus: [],\n          contextEvent: '',\n          gEvent: '',\n          seance: '',\n          readyRender: false,\n          alertOldCall: true\n        });\n      } else {\n        // Dans le cas ou on fais l'appel dans le registre pour la premiére fois === on n'a pas de last_version d'appel\n        this.setState({\n          date_gEvent: date,\n          result: [],\n          prevStudentStatus: [],\n          contextEvent: '',\n          gEvent: '',\n          seance: '',\n          readyRender: false,\n          alertOldCall: false\n        });\n      }\n    };\n\n    this.handleChangeSeance = event => {\n      let dataJson = JSON.parse(event.target.value);\n\n      let contextEvent = _.first(dataJson.sameDayContextE);\n\n      this.setState({\n        seance: event.target.value,\n        contextEvent: contextEvent,\n        gEvent: dataJson,\n        result: []\n      });\n      let lastV_contextE = notEmpty(this.state.last_version) ? this.state.last_version.context_event : {};\n      let contextE_isSameOrAfter_lastV_contextE = notEmpty(lastV_contextE) && moment(contextEvent.start_lesson).isSameOrAfter(this.state.last_version.context_event.start_lesson, \"hour\");\n      axios.get(`${baseUrl.baseUrl}/generic_events/beforeNewCall?cEventChosen=${JSON.stringify(contextEvent)}&lastV_contextE=${JSON.stringify(lastV_contextE)}&access_token=${localStorage.token}`).then(res => {\n        let data = {\n          pastLessons: [],\n          pastCallsAllDone: true,\n          studentPrevStatus: 5\n        };\n\n        if (_.isEmpty(this.state.last_version)) {\n          this.setState({\n            prevStudentStatus: [],\n            firstTry: true,\n            readyRender: true\n          });\n        } else if (notEmpty(this.state.lastVerStudentStats) && notEmpty(lastV_contextE) && res.data.pastCallsAllDone && contextE_isSameOrAfter_lastV_contextE) {\n          this.setState({\n            prevStudentStatus: this.state.lastVerStudentStats,\n            firstTry: false,\n            readyRender: true,\n            alertOldCall: false,\n            modifAppel: false\n          });\n        } else if (res.data.pastCallsAllDone === false && contextE_isSameOrAfter_lastV_contextE) {\n          this.setState({\n            result: [],\n            readyRender: true,\n            alertReset_allStu: true,\n            alertOldCall: false,\n            modifAppel: false\n          });\n        } else if (contextE_isSameOrAfter_lastV_contextE === false && notEmpty(res.data.studentPrevStatus)) {\n          this.setState({\n            prevStudentStatus: res.data.studentPrevStatus,\n            result: [],\n            firstTry: false,\n            readyRender: true,\n            alertOldCall: true,\n            modifAppel: true\n          });\n        } else {\n          this.setState({\n            prevStudentStatus: [],\n            result: [],\n            firstTry: true,\n            readyRender: true,\n            alertOldCall: true\n          });\n        }\n      }); //Requete dans le but d'extraire la derniére version pour la séance choisie && if seance is in the past then it shouldn't affect the callR_last_version patch\n    };\n\n    this.state = {\n      alert_success: false,\n      modal_save: false,\n      nbre_Absent: 0,\n      nbre_Present: 0,\n      result: [],\n      firstTry: true,\n      prevStudentStatus: [],\n      date_gEvent: moment(),\n      classe: '',\n      list_gEvent: [],\n      gEvent: '',\n      contextEvent: '',\n      readyRender: false,\n      seance: '',\n      callRegister: {},\n      last_version: {},\n      lastVerStudentStats: [],\n      alertOldCall: false,\n      alertReset_allStu: false,\n      modifAppel: false\n    };\n    this.SetAllAbsent = this.SetAllAbsent.bind(this);\n    this.SetPrevStudentVersion = this.SetPrevStudentVersion.bind(this);\n    this.RequestSaveRegister = this.RequestSaveRegister.bind(this);\n    this.NumberAbsentPresent = this.NumberAbsentPresent.bind(this);\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.handleChangeClasse = this.handleChangeClasse.bind(this);\n    this.handleChangeSeance = this.handleChangeSeance.bind(this);\n    this.ModalConfirmSave = this.ModalConfirmSave.bind(this);\n    this.CancelModalConfirm = this.CancelModalConfirm.bind(this);\n    this.ResetStuListPresent = this.ResetStuListPresent.bind(this);\n    this.CancelDialogReset = this.CancelDialogReset.bind(this);\n  }\n\n  componentDidMount() {\n    if (!_.isEmpty(this.props.userProfile)) {\n      this.props.dispatch(getClassesByEstablishmentId(this.props.userProfile.establishment_id));\n    }\n\n    this.props.dispatch(getSubject());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userProfile !== this.props.userProfile && _.isEmpty(this.props.classesList.classes)) {\n      this.props.dispatch(getClassesByEstablishmentId(this.props.userProfile.establishment_id));\n    }\n  }\n\n  NumberAbsentPresent(nbre_Present, nbre_Absent) {\n    this.setState({\n      nbre_Present,\n      nbre_Absent\n    });\n  }\n\n  RequestSaveRegister(list) {\n    this.setState({\n      result: list,\n      modal_save: true\n    });\n  }\n\n  ModalConfirmSave() {\n    let objCallR = this.state.callRegister;\n    let contextEvent = this.state.contextEvent;\n    let student_calls = this.state.result; // let updateOrNo = _.isEmpty(this.state.last_version) ? true : (notEmpty(this.state.last_version.context_event) && notEmpty(this.state.context_event) &&\n    //     moment(this.state.last_version.context_event.start_lesson).isSameOrAfter(this.state.contextEvent.start_lesson)) ? true : false;\n    // console.log(updateOrNo);\n\n    axios.post(`${baseUrl.baseUrl}/register_versions/createCallsAndUpdate?student_calls=${JSON.stringify(student_calls)}&callRegister=${JSON.stringify(objCallR)}&contextEvent=${JSON.stringify(contextEvent)}&access_token=${localStorage.token}`).then(res => {\n      let data = {\n        resCEvent: {\n          start_lesson: \"2020-01-07T12:30:00.000Z\",\n          end_lesson: \"2020-01-07T13:00:00.000Z\",\n          id_generic_event: 5,\n          tag_call: true,\n          id: 5\n        },\n        resCallReg: {\n          class_id: 3,\n          last_version: 6,\n          year: 2020,\n          id: 8\n        },\n        resVersion: {\n          time_stamp: \"2020-01-08T11:52:20.000Z\",\n          id: 11,\n          context_event_id: 7\n        },\n        resCalls: 5\n      };\n      let updateContextEvent = Object.assign({}, res.data.resCEvent, {\n        generic_events: this.state.gEvent\n      });\n      let updatedVersion = Object.assign({}, res.data.resVersion, {\n        context_event: updateContextEvent\n      }); // let updateCallR = updateOrNo ? Object.assign({}, res.data.resCallReg) : this.state.callRegister;\n\n      this.setState({\n        readyRender: false,\n        // callRegister: updateCallR,\n        last_version: updatedVersion,\n        lastVerStudentStats: res.data.resCalls,\n        result: [],\n        firstTry: true,\n        prevStudentStatus: [],\n        alertOldCall: false,\n        alertReset_allStu: false,\n        modal_save: false,\n        alert_success: true\n      });\n    });\n    timeout = setTimeout(() => this.setState({\n      alert_success: false\n    }), 3000);\n  }\n\n  ResetStuListPresent() {\n    this.setState({\n      prevStudentStatus: [],\n      firstTry: true,\n      result: [],\n      alertReset_allStu: false\n    });\n  }\n\n  SetAllAbsent() {\n    let setStudentList = [];\n\n    if (this.state.prevStudentStatus) {\n      console.log(\"case first\");\n      setStudentList = this.state.prevStudentStatus.map((data, index) => ({ ...data,\n        \"action\": \"Absent\"\n      }));\n      this.setState({\n        prevStudentStatus: setStudentList,\n        firstTry: false,\n        result: [],\n        alertReset_allStu: false\n      });\n    } else {\n      console.log(\"case second\");\n      console.log(this.state.prevStudentStatus); // setStudentList = ar\n\n      this.setState({\n        prevStudentStatus: [],\n        firstTry: true,\n        result: [],\n        alertReset_allStu: false\n      });\n    }\n  }\n\n  SetPrevStudentVersion() {\n    if (true) {\n      this.setState({\n        prevStudentStatus: this.state.lastVerStudentStats,\n        firstTry: false,\n        alertReset_allStu: false\n      });\n    }\n  }\n\n  CancelModalConfirm() {\n    this.setState({\n      modal_save: false\n    });\n  }\n\n  CancelDialogReset() {\n    this.setState({\n      prevStudentStatus: this.state.lastVerStudentStats,\n      firstTry: false,\n      alertReset_allStu: false\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(timeout);\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    }, (() => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 25\n        }\n      }, this.state.alert_success ? /*#__PURE__*/React.createElement(UncontrolledAlert, {\n        className: \"alert-addon-card bg-success bg-success text-white shadow-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"icon-addon alert-addon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"zmdi zmdi-cloud-done zmdi-hc-fw zmdi-hc-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 37\n        }\n      })), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"d-inline-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 33\n        }\n      }, \" \", /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"message.success.call\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 68\n        }\n      }))) : '', /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-lg-3 col-sm-6 col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100 mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"age-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.note.class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 79\n        }\n      })), /*#__PURE__*/React.createElement(Select, {\n        value: this.state.classe,\n        onChange: this.handleChangeClasse('classe'),\n        input: /*#__PURE__*/React.createElement(Input, {\n          id: \"classe\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 56\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 45\n        }\n      }, Array.from(this.props.classesList).filter(classe => classe.status).map(classe => /*#__PURE__*/React.createElement(MenuItem, {\n        key: classe.id,\n        value: classe.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 53\n        }\n      }, classe.name))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-lg-4 col-sm-6 col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n        utils: DateFnsUtils,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(DatePicker, {\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"components.call.register.jour\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 56\n          }\n        }),\n        fullWidth: true,\n        value: this.state.date_gEvent,\n        onChange: this.handleDateChange,\n        format: \"dddd DD MMMM Y\",\n        maxDate: moment(),\n        autoOk: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 45\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-lg-5 col-sm-6 col-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormControl, {\n        className: \"w-100 mb-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"age-simple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.call.register.sceances\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 79\n        }\n      })), /*#__PURE__*/React.createElement(Select, {\n        value: this.state.seance,\n        onChange: this.handleChangeSeance,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 45\n        }\n      }, Array.from(this.state.list_gEvent).map((gEvent, index) => {\n        let contextEvent = _.first(gEvent.sameDayContextE);\n\n        let dynamicBtnClass = !_.isEmpty(contextEvent) && contextEvent.tag_call ? classes.button : \"\";\n        return /*#__PURE__*/React.createElement(MenuItem, {\n          className: dynamicBtnClass,\n          key: index,\n          value: JSON.stringify(gEvent),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 57\n          }\n        }, getSubjectName(Array.from(this.props.subjects), gEvent.subject_id) + \" \" + moment(gEvent.start_date_generic_event).format(\"HH[h]mm\") + \"-\" + moment(gEvent.end_date_generic_event).format(\"HH[h]mm\"));\n      })))), this.state.last_version.context_event && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-lg-12 col-12 mt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 79\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"MuiInputBase-root\",\n        style: {\n          margin: \"auto\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"callRegister.last.lesson\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 46\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 45\n        }\n      }, \": \" + moment(this.state.last_version.context_event.generic_events.start_date_generic_event).format(\"dddd D MMM\") + \" \" + getSubjectName(Array.from(this.props.subjects), this.state.last_version.context_event.generic_events.subject_id) + \" \" + moment(this.state.last_version.context_event.generic_events.start_date_generic_event).format(\"HH[h]mm\") + \"-\" + moment(this.state.last_version.context_event.generic_events.end_date_generic_event).format(\"HH[h]mm\")))))), this.state.classe && this.state.gEvent && this.state.readyRender ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"jr-btn-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.SetPrevStudentVersion,\n        className: \"jr-btn\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(AssignmentReturn, {\n        className: \"zmdi zmdi-github zmdi-hc-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 45\n        }\n      }, \"Mettre la derniére version du registre\")), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.ResetStuListPresent,\n        className: \"jr-btn\",\n        variant: \"outlined\",\n        color: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(AssignmentInd, {\n        className: \"zmdi zmdi-github zmdi-hc-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 45\n        }\n      }, \"Mettre tous à Présent\")), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.SetAllAbsent,\n        className: \"jr-btn\",\n        variant: \"outlined\",\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(AssignmentLate, {\n        className: \"zmdi zmdi-github zmdi-hc-lg\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 45\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 45\n        }\n      }, \"Mettre tous à Absent\"))), /*#__PURE__*/React.createElement(StudentList // callRegister={this.state.callRegister}\n      , {\n        prevStudentStatus: this.state.prevStudentStatus,\n        contextEvent: this.state.contextEvent,\n        presences: this.props.presences,\n        users: this.props.studentsClass.classData,\n        RequestSaveRegister: this.RequestSaveRegister,\n        NumberAbsentPresent: this.NumberAbsentPresent,\n        firstTry: this.state.firstTry,\n        establishment_id: this.props.userProfile.establishment_id,\n        gEvent: this.state.gEvent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 37\n        }\n      })) : \"\", this.state.modal_save ? /*#__PURE__*/React.createElement(ConfirmAppel, {\n        contextEvent: this.state.contextEvent,\n        ModalConfirmSave: this.ModalConfirmSave,\n        CancelModalConfirm: this.CancelModalConfirm,\n        NumberAbsent: this.state.nbre_Absent,\n        NumberPresent: this.state.nbre_Present,\n        presences: this.props.presences,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 33\n        }\n      }) : '');\n    })());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    classesList: state.classes,\n    studentsClass: state.callRegister.studentsClass,\n    subjects: state.subject.remoteSubjects\n  };\n};\n\nexport default withStyles(styles)(connect(mapStateToProps)(CallRegister));","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/RegistreAppel/CallRegister.js"],"names":["React","Entete","StudentList","ConfirmAppel","InitAppelDialog","IntlMessages","UncontrolledAlert","Alert","axios","baseUrl","_","connect","getStudentClass","DatePicker","MuiPickersUtilsProvider","Input","InputLabel","MenuItem","FormControl","Select","CardBox","moment","getClassesByEstablishmentId","getSubjectName","getSubject","DateFnsUtils","withStyles","Button","AssignmentInd","AssignmentReturn","AssignmentLate","timeout","notEmpty","value","isEmpty","styles","selected","color","button","backgroundColor","CallRegister","Component","constructor","props","handleChangeClasse","name","event","setState","target","list_gEvent","result","prevStudentStatus","contextEvent","gEvent","seance","readyRender","last_version","callRegister","lastVerStudentStats","dispatch","data","class_id","choixDate","state","date_gEvent","format","get","JSON","stringify","localStorage","token","then","res","contextualEvent","year","id","time_stamp","context_event_id","context_event","student_calls","handleDateChange","date","classe","lastV_contextE","isSameOrAfter","start_lesson","alertOldCall","isBefore","handleChangeSeance","dataJson","parse","first","sameDayContextE","contextE_isSameOrAfter_lastV_contextE","pastLessons","pastCallsAllDone","studentPrevStatus","firstTry","modifAppel","alertReset_allStu","alert_success","modal_save","nbre_Absent","nbre_Present","SetAllAbsent","bind","SetPrevStudentVersion","RequestSaveRegister","NumberAbsentPresent","ModalConfirmSave","CancelModalConfirm","ResetStuListPresent","CancelDialogReset","componentDidMount","userProfile","establishment_id","componentDidUpdate","prevProps","classesList","classes","list","objCallR","post","resCEvent","end_lesson","id_generic_event","tag_call","resCallReg","resVersion","resCalls","updateContextEvent","Object","assign","generic_events","updatedVersion","setTimeout","setStudentList","console","log","map","index","componentWillUnmount","clearTimeout","render","Array","from","filter","status","dynamicBtnClass","subjects","subject_id","start_date_generic_event","end_date_generic_event","margin","presences","studentsClass","classData","mapStateToProps","subject","remoteSubjects"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Entete from './Entete';\nimport StudentList from './StudentList/StudentList';\nimport ConfirmAppel from './ConfirmAppel';\nimport InitAppelDialog from './InitAppelDialog';\nimport IntlMessages from '../../../util/IntlMessages';\nimport { UncontrolledAlert, Alert } from 'reactstrap';\nimport axios from 'axios';\nimport baseUrl from '../../../config/config';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { getStudentClass } from \"../../../actions/RegistreAction\";\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport CardBox from '../../../components/CardBox/index';\nimport moment from 'moment';\nimport { getClassesByEstablishmentId } from '../../../actions/classeAction';\nimport { getSubjectName, getSubject } from '../../../actions/subjectAction';\nimport DateFnsUtils from '@date-io/moment';\nimport { withStyles } from '@material-ui/styles';\nimport Button from '@material-ui/core/Button';\nimport AssignmentInd from '@material-ui/icons/AssignmentIndOutlined';\nimport AssignmentReturn from '@material-ui/icons/AssignmentReturnOutlined';\nimport AssignmentLate from '@material-ui/icons/AssignmentLateOutlined';\nlet timeout;\n//TODO controller l'affichage de temps selon la langue ?\n\nfunction notEmpty(value) {\n    return (!_.isEmpty(value))\n}\n\nconst styles = {\n    selected: { /* Increase the specificity */\n        color: \"blue\",\n    },\n\n    button: {\n        backgroundColor: \"#00b894\"\n    }\n};\n\nclass CallRegister extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            alert_success: false,\n            modal_save: false,\n            nbre_Absent: 0,\n            nbre_Present: 0,\n            result: [],\n            firstTry: true,\n            prevStudentStatus: [],\n            date_gEvent: moment(),\n            classe: '',\n            list_gEvent: [],\n            gEvent: '',\n            contextEvent: '',\n            readyRender: false,\n            seance: '',\n            callRegister: {},\n            last_version: {},\n            lastVerStudentStats: [],\n            alertOldCall: false,\n            alertReset_allStu: false,\n            modifAppel: false\n        };\n        this.SetAllAbsent = this.SetAllAbsent.bind(this)\n        this.SetPrevStudentVersion = this.SetPrevStudentVersion.bind(this)\n        this.RequestSaveRegister = this.RequestSaveRegister.bind(this);\n        this.NumberAbsentPresent = this.NumberAbsentPresent.bind(this);\n        this.handleDateChange = this.handleDateChange.bind(this);\n        this.handleChangeClasse = this.handleChangeClasse.bind(this);\n        this.handleChangeSeance = this.handleChangeSeance.bind(this);\n        this.ModalConfirmSave = this.ModalConfirmSave.bind(this);\n        this.CancelModalConfirm = this.CancelModalConfirm.bind(this);\n        this.ResetStuListPresent = this.ResetStuListPresent.bind(this);\n        this.CancelDialogReset = this.CancelDialogReset.bind(this);\n    }\n\n    componentDidMount() {\n        if (!(_.isEmpty(this.props.userProfile))) {\n            this.props.dispatch(getClassesByEstablishmentId(this.props.userProfile.establishment_id))\n        }\n        this.props.dispatch(getSubject())\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.userProfile !== this.props.userProfile && _.isEmpty(this.props.classesList.classes)) {\n            this.props.dispatch(getClassesByEstablishmentId(this.props.userProfile.establishment_id))\n        }\n    }\n\n    handleChangeClasse = name => event => {\n        this.setState({\n            [name]: event.target.value,\n            list_gEvent: [], result: [], prevStudentStatus: [], contextEvent: '', gEvent: '', seance: '', readyRender: false,\n            last_version: {},\n            callRegister: {},\n            lastVerStudentStats: []\n        });\n        this.props.dispatch(getStudentClass(event.target.value))\n        //Création de l'input data pour la remothe methode getListSeances\n        let data = {\n            class_id: event.target.value,\n            choixDate: moment(this.state.date_gEvent).format()\n        }\n        axios.get(`${baseUrl.baseUrl}/classes/getListSeances/${JSON.stringify(data)}?access_token=${localStorage.token}`)\n            .then(res => {\n                this.setState({ list_gEvent: [...res.data.contextualEvent] })\n            })\n        axios.get(`${baseUrl.baseUrl}/call_registers/getLastV_Calls?class_id=${event.target.value}&access_token=${localStorage.token}`)\n            .then(res => {\n                let data = {\n                    callRegister: { class_id: 3, last_version: 1, year: 2020, id: 8 },\n                    last_version: { time_stamp: \"2020-01-07T14:56:45.000Z\", id: 1, context_event_id: 1, context_event: { \"data\": '...' } },\n                    student_calls: []\n                }\n                if (_.isEmpty(res.data.last_version)) {\n                    this.setState({\n                        callRegister: res.data.callRegister,\n                        last_version: {},\n                        lastVerStudentStats: [],\n                        prevStudentStatus: [],\n                    })\n                } else {\n                    this.setState({\n                        callRegister: res.data.callRegister,\n                        last_version: res.data.last_version,\n                        lastVerStudentStats: res.data.student_calls,\n                        prevStudentStatus: res.data.student_calls\n                    })\n                }\n            })\n    };\n\n    handleDateChange = (date) => {\n\n        /** date change => new getListSeances\n         * => save : list_gEvents & date_gEvent\n         * if last_version exist & last_version_context_start_date is before date \n         * => await : render & seance change \n         * => save : reset prevStudentStats & contextEvent & result & readyRender\n         */\n        let data = {\n            class_id: this.state.classe,\n            choixDate: moment(date).format()\n        }\n        axios.get(`${baseUrl.baseUrl}/classes/getListSeances/${JSON.stringify(data)}?access_token=${localStorage.token}`)\n            .then(res => {\n                this.setState({\n                    date_gEvent: date, list_gEvent: [...res.data.contextualEvent]\n                })\n            })\n\n        let lastV_contextE = notEmpty(this.state.last_version) ? this.state.last_version.context_event : {};\n\n        if (notEmpty(lastV_contextE) && moment(date).isSameOrAfter(lastV_contextE.start_lesson, \"day\")) {\n            this.setState({\n                date_gEvent: date,\n                result: [], prevStudentStatus: [], contextEvent: '', gEvent: '', seance: '',\n                readyRender: false,\n                alertOldCall: false\n            });\n        } else if (notEmpty(lastV_contextE) && moment(date).isBefore(lastV_contextE.start_lesson, \"day\")) {\n            this.setState({\n                date_gEvent: date,\n                result: [], prevStudentStatus: [], contextEvent: '', gEvent: '', seance: '',\n                readyRender: false,\n                alertOldCall: true\n            });\n        } else {\n            // Dans le cas ou on fais l'appel dans le registre pour la premiére fois === on n'a pas de last_version d'appel\n            this.setState({\n                date_gEvent: date,\n                result: [], prevStudentStatus: [], contextEvent: '', gEvent: '', seance: '',\n                readyRender: false,\n                alertOldCall: false\n            });\n        }\n    };\n\n    handleChangeSeance = event => {\n        let dataJson = JSON.parse(event.target.value)\n        let contextEvent = _.first(dataJson.sameDayContextE);\n\n        this.setState({\n            seance: event.target.value,\n            contextEvent: contextEvent,\n            gEvent: dataJson,\n            result: []\n        });\n\n        let lastV_contextE = notEmpty(this.state.last_version) ? this.state.last_version.context_event : {};\n        let contextE_isSameOrAfter_lastV_contextE = notEmpty(lastV_contextE) && moment(contextEvent.start_lesson).isSameOrAfter(this.state.last_version.context_event.start_lesson, \"hour\");\n\n        axios.get(`${baseUrl.baseUrl}/generic_events/beforeNewCall?cEventChosen=${JSON.stringify(contextEvent)}&lastV_contextE=${JSON.stringify(lastV_contextE)}&access_token=${localStorage.token}`)\n            .then(res => {\n                let data = {\n                    pastLessons: [],\n                    pastCallsAllDone: true,\n                    studentPrevStatus: (5)\n                }\n                if (_.isEmpty(this.state.last_version)) {\n                    this.setState({\n                        prevStudentStatus: [],\n                        firstTry: true,\n                        readyRender: true\n                    })\n                } else if (notEmpty(this.state.lastVerStudentStats) && notEmpty(lastV_contextE) && res.data.pastCallsAllDone && contextE_isSameOrAfter_lastV_contextE) {\n                    this.setState({\n                        prevStudentStatus: this.state.lastVerStudentStats,\n                        firstTry: false,\n                        readyRender: true,\n                        alertOldCall: false,\n                        modifAppel: false\n                    })\n                } else if (res.data.pastCallsAllDone === false && contextE_isSameOrAfter_lastV_contextE) {\n                    this.setState({\n                        result: [],\n                        readyRender: true,\n                        alertReset_allStu: true,\n                        alertOldCall: false,\n                        modifAppel: false\n                    })\n                } else if (contextE_isSameOrAfter_lastV_contextE === false && notEmpty(res.data.studentPrevStatus)) {\n                    this.setState({\n                        prevStudentStatus: res.data.studentPrevStatus,\n                        result: [],\n                        firstTry: false,\n                        readyRender: true,\n                        alertOldCall: true,\n                        modifAppel: true\n                    })\n                } else {\n                    this.setState({\n                        prevStudentStatus: [],\n                        result: [],\n                        firstTry: true,\n                        readyRender: true,\n                        alertOldCall: true\n                    })\n                }\n            })\n        //Requete dans le but d'extraire la derniére version pour la séance choisie && if seance is in the past then it shouldn't affect the callR_last_version patch\n    };\n\n    NumberAbsentPresent(nbre_Present, nbre_Absent) {\n        this.setState({ nbre_Present, nbre_Absent });\n    }\n\n    RequestSaveRegister(list) {\n        this.setState({ result: list, modal_save: true });\n    }\n\n    ModalConfirmSave() {\n        let objCallR = this.state.callRegister;\n        let contextEvent = this.state.contextEvent;\n        let student_calls = this.state.result;\n\n        // let updateOrNo = _.isEmpty(this.state.last_version) ? true : (notEmpty(this.state.last_version.context_event) && notEmpty(this.state.context_event) &&\n        //     moment(this.state.last_version.context_event.start_lesson).isSameOrAfter(this.state.contextEvent.start_lesson)) ? true : false;\n        // console.log(updateOrNo);\n\n        axios.post(`${baseUrl.baseUrl}/register_versions/createCallsAndUpdate?student_calls=${JSON.stringify(student_calls)}&callRegister=${JSON.stringify(objCallR)}&contextEvent=${JSON.stringify(contextEvent)}&access_token=${localStorage.token}`)\n            .then(res => {\n                let data = {\n                    resCEvent: { start_lesson: \"2020-01-07T12:30:00.000Z\", end_lesson: \"2020-01-07T13:00:00.000Z\", id_generic_event: 5, tag_call: true, id: 5 },\n                    resCallReg: { class_id: 3, last_version: 6, year: 2020, id: 8 },\n                    resVersion: { time_stamp: \"2020-01-08T11:52:20.000Z\", id: 11, context_event_id: 7 },\n                    resCalls: (5)\n                }\n                let updateContextEvent = Object.assign({}, res.data.resCEvent, { generic_events: this.state.gEvent })\n                let updatedVersion = Object.assign({}, res.data.resVersion, { context_event: updateContextEvent })\n                // let updateCallR = updateOrNo ? Object.assign({}, res.data.resCallReg) : this.state.callRegister;\n                this.setState({\n                    readyRender: false,\n                    // callRegister: updateCallR,\n                    last_version: updatedVersion,\n                    lastVerStudentStats: res.data.resCalls,\n                    result: [],\n                    firstTry: true,\n                    prevStudentStatus: [],\n                    alertOldCall: false,\n                    alertReset_allStu: false,\n                    modal_save: false,\n                    alert_success: true\n                });\n\n            })\n        timeout = setTimeout(() => this.setState({ alert_success: false }), 3000)\n    }\n\n    ResetStuListPresent() {\n        this.setState({\n            prevStudentStatus: [],\n            firstTry: true,\n            result: [],\n            alertReset_allStu: false,\n        })\n    }\n    SetAllAbsent() {\n        let setStudentList = []\n        if (this.state.prevStudentStatus) {\n            console.log(\"case first\");\n            setStudentList = this.state.prevStudentStatus.map((data, index) => ({ ...data, \"action\": \"Absent\" }))\n            this.setState({\n                prevStudentStatus: setStudentList,\n                firstTry: false,\n                result: [],\n                alertReset_allStu: false,\n            })\n        } else {\n            console.log(\"case second\");\n            console.log(this.state.prevStudentStatus);\n            // setStudentList = ar\n            this.setState({\n                prevStudentStatus: [],\n                firstTry: true,\n                result: [],\n                alertReset_allStu: false,\n            })\n        }\n    }\n    SetPrevStudentVersion() {\n        if (true) {\n            this.setState({\n                prevStudentStatus: this.state.lastVerStudentStats,\n                firstTry: false,\n                alertReset_allStu: false\n            })\n        }\n    }\n\n    CancelModalConfirm() {\n        this.setState({ modal_save: false })\n    }\n    CancelDialogReset() {\n        this.setState({\n            prevStudentStatus: this.state.lastVerStudentStats,\n            firstTry: false,\n            alertReset_allStu: false\n        })\n    }\n\n    componentWillUnmount() {\n        clearTimeout(timeout);\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                {(() => {\n                    return (\n                        <div>\n                            {this.state.alert_success ? <UncontrolledAlert className=\"alert-addon-card bg-success bg-success text-white shadow-lg\">\n                                <span className=\"icon-addon alert-addon\">\n                                    <i className=\"zmdi zmdi-cloud-done zmdi-hc-fw zmdi-hc-lg\" />\n                                </span>\n                                <span className=\"d-inline-block\"> {<IntlMessages id=\"message.success.call\" />}</span>\n                            </UncontrolledAlert> : ''}\n                            <CardBox styleName=\"col-12\" >\n                                <div className=\"row\">\n                                    <div className=\"col-lg-3 col-sm-6 col-12\">\n                                        <FormControl className=\"w-100 mb-2\">\n                                            <InputLabel htmlFor=\"age-simple\">{<IntlMessages id=\"components.note.class\" />}</InputLabel>\n                                            <Select\n                                                value={this.state.classe}\n                                                onChange={this.handleChangeClasse('classe')}\n                                                input={<Input id=\"classe\" />}\n                                            >\n                                                {Array.from(this.props.classesList).filter(classe => classe.status).map(classe =>\n                                                    <MenuItem key={classe.id} value={classe.id}>\n                                                        {classe.name}\n                                                    </MenuItem>\n                                                )\n                                                }\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                    <div className=\"col-lg-4 col-sm-6 col-12\">\n                                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                            <DatePicker\n                                                label={<IntlMessages id=\"components.call.register.jour\" />}\n                                                fullWidth\n                                                value={this.state.date_gEvent}\n                                                onChange={this.handleDateChange}\n                                                format='dddd DD MMMM Y'\n                                                maxDate={moment()}\n                                                autoOk\n                                            />\n                                        </MuiPickersUtilsProvider>\n                                    </div>\n                                    <div className=\"col-lg-5 col-sm-6 col-12\">\n                                        <FormControl className=\"w-100 mb-2\">\n                                            <InputLabel htmlFor=\"age-simple\">{<IntlMessages id=\"components.call.register.sceances\" />}</InputLabel>\n                                            <Select\n                                                value={this.state.seance}\n                                                onChange={this.handleChangeSeance}\n                                            >\n                                                {Array.from(this.state.list_gEvent).map((gEvent, index) => {\n                                                    let contextEvent = _.first(gEvent.sameDayContextE)\n                                                    let dynamicBtnClass = (!_.isEmpty(contextEvent)) && contextEvent.tag_call ? classes.button : \"\";\n                                                    return (\n                                                        <MenuItem className={dynamicBtnClass} key={index} value={JSON.stringify(gEvent)}>\n                                                            {/* {(_.first(gEvent.sameDayContextE)).tag_call ? <h6>Done </h6> : \"\"} */}\n                                                            {getSubjectName(Array.from(this.props.subjects), gEvent.subject_id) + \" \" + moment(gEvent.start_date_generic_event).format(\"HH[h]mm\") + \"-\" + moment(gEvent.end_date_generic_event).format(\"HH[h]mm\")}\n                                                        </MenuItem>\n                                                    )\n                                                }\n                                                )}\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                    {this.state.last_version.context_event && <div className=\"col-lg-12 col-12 mt-3\">\n                                        <p className=\"MuiInputBase-root\" style={{ margin: \"auto\" }}>\n                                            {<IntlMessages id=\"callRegister.last.lesson\" />}\n                                            <span>\n                                                {\": \" + moment(this.state.last_version.context_event.generic_events.start_date_generic_event).format(\"dddd D MMM\") + \" \" + getSubjectName(Array.from(this.props.subjects), this.state.last_version.context_event.generic_events.subject_id) + \" \" + moment(this.state.last_version.context_event.generic_events.start_date_generic_event).format(\"HH[h]mm\") + \"-\" + moment(this.state.last_version.context_event.generic_events.end_date_generic_event).format(\"HH[h]mm\")}\n                                            </span>\n\n                                        </p>\n                                    </div>}\n                                </div>\n                            </CardBox>\n                            {this.state.classe && this.state.gEvent && this.state.readyRender ?\n                                <>\n                                    <div className=\"jr-btn-group\">\n                                        <Button onClick={this.SetPrevStudentVersion} className=\"jr-btn\" variant=\"outlined\">\n                                            <AssignmentReturn className=\"zmdi zmdi-github zmdi-hc-lg\" />\n                                            <span>{\"Mettre la derniére version du registre\"}</span>\n                                        </Button>\n                                        <Button onClick={this.ResetStuListPresent} className=\"jr-btn\" variant=\"outlined\" color=\"primary\">\n                                            <AssignmentInd className=\"zmdi zmdi-github zmdi-hc-lg\" />\n                                            <span>{\"Mettre tous à Présent\"}</span>\n                                        </Button>\n                                        <Button onClick={this.SetAllAbsent} className=\"jr-btn\" variant=\"outlined\" color=\"secondary\">\n                                            <AssignmentLate className=\"zmdi zmdi-github zmdi-hc-lg\" />\n                                            <span>{\"Mettre tous à Absent\"}</span>\n                                        </Button>\n                                    </div>\n\n                                    {/* {this.state.last_version.context_event ?\n                                        <>\n                                            <h2>{<IntlMessages id=\"callRegister.lastCall\" />}{\" \" + moment(this.state.last_version.time_stamp).fromNow()}\n                                            </h2>\n                                            <h2>\n                                                {<IntlMessages id=\"callRegister.last.lesson\" />}{moment(this.state.last_version.context_event.generic_events.start_date_generic_event).format(\"ddd D MMM\") + \" \" + getSubjectName(Array.from(this.props.subjects), this.state.last_version.context_event.generic_events.subject_id) + \" \" + moment(this.state.last_version.context_event.generic_events.start_date_generic_event).format(\"HH[h]mm\") + \"-\" + moment(this.state.last_version.context_event.generic_events.end_date_generic_event).format(\"HH[h]mm\")}\n                                            </h2>\n                                        </>\n                                        : <h2>{<IntlMessages id=\"callRegister.firstTry\" />}</h2>}\n                                    {this.state.alertOldCall ? <h2>{<IntlMessages id=\"callRegister.late.call\" />}</h2> : \"\"}\n                                    {this.state.modifAppel ? <h2>{<IntlMessages id=\"callRegister.edit.prev.call\" />}</h2> : \"\"} */}\n                                    <StudentList\n                                        // callRegister={this.state.callRegister}\n                                        prevStudentStatus={this.state.prevStudentStatus}\n                                        contextEvent={this.state.contextEvent}\n                                        presences={this.props.presences}\n                                        users={this.props.studentsClass.classData}\n                                        RequestSaveRegister={this.RequestSaveRegister}\n                                        NumberAbsentPresent={this.NumberAbsentPresent}\n                                        firstTry={this.state.firstTry}\n                                        establishment_id={this.props.userProfile.establishment_id}\n                                        gEvent={this.state.gEvent}\n                                    />\n                                </> : \"\"}\n                            {/* {this.state.alertReset_allStu ?\n                                <InitAppelDialog\n                                    last_version={this.state.last_version}\n                                    contextEvent={this.state.contextEvent}\n                                    ResetStuListPresent={this.ResetStuListPresent}\n                                    CancelDialogReset={this.CancelDialogReset}\n                                /> : ''} */}\n                            {this.state.modal_save ?\n                                <ConfirmAppel\n                                    contextEvent={this.state.contextEvent}\n                                    ModalConfirmSave={this.ModalConfirmSave}\n                                    CancelModalConfirm={this.CancelModalConfirm}\n                                    NumberAbsent={this.state.nbre_Absent}\n                                    NumberPresent={this.state.nbre_Present}\n                                    presences={this.props.presences}\n                                /> : ''}\n                        </div>\n                    )\n\n                })()}\n            </div>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        classesList: state.classes,\n        studentsClass: state.callRegister.studentsClass,\n        subjects: state.subject.remoteSubjects\n    }\n}\n\nexport default withStyles(styles)(connect(mapStateToProps)(CallRegister));\n"]},"metadata":{},"sourceType":"module"}