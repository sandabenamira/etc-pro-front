{"ast":null,"code":"import _ from 'lodash';\nimport { classService } from \"../_services/class.service\";\nimport { roleIdProfessor } from \"../config/config\";\nimport { GET_PROFESSOR } from \"../constants/ActionTypes\";\nexport function professorBySubjectId(professors, subject_id) {\n  let profList = professors.filter(element => element.subject_id === subject_id);\n  return profList;\n}\nexport function getData() {\n  return dispatch => {\n    let apiEndpoint = `/professors?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: \"DATA_LOADED\",\n        payload: response.data\n      });\n    }).catch(error => {});\n  };\n}\n;\n\nfunction getProfBySubjectId(professors, subject_id) {\n  let profInfo = [];\n  professors.forEach(profItem => {\n    if (!_.isEmpty(profItem.profSubjects)) {\n      profInfo = profItem.profSubjects.map(element => {\n        if (element.id === subject_id) {\n          return profItem;\n        }\n      });\n    }\n  });\n  return profInfo;\n}\n\nexport function getProfesseurByEstablishmentId(establishment_id) {\n  return function (dispatch) {\n    let apiEndpoint = `/profile_establishments?access_token=${localStorage.token}&filter[include][profile]=user&filter[include][profile]=professors&filter[where][establishment_id]=${establishment_id}`;\n    classService.get(apiEndpoint).then(res => {\n      const list = res.data;\n      const professorsList = list.filter(element => element.profile.user.status === true && element.profile.role_id === roleIdProfessor);\n      dispatch({\n        type: GET_PROFESSOR,\n        payload: professorsList\n      });\n    });\n  };\n}\nexport { getProfBySubjectId };","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/professorAction.js"],"names":["_","classService","roleIdProfessor","GET_PROFESSOR","professorBySubjectId","professors","subject_id","profList","filter","element","getData","dispatch","apiEndpoint","localStorage","token","get","then","response","type","payload","data","catch","error","getProfBySubjectId","profInfo","forEach","profItem","isEmpty","profSubjects","map","id","getProfesseurByEstablishmentId","establishment_id","res","list","professorsList","profile","user","status","role_id"],"mappings":"AACA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAAQC,eAAR,QAA8B,kBAA9B;AACA,SAAQC,aAAR,QAA4B,0BAA5B;AACA,OAAO,SAASC,oBAAT,CAA8BC,UAA9B,EAA0CC,UAA1C,EAAsD;AACzD,MAAIC,QAAQ,GAAGF,UAAU,CAACG,MAAX,CAAkBC,OAAO,IAAIA,OAAO,CAACH,UAAR,KAAuBA,UAApD,CAAf;AACA,SAAOC,QAAP;AACH;AAED,OAAO,SAASG,OAAT,GAAmB;AACtB,SAAOC,QAAQ,IAAI;AACf,QAAIC,WAAW,GAAI,4BAA2BC,YAAY,CAACC,KAAM,EAAjE;AACAb,IAAAA,YAAY,CAACc,GAAb,CAAiBH,WAAjB,EACCI,IADD,CACMC,QAAQ,IAAI;AACdN,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAE,aAAR;AAAuBC,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAzC,OAAD,CAAR;AACH,KAHD,EAGGC,KAHH,CAGSC,KAAK,IAAI,CACjB,CAJD;AAKH,GAPD;AAQH;AAAA;;AAED,SAASC,kBAAT,CAA4BlB,UAA5B,EAAwCC,UAAxC,EAAoD;AAChD,MAAIkB,QAAQ,GAAG,EAAf;AACAnB,EAAAA,UAAU,CAACoB,OAAX,CAAmBC,QAAQ,IAAI;AAC3B,QAAI,CAAE1B,CAAC,CAAC2B,OAAF,CAAUD,QAAQ,CAACE,YAAnB,CAAN,EAAyC;AACtCJ,MAAAA,QAAQ,GAAGE,QAAQ,CAACE,YAAT,CAAsBC,GAAtB,CAA0BpB,OAAO,IAAI;AAC/C,YAAIA,OAAO,CAACqB,EAAR,KAAexB,UAAnB,EAA+B;AAAE,iBAAOoB,QAAP;AAAiB;AACrD,OAFa,CAAX;AAGF;AAGJ,GARD;AASA,SAAOF,QAAP;AACH;;AAED,OAAO,SAASO,8BAAT,CAAwCC,gBAAxC,EAA0D;AAC7D,SAAO,UAASrB,QAAT,EAAmB;AACtB,QAAIC,WAAW,GAAI,wCAAuCC,YAAY,CAACC,KAAM,sGAAqGkB,gBAAiB,EAAnM;AACA/B,IAAAA,YAAY,CAACc,GAAb,CAAiBH,WAAjB,EACCI,IADD,CACOiB,GAAD,IAAS;AACb,YAAMC,IAAI,GAAGD,GAAG,CAACb,IAAjB;AACA,YAAMe,cAAc,GAAGD,IAAI,CAAC1B,MAAL,CACpBC,OAAD,IAAaA,OAAO,CAAC2B,OAAR,CAAgBC,IAAhB,CAAqBC,MAArB,KAAgC,IAAhC,IAAwC7B,OAAO,CAAC2B,OAAR,CAAgBG,OAAhB,KAA4BrC,eAD5D,CAAvB;AAGAS,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEf,aAAR;AAAuBgB,QAAAA,OAAO,EAAEgB;AAAhC,OAAD,CAAR;AACD,KAPD;AAQH,GAVD;AAWD;AACH,SAASZ,kBAAT","sourcesContent":["\nimport _ from 'lodash';\nimport { classService } from \"../_services/class.service\";\nimport {roleIdProfessor} from \"../config/config\"\nimport {GET_PROFESSOR} from \"../constants/ActionTypes\"\nexport function professorBySubjectId(professors, subject_id) {\n    let profList = professors.filter(element => element.subject_id === subject_id)\n    return profList\n}\n\nexport function getData() {\n    return dispatch => {\n        let apiEndpoint = `/professors?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint)\n        .then(response => { \n            dispatch({ type: \"DATA_LOADED\", payload: response.data });\n        }).catch(error => {\n        });\n    };\n};\n\nfunction getProfBySubjectId(professors, subject_id) {\n    let profInfo = []\n    professors.forEach(profItem => {\n        if (!(_.isEmpty(profItem.profSubjects))) {\n           profInfo = profItem.profSubjects.map(element => {\n            if (element.id === subject_id) { return profItem }\n        })\n        }\n       \n\n    });\n    return profInfo\n}\n\nexport function getProfesseurByEstablishmentId(establishment_id) {\n    return function(dispatch) {\n        let apiEndpoint = `/profile_establishments?access_token=${localStorage.token}&filter[include][profile]=user&filter[include][profile]=professors&filter[where][establishment_id]=${establishment_id}`\n        classService.get(apiEndpoint)\n        .then((res) => {\n          const list = res.data;\n          const professorsList = list.filter(\n            (element) => element.profile.user.status === true && element.profile.role_id === roleIdProfessor\n          );\n          dispatch({ type: GET_PROFESSOR, payload: professorsList });\n        });\n    };\n  }\nexport { getProfBySubjectId }"]},"metadata":{},"sourceType":"module"}