{"ast":null,"code":"import { HANDLE_RECLAM_CLOSE, ON_COMPOSE_RECLAM, ON_RECLAM_SEND, SHOW_DETAIL_RECLAM, GET_RECLAM_RECUES, GET_RECLAM_ENVOYÉES, EDIT_RECLAM_STATUS, ON_CHANGE_STATUS, ON_CHANGE_STATUS_CLOSE, DELETE_RECLAM } from \"../constants/ActionTypes\";\nimport _ from \"lodash\";\nimport { classService } from \"../_services/class.service\";\nimport baseUrl from \"../config/config\";\nimport axios from \"axios\";\nexport const showReclamMessage = message => {\n  return {\n    type: SHOW_DETAIL_RECLAM,\n    payload: message\n  };\n};\nexport const handleReclamRequestClose = () => {\n  return {\n    type: HANDLE_RECLAM_CLOSE\n  };\n};\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return dispatch => {\n      let apiEndpoint = `/establishments/` + payload.establishment_id + `?access_token=${localStorage.token}`;\n      classService.get(apiEndpoint).then(response => {\n        let formadata = new FormData();\n        formadata.append(\"image\", payload.file);\n        const establishLogoUrl = `/containers/` + response.data.name + `/upload?access_token=${localStorage.token}`;\n        classService.post(establishLogoUrl, formadata).then(response => {}).catch(error => {});\n      }).catch(error => {});\n    };\n  } else {\n    return function (dispatch) {};\n  }\n}\nexport const onReclamSend = data => {\n  if (data.file !== null) {\n    return dispatch => {\n      let dataMail = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        status_complaint: \"non traitée\"\n      };\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, dataMail).then(response => {\n        if (_.isEmpty(response.data)) {\n          dispatch({\n            type: \"MAIL_NOT_FOUND\",\n            payload: \" mail n'existe pas \"\n          });\n        } else {\n          const fileExtension = data.file.name.replace(/^.*\\./, \"\");\n          const fileName = \"COMPLAINT_\" + response.data.mail.id + \"_Sender_\" + data.sender_id + \".\" + fileExtension;\n          const myNewFile = new File([data.file], fileName, {\n            type: data.file.type\n          });\n          const upload = {\n            file: myNewFile,\n            establishment_id: data.establishmentId\n          };\n          axios.patch(`${baseUrl.baseUrl}/complaints/` + response.data.mail.id + `?access_token=${localStorage.token}`, {\n            profile_id: data.sender_id,\n            files: fileName,\n            id: response.data.mail.id\n          }).then(response => {\n            dispatch(uploadFile(upload));\n            dispatch(getReclams_Envoyées());\n            dispatch({\n              type: ON_RECLAM_SEND,\n              payload: response.data\n            });\n            setTimeout(() => {\n              dispatch({\n                type: HANDLE_RECLAM_CLOSE\n              });\n            }, 2000);\n          });\n        }\n      }).catch(error => {});\n    };\n  } else {\n    return dispatch => {\n      let mailWithoutFile = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        files: null,\n        status_complaint: \"non traitée\"\n      };\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      classService.post(apiEndpoint, mailWithoutFile).then(response => {\n        if (_.isEmpty(response.data)) {\n          dispatch({\n            type: \"MAIL_NOT_FOUND\",\n            payload: \" mail n'existe pas \"\n          });\n        } else {\n          dispatch(getReclams_Envoyées());\n          dispatch({\n            type: ON_RECLAM_SEND,\n            payload: response.data\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HANDLE_RECLAM_CLOSE\n            });\n          }, 2000);\n        }\n      }).catch(error => {});\n    };\n  }\n};\nexport const getReclams_Recues = () => {\n  return dispatch => {\n    let apiEndpoint = `/complaints/fetchemails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const reclamReceived = response.data.emails; // const reclamList = reclamReceived.filter((element) => element.status);\n\n      dispatch({\n        type: GET_RECLAM_RECUES,\n        payload: {\n          data: reclamReceived\n        }\n      });\n    }).catch(error => {});\n  };\n};\nexport const getReclams_Envoyées = () => {\n  return dispatch => {\n    let apiEndpoint = `/complaints/fetchSentEmails/` + localStorage.profileId + `?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      const reclamReceived = response.data.emails; //const reclamList = reclamReceived.filter((element) => element.status);\n\n      dispatch({\n        type: GET_RECLAM_ENVOYÉES,\n        payload: {\n          data: reclamReceived\n        }\n      });\n    }).catch(error => {});\n  };\n};\nexport const onComposeReclam = () => {\n  return {\n    type: ON_COMPOSE_RECLAM\n  };\n};\nexport function onChangeStatusClose() {\n  return dispatch => {\n    dispatch({\n      type: ON_CHANGE_STATUS_CLOSE\n    });\n    setTimeout(() => {\n      dispatch({\n        type: HANDLE_RECLAM_CLOSE\n      });\n    }, 2000);\n  };\n}\nexport function editStatus(dataReclam) {\n  return dispatch => {\n    let reclamData = {\n      status_complaint: dataReclam.status,\n      id: dataReclam.id\n    };\n    let apiEndpoint = `/complaints/` + dataReclam.id + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, reclamData).then(response => {\n      dispatch({\n        type: EDIT_RECLAM_STATUS,\n        payload: response.data\n      });\n      dispatch(getReclams_Recues());\n    }).catch(error => {});\n  };\n}\nexport function deleteComplaint(itemId) {\n  return dispatch => {\n    let reclamData = {\n      status: false,\n      id: itemId\n    };\n    let apiEndpoint = `/complaints/` + itemId + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, reclamData).then(response => {\n      dispatch({\n        type: DELETE_RECLAM,\n        payload: response.data\n      });\n      dispatch(getReclams_Recues());\n      dispatch(getReclams_Envoyées());\n      setTimeout(() => {\n        dispatch({\n          type: HANDLE_RECLAM_CLOSE\n        });\n      }, 2000);\n    }).catch(error => {});\n  };\n}","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/complaintAction.js"],"names":["HANDLE_RECLAM_CLOSE","ON_COMPOSE_RECLAM","ON_RECLAM_SEND","SHOW_DETAIL_RECLAM","GET_RECLAM_RECUES","GET_RECLAM_ENVOYÉES","EDIT_RECLAM_STATUS","ON_CHANGE_STATUS","ON_CHANGE_STATUS_CLOSE","DELETE_RECLAM","_","classService","baseUrl","axios","showReclamMessage","message","type","payload","handleReclamRequestClose","uploadFile","file","dispatch","apiEndpoint","establishment_id","localStorage","token","get","then","response","formadata","FormData","append","establishLogoUrl","data","name","post","catch","error","onReclamSend","dataMail","sender_id","receiver_id","subject","date_hour_reclamation","date_hour_mail","status","profile_id","status_complaint","isEmpty","fileExtension","replace","fileName","mail","id","myNewFile","File","upload","establishmentId","patch","files","getReclams_Envoyées","setTimeout","mailWithoutFile","getReclams_Recues","profileId","reclamReceived","emails","onComposeReclam","onChangeStatusClose","editStatus","dataReclam","reclamData","deleteComplaint","itemId"],"mappings":"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","sourcesContent":["import {\n  HANDLE_RECLAM_CLOSE,\n  ON_COMPOSE_RECLAM,\n  ON_RECLAM_SEND,\n  SHOW_DETAIL_RECLAM,\n  GET_RECLAM_RECUES,\n  GET_RECLAM_ENVOYÉES,\n  EDIT_RECLAM_STATUS,\n  ON_CHANGE_STATUS,\n  ON_CHANGE_STATUS_CLOSE,\n  DELETE_RECLAM,\n} from \"../constants/ActionTypes\";\nimport _ from \"lodash\";\nimport { classService } from \"../_services/class.service\";\nimport baseUrl from \"../config/config\";\nimport axios from \"axios\";\n\nexport const showReclamMessage = (message) => {\n  return {\n    type: SHOW_DETAIL_RECLAM,\n    payload: message,\n  };\n};\n\nexport const handleReclamRequestClose = () => {\n  return {\n    type: HANDLE_RECLAM_CLOSE,\n  };\n};\nexport function uploadFile(payload) {\n  if (payload.file !== null) {\n    return (dispatch) => {\n      let apiEndpoint =\n        `/establishments/` +\n        payload.establishment_id +\n        `?access_token=${localStorage.token}`;\n      classService\n        .get(apiEndpoint)\n        .then((response) => {\n          let formadata = new FormData();\n          formadata.append(\"image\", payload.file);\n          const establishLogoUrl =\n            `/containers/` +\n            response.data.name +\n            `/upload?access_token=${localStorage.token}`;\n          classService\n            .post(establishLogoUrl, formadata)\n            .then((response) => {})\n            .catch((error) => {});\n        })\n        .catch((error) => {});\n    };\n  } else {\n    return function(dispatch) {};\n  }\n}\n\nexport const onReclamSend = (data) => {\n  if (data.file !== null) {\n    return (dispatch) => {\n      let dataMail = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        status_complaint: \"non traitée\",\n      };\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      classService\n        .post(apiEndpoint, dataMail)\n        .then((response) => {\n          if (_.isEmpty(response.data)) {\n            dispatch({\n              type: \"MAIL_NOT_FOUND\",\n              payload: \" mail n'existe pas \",\n            });\n          } else {\n            const fileExtension = data.file.name.replace(/^.*\\./, \"\");\n            const fileName =\n              \"COMPLAINT_\" +\n              response.data.mail.id +\n              \"_Sender_\" +\n              data.sender_id +\n              \".\" +\n              fileExtension;\n            const myNewFile = new File([data.file], fileName, {\n              type: data.file.type,\n            });\n            const upload = {\n              file: myNewFile,\n              establishment_id: data.establishmentId,\n            };\n\n            axios\n              .patch(\n                `${baseUrl.baseUrl}/complaints/` +\n                  response.data.mail.id +\n                  `?access_token=${localStorage.token}`,\n                {\n                  profile_id: data.sender_id,\n                  files: fileName,\n                  id: response.data.mail.id,\n                }\n              )\n              .then((response) => {\n                dispatch(uploadFile(upload));\n                dispatch(getReclams_Envoyées());\n                dispatch({ type: ON_RECLAM_SEND, payload: response.data });\n                setTimeout(() => {\n                  dispatch({ type: HANDLE_RECLAM_CLOSE });\n                }, 2000);\n              });\n          }\n        })\n        .catch((error) => {});\n    };\n  } else {\n    return (dispatch) => {\n      let mailWithoutFile = {\n        sender_id: data.sender_id,\n        receiver_id: data.receiver_id,\n        subject: data.subject,\n        message: data.message,\n        date_hour_reclamation: data.date_hour_mail,\n        status: true,\n        profile_id: data.sender_id,\n        files: null,\n        status_complaint: \"non traitée\",\n      };\n\n      let apiEndpoint = `/complaints/send-mail?access_token=${localStorage.token}`;\n      classService\n        .post(apiEndpoint, mailWithoutFile)\n        .then((response) => {\n          if (_.isEmpty(response.data)) {\n            dispatch({\n              type: \"MAIL_NOT_FOUND\",\n              payload: \" mail n'existe pas \",\n            });\n          } else {\n            dispatch(getReclams_Envoyées());\n            dispatch({ type: ON_RECLAM_SEND, payload: response.data });\n            setTimeout(() => {\n              dispatch({ type: HANDLE_RECLAM_CLOSE });\n            }, 2000);\n          }\n        })\n        .catch((error) => {});\n    };\n  }\n};\n\nexport const getReclams_Recues = () => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/complaints/fetchemails/` +\n      localStorage.profileId +\n      `?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const reclamReceived = response.data.emails;\n        // const reclamList = reclamReceived.filter((element) => element.status);\n\n        dispatch({\n          type: GET_RECLAM_RECUES,\n          payload: {\n            data: reclamReceived,\n          },\n        });\n      })\n      .catch((error) => {});\n  };\n};\n\nexport const getReclams_Envoyées = () => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/complaints/fetchSentEmails/` +\n      localStorage.profileId +\n      `?access_token=${localStorage.token}`;\n    classService\n      .get(apiEndpoint)\n      .then((response) => {\n        const reclamReceived = response.data.emails;\n        //const reclamList = reclamReceived.filter((element) => element.status);\n        dispatch({\n          type: GET_RECLAM_ENVOYÉES,\n          payload: {\n            data: reclamReceived,\n          },\n        });\n      })\n      .catch((error) => {});\n  };\n};\n\nexport const onComposeReclam = () => {\n  return {\n    type: ON_COMPOSE_RECLAM,\n  };\n};\n\nexport function onChangeStatusClose() {\n  return (dispatch) => {\n    dispatch({ type: ON_CHANGE_STATUS_CLOSE });\n    setTimeout(() => {\n      dispatch({ type: HANDLE_RECLAM_CLOSE });\n    }, 2000);\n  };\n}\n\nexport function editStatus(dataReclam) {\n  return (dispatch) => {\n    let reclamData = {\n      status_complaint: dataReclam.status,\n      id: dataReclam.id,\n    };\n    let apiEndpoint =\n      `/complaints/` + dataReclam.id + `?access_token=${localStorage.token}`;\n    classService\n      .patch(apiEndpoint, reclamData)\n      .then((response) => {\n        dispatch({ type: EDIT_RECLAM_STATUS, payload: response.data });\n        dispatch(getReclams_Recues());\n      })\n      .catch((error) => {});\n  };\n}\n\nexport function deleteComplaint(itemId) {\n  return (dispatch) => {\n    let reclamData = {\n      status: false,\n      id: itemId,\n    };\n    let apiEndpoint =\n      `/complaints/` + itemId + `?access_token=${localStorage.token}`;\n    classService\n      .patch(apiEndpoint, reclamData)\n      .then((response) => {\n        dispatch({ type: DELETE_RECLAM, payload: response.data });\n        dispatch(getReclams_Recues());\n        dispatch(getReclams_Envoyées());\n        setTimeout(() => {\n          dispatch({ type: HANDLE_RECLAM_CLOSE });\n        }, 2000);\n      })\n      .catch((error) => {});\n  };\n}\n"]},"metadata":{},"sourceType":"module"}