{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Learning/routes/Homeworks/editHomework.js\";\nimport React from 'react';\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Auxiliary from \"../../../../../util/Auxiliary\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from \"react-redux\";\nimport { editHomework, fetchProfessorBySubject } from '../../../../../actions/ToDo';\nimport { getName } from \"../../../../../actions/countriesAction\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { classService } from \"../../../../../_services/class.service\";\nimport Can from '../../../../../can';\nimport { RoleContext } from '../../../../../Context';\nimport _ from \"lodash\";\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/moment';\nimport CardBox from '../../../../../components/CardBox/index';\nimport { roleIdProfessor, roleIdAdmin } from '../../../../../config/config';\nimport { getSectionsByLevelId } from \"../../../../../actions/sectionAction\";\nimport { subjectsByLevelBySection, getSubjectsForProf } from '../../../../../actions/subjectAction';\nimport { getLevelsAndSubjectsForProf } from '../../../../../actions/classLevelAction';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\nclass EditHomework extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeProfessor = name => event => {\n      let apiEndpoint = `/classes_professors/?access_token=${localStorage.token}&filter[include][class]&filter[where][professor_id]=` + event.target.value;\n      classService.get(apiEndpoint).then(res => {\n        if (res) {\n          let classesListForProf = _.uniqBy(_.map(res.data, 'class'), 'id');\n\n          let newClassesList = classesListForProf.filter(element => element.level_id === this.state.level_id);\n          this.setState({\n            classesFiltredByLevel: newClassesList\n          });\n        }\n      });\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.assignNewClass = index => {\n      this.setState(prevState => ({\n        assignHomeworkList: [...prevState.assignHomeworkList, {\n          id: index\n        }]\n      }));\n    };\n\n    this.handleChangeSubject = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n\n      if (this.props.userProfile.role_id === roleIdAdmin) {\n        let listProfByEstablishment = this.props.subjectsProfessors.filter(element => element.subject_id === event.target.value);\n        this.setState({\n          professor_id: 0,\n          professorsList: listProfByEstablishment\n        });\n      }\n    };\n\n    this.handleChangeLevel = name => event => {\n      let classesFiltredByLevel = this.state.classes.filter(element => element.level_id === event.target.value);\n      this.setState({\n        classesFiltredByLevel\n      });\n      let levelId = event.target.value;\n\n      if (levelId > 10) {\n        this.setState({\n          sectionsDisable: false,\n          subject_id: ''\n        });\n      } else {\n        if (this.props.userProfile.role_id === roleIdProfessor) {\n          this.setState({\n            level_id: levelId,\n            subject_id: ''\n          });\n          this.props.dispatch(getSubjectsForProf(this.props.userProfile.id));\n        } else {\n          this.setState({\n            subjectList: subjectsByLevelBySection(this.props.subjects, levelId, 0),\n            level_id: levelId,\n            subject_id: '',\n            professor_id: 0\n          });\n        }\n      }\n\n      this.props.dispatch(getSectionsByLevelId(levelId));\n    };\n\n    this.handleChangeSection = name => event => {\n      let sectionId = event.target.value;\n\n      if (this.props.userProfile.role_id === roleIdProfessor) {\n        let data = this.state.subjectsAffectedToProf;\n        let listSubject = subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId);\n        let dataSubjectsFiltred = [];\n        data.forEach(item => {\n          let dataFiltred = listSubject.filter(element => element.id === item);\n\n          if (!_.isEmpty(dataFiltred[0])) {\n            dataSubjectsFiltred.push(dataFiltred[0]);\n          }\n\n          this.setState({\n            subjectList: dataSubjectsFiltred\n          });\n        });\n      } else {\n        this.setState({\n          subjectList: subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId)\n        });\n      }\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n\n      if (this.state.subject_id === '') {\n        this.setState({\n          subjectError: true\n        });\n      } else if (this.state.professor_id === 0) {\n        this.setState({\n          professorError: true\n        });\n      } else {\n        let date = new Date();\n        const title = this.state.title;\n        const description = this.state.description;\n        const date_creation = date;\n        const professor_id = this.state.professor_id;\n        const subject_id = this.state.subject_id;\n        let files = this.props.homework.files;\n        const establishment_id = this.props.userProfile.establishment_id;\n        const newFile = this.state.fileList;\n        const files_name = this.state.inputText;\n        const id = this.props.homework.id;\n        const assignHomeworkList = this.state.assignHomeworkList;\n        const active = this.state.active;\n        const data = {\n          id,\n          active,\n          title,\n          files_name,\n          description,\n          date_creation,\n          professor_id,\n          subject_id,\n          establishment_id,\n          newFile,\n          assignHomeworkList,\n          files\n        };\n        this.props.dispatch(editHomework(data, files));\n        this.setState({\n          title: '',\n          subject_id: 0,\n          description: '',\n          professor_id: 0,\n          assignHomeworkList: [{\n            id: 0\n          }]\n        });\n        this.props.cancelModal();\n      }\n    };\n\n    this.onDrop = e => {\n      let file = e.target.files[0];\n      this.setState({\n        fileList: file,\n        inputText: file.name\n      });\n    };\n\n    this.state = {\n      previewVisible: true,\n      title: '',\n      subject_id: '',\n      description: '',\n      professor_id: 0,\n      professorsList: [],\n      subject: [],\n      levels: [],\n      modal: false,\n      pictures: [],\n      file: null,\n      fileList: null,\n      inputText: '',\n      assignHomeworkList: [{\n        id: 0\n      }],\n      sectionsDisable: true,\n      level_id: 0,\n      subjectsAffectedToProf: [],\n      classes: [],\n      subjectList: [],\n      section_id: 0,\n      active: '',\n      subjectError: false,\n      professorError: false,\n      classesFiltredByLevel: []\n    };\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.toggle = this.toggle.bind(this);\n    this.handleChangeLevel = this.handleChangeLevel.bind(this);\n    this.handleChangeSection = this.handleChangeSection.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.assignClass = this.assignClass.bind(this);\n    this.assignNewClass = this.assignNewClass.bind(this);\n    this.handleChangeProfessor = this.handleChangeProfessor.bind(this);\n  }\n\n  assignClass(event, name, index) {\n    if (name === \"classId\") {\n      let newList = this.state.assignHomeworkList.map(objSubject => objSubject.id === index ? { ...objSubject,\n        classId: event.target.value\n      } : objSubject);\n      this.setState({\n        assignHomeworkList: newList\n      });\n    } else {\n      let newList = this.state.assignHomeworkList.map(objSubject => objSubject.id === index ? { ...objSubject,\n        correctionDate: event._d\n      } : objSubject);\n      this.setState({\n        assignHomeworkList: newList\n      });\n    }\n  }\n\n  componentDidMount() {\n    let data = this.props.homework;\n    let apiEndpoint = `/subjects/${data.subject_id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let levelId = response.data.level_id;\n        this.setState({\n          level_id: response.data.level_id,\n          section_id: response.data.section_id\n        });\n        this.props.dispatch(getSectionsByLevelId(response.data.level_id));\n\n        if (levelId > 10) {\n          this.setState({\n            sectionsDisable: false\n          });\n        }\n\n        if (this.props.userProfile.role_id === roleIdProfessor) {\n          this.props.dispatch(getLevelsAndSubjectsForProf(this.props.userProfile.id));\n          this.setState({\n            classes: this.props.classesList,\n            classesFiltredByLevel: this.props.classesList\n          });\n        } else {\n          let subjectList = this.props.subjects.filter(element => element.level_id === levelId);\n          this.props.dispatch(fetchProfessorBySubject(this.props.userProfile.establishment_id));\n          this.setState({\n            classes: this.props.classes,\n            levels: this.props.levels,\n            subjectList: subjectList,\n            classesFiltredByLevel: this.props.classes,\n            professorsList: [data]\n          });\n        }\n      }\n    });\n    let homeworkClass = [];\n\n    if (!_.isEmpty(data.homeworkClass)) {\n      data.homeworkClass.forEach(element => {\n        let obj = {\n          'id': data.homeworkClass.indexOf(element),\n          'classId': element.class_id,\n          'correctionDate': element.correction_date\n        };\n        homeworkClass.push(obj);\n      });\n    } else {\n      homeworkClass = [{\n        id: 0\n      }];\n    }\n\n    this.setState({\n      title: data.title,\n      description: data.description,\n      professor_id: data.professor_id,\n      subject_id: data.subject_id,\n      assignHomeworkList: homeworkClass,\n      inputText: data.files_name,\n      active: data.active\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.levels !== this.props.levels) {\n      this.setState({\n        levels: this.props.levels\n      });\n    }\n\n    if (prevProps.subjectsProf !== this.props.subjectsProf) {\n      let list = this.props.subjectsProf.filter(element => element.level_id === this.state.level_id);\n      this.setState({\n        subjectList: list\n      });\n    }\n  }\n\n  handleCancel() {\n    this.props.cancelModal();\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    let {\n      sections\n    } = this.props;\n    let {\n      sectionsDisable,\n      subjectList,\n      assignHomeworkList,\n      professorsList,\n      classesFiltredByLevel,\n      levels\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Auxiliary, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.previewVisible,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      className: \"modal-box-header bg-primary text-white\",\n      toggle: this.handleCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"modal.editToDo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 26\n      }\n    })), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(RoleContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 29\n      }\n    }, ({\n      role\n    }) => /*#__PURE__*/React.createElement(Can, {\n      role: role,\n      perform: \"homework-filter:visit\",\n      yes: () => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-lg-12 text-primary\",\n        heading: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"component.etablishments.info.general\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 102\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: \"level_id\",\n        name: \"level_id\",\n        select: true,\n        value: this.state.level_id,\n        onChange: this.handleChangeLevel(),\n        SelectProps: {},\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"components.note.niveau\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 72\n          }\n        }),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 61\n        }\n      }, levels.map(level => /*#__PURE__*/React.createElement(MenuItem, {\n        key: level.id,\n        value: level.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 69\n        }\n      }, level.name)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        id: \"section_id\",\n        name: \"section_id\",\n        select: true,\n        value: this.state.section_id,\n        onChange: this.handleChangeSection(),\n        disabled: sectionsDisable,\n        SelectProps: {},\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"components.class.level.input.label.section\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 72\n          }\n        }),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 61\n        }\n      }, sections.map(section => /*#__PURE__*/React.createElement(MenuItem, {\n        key: section.id,\n        value: section.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 69\n        }\n      }, section.name)))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        select: true,\n        id: \"subject_id\",\n        name: \"subject_id\",\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"sidebar.subjects\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 72\n          }\n        }),\n        error: this.state.subjectError,\n        value: this.state.subject_id,\n        onChange: this.handleChangeSubject('subject_id'),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 61\n        }\n      }, subjectList.map(subject => /*#__PURE__*/React.createElement(MenuItem, {\n        key: subject.id,\n        value: subject.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 69\n        }\n      }, getName(subject)))), /*#__PURE__*/React.createElement(FormHelperText, {\n        error: this.state.subjectError,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 61\n        }\n      }, this.state.subjectError ? /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"message.seclect.subject\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 71\n        }\n      }) : '')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        required: true,\n        id: \"title\",\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.titre\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 72\n          }\n        }),\n        value: this.state.title,\n        onChange: this.handleChange('title'),\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 61\n        }\n      })), /*#__PURE__*/React.createElement(Can, {\n        role: role,\n        perform: \"homework-filter-professor:visit\",\n        yes: () => /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-md-6\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(TextField, {\n          id: \"professor_id\",\n          name: \"professor_id\",\n          select: true,\n          label: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"toDo.professor\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 80\n            }\n          }),\n          error: this.state.professorError,\n          value: this.state.professor_id,\n          onChange: this.handleChangeProfessor('professor_id'),\n          SelectProps: {},\n          margin: \"normal\",\n          fullWidth: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 69\n          }\n        }, professorsList.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n          key: option.professor.id,\n          value: option.professor.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 77\n          }\n        }, option.professor.profile.user.name + ' ' + option.professor.profile.user.surname))), /*#__PURE__*/React.createElement(FormHelperText, {\n          error: this.state.professorError,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 69\n          }\n        }, this.state.professorError ? /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"message.error.seclect.professor\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 79\n          }\n        }) : '')),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 57\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(TextField, {\n        name: \"description\",\n        multiline: true,\n        rows: 3,\n        id: \"description\",\n        variant: \"outlined\",\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"room.description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 72\n          }\n        }),\n        onChange: this.handleChange('description'),\n        value: this.state.description,\n        margin: \"normal\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 61\n        }\n      })))), /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-lg-12 text-primary\",\n        heading: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"stuppUser.formadd.file\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 102\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-12 pt-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(InputLabel, {\n        htmlFor: \"name-multiple\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.homework.task\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 98\n        }\n      })), \" \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 159\n        }\n      }), /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"files\",\n        className: \"btn\",\n        style: {\n          cursor: \"pointer\",\n          color: \"white\",\n          fontWeight: \"bold\",\n          backgroundColor: '#4B58B9',\n          borderRadius: '4rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 217\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"stuppUser.formadd.file\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 226\n        }\n      }))), \" \", /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"files\",\n        className: \"btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 289\n        }\n      }, this.state.inputText), /*#__PURE__*/React.createElement(\"input\", {\n        id: \"files\",\n        type: \"file\",\n        style: {\n          visibility: \"hidden\"\n        },\n        onChange: e => this.onDrop(e),\n        accept: \"application/pdf,image/*, application/txt\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 61\n        }\n      })))), /*#__PURE__*/React.createElement(CardBox, {\n        styleName: \"col-12\",\n        heading: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"modal.assign_homework\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 86\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 53\n        }\n      }, assignHomeworkList.map((val, index) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"row\",\n          key: index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-sm-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FormControl, {\n          className: \"w-100 mb-2\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 77\n          }\n        }, /*#__PURE__*/React.createElement(InputLabel, {\n          htmlFor: \"age-simple\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 81\n          }\n        }, /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"sidebar.classes\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 115\n          }\n        })), /*#__PURE__*/React.createElement(Select, {\n          required: true,\n          id: `${index}`,\n          onChange: event => this.assignClass(event, \"classId\", index),\n          name: \"classId\",\n          value: val.classId,\n          input: /*#__PURE__*/React.createElement(Input, {\n            id: \"classe\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 92\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 81\n          }\n        }, classesFiltredByLevel.map(itemClass => /*#__PURE__*/React.createElement(MenuItem, {\n          key: itemClass.id,\n          value: itemClass.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 89\n          }\n        }, itemClass.name))))), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"col-sm-5\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n          utils: DateFnsUtils,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 77\n          }\n        }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n          label: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"toDo.correctionDate\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 92\n            }\n          }),\n          fullWidth: true,\n          id: `${index}`,\n          name: \"correctionDate\",\n          value: val.correctionDate,\n          onChange: event => this.assignClass(event, \"correctionDate\", index),\n          format: \"dddd DD MMMM Y\",\n          autoOk: true,\n          minDate: new Date(),\n          minDateMessage: \"\",\n          required: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 81\n          }\n        }))));\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-sm-12 pt-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(\"font\", {\n        color: \"red\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 57\n        }\n      }, \"*\"), \" \", /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"component.required_fields\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 85\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12 text-left \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 529,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: \"jr-btn bg-indigo text-white \",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"button.modify\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 138\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"contained\",\n        className: \"jr-btn bg-grey text-white \",\n        onClick: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.establishments.formadd.buttonCancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 149\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 37\n      }\n    }))))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userProfile: state.auth.userProfile,\n    levels: state.ClassLevels.remoteLevels,\n    subjects: state.subject.remoteSubjects,\n    sections: state.classSections.remoteSections,\n    classes: state.classes,\n    subjectsProf: state.subject.subjectsProf,\n    subjectsProfessors: state.toDo.subjectsProfessors\n  };\n};\n\nexport default connect(mapStateToProps)(EditHomework);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Learning/routes/Homeworks/editHomework.js"],"names":["React","Modal","ModalBody","ModalHeader","IntlMessages","TextField","Button","Auxiliary","MenuItem","connect","editHomework","fetchProfessorBySubject","getName","InputLabel","classService","Can","RoleContext","_","KeyboardDatePicker","MuiPickersUtilsProvider","DateFnsUtils","CardBox","roleIdProfessor","roleIdAdmin","getSectionsByLevelId","subjectsByLevelBySection","getSubjectsForProf","getLevelsAndSubjectsForProf","FormControl","Select","Input","FormHelperText","EditHomework","Component","constructor","props","handleChangeProfessor","name","event","apiEndpoint","localStorage","token","target","value","get","then","res","classesListForProf","uniqBy","map","data","newClassesList","filter","element","level_id","state","setState","classesFiltredByLevel","assignNewClass","index","prevState","assignHomeworkList","id","handleChangeSubject","userProfile","role_id","listProfByEstablishment","subjectsProfessors","subject_id","professor_id","professorsList","handleChangeLevel","classes","levelId","sectionsDisable","dispatch","subjectList","subjects","handleChangeSection","sectionId","subjectsAffectedToProf","listSubject","dataSubjectsFiltred","forEach","item","dataFiltred","isEmpty","push","handleChange","handleSubmit","e","preventDefault","subjectError","professorError","date","Date","title","description","date_creation","files","homework","establishment_id","newFile","fileList","files_name","inputText","active","cancelModal","onDrop","file","previewVisible","subject","levels","modal","pictures","section_id","handleCancel","bind","toggle","assignClass","newList","objSubject","classId","correctionDate","_d","componentDidMount","response","classesList","homeworkClass","obj","indexOf","class_id","correction_date","componentDidUpdate","prevProps","subjectsProf","list","render","sections","role","level","section","option","professor","profile","user","surname","cursor","color","fontWeight","backgroundColor","borderRadius","visibility","val","itemClass","mapStateToProps","auth","ClassLevels","remoteLevels","remoteSubjects","classSections","remoteSections","toDo"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Auxiliary from \"../../../../../util/Auxiliary\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { connect } from \"react-redux\";\nimport { editHomework ,fetchProfessorBySubject} from '../../../../../actions/ToDo';\nimport { getName } from \"../../../../../actions/countriesAction\";\nimport InputLabel from '@material-ui/core/InputLabel';\nimport { classService } from \"../../../../../_services/class.service\";\nimport Can from '../../../../../can';\nimport { RoleContext } from '../../../../../Context';\nimport _ from \"lodash\";\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/moment';\nimport CardBox from '../../../../../components/CardBox/index';\nimport { roleIdProfessor, roleIdAdmin } from '../../../../../config/config';\nimport { getSectionsByLevelId } from \"../../../../../actions/sectionAction\";\nimport { subjectsByLevelBySection, getSubjectsForProf } from '../../../../../actions/subjectAction'\nimport { getLevelsAndSubjectsForProf } from '../../../../../actions/classLevelAction';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport FormHelperText from '@material-ui/core/FormHelperText';\n\n\nclass EditHomework extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            previewVisible: true,\n            title: '',\n            subject_id: '',\n            description: '',\n            professor_id: 0,\n            professorsList: [],\n            subject: [],\n            levels: [],\n            modal: false,\n            pictures: [],\n            file: null,\n            fileList: null,\n            inputText: '',\n            assignHomeworkList: [{ id: 0 }],\n            sectionsDisable: true,\n            level_id: 0,\n            subjectsAffectedToProf: [],\n            classes: [],\n            subjectList: [],\n            section_id: 0,\n            active: '',\n            subjectError: false,\n            professorError:false,\n            classesFiltredByLevel:[]\n        };\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.onDrop = this.onDrop.bind(this);\n        this.toggle = this.toggle.bind(this);\n        this.handleChangeLevel = this.handleChangeLevel.bind(this);\n        this.handleChangeSection = this.handleChangeSection.bind(this);\n        this.handleChangeSubject = this.handleChangeSubject.bind(this);\n        this.assignClass = this.assignClass.bind(this);\n        this.assignNewClass = this.assignNewClass.bind(this);\n        this.handleChangeProfessor = this.handleChangeProfessor.bind(this);\n    };\n    handleChangeProfessor= name => event => {\n        let apiEndpoint = `/classes_professors/?access_token=${localStorage.token}&filter[include][class]&filter[where][professor_id]=` + event.target.value;\n           classService.get(apiEndpoint)\n             .then(res => {\n              if(res){                  \n                 let classesListForProf= _.uniqBy(_.map(res.data, 'class'), 'id');                 \n                 let newClassesList = classesListForProf.filter(element => element.level_id === this.state.level_id)                 \n                 this.setState({classesFiltredByLevel:newClassesList})\n              }  \n             })\n         this.setState({\n             [name]: event.target.value,\n         });\n     }\n\n    assignNewClass = index => {\n        this.setState(prevState => ({\n            assignHomeworkList: [\n                ...prevState.assignHomeworkList,\n                {\n                    id: index\n\n                }\n            ]\n        }));\n    };\n\n    assignClass(event, name, index) {\n        if (name === \"classId\") {\n            let newList = this.state.assignHomeworkList.map(objSubject =>\n                objSubject.id === index\n                    ? { ...objSubject, classId: event.target.value }\n                    : objSubject\n            )\n            this.setState({ assignHomeworkList: newList })\n\n        } else {\n            let newList = this.state.assignHomeworkList.map(objSubject =>\n                objSubject.id === index\n                    ? { ...objSubject, correctionDate: event._d }\n                    : objSubject\n            )\n            this.setState({ assignHomeworkList: newList })\n\n        }\n    }\n\n    handleChangeSubject = name => event => {\n        this.setState({ [name]: event.target.value });\n        if (this.props.userProfile.role_id === roleIdAdmin) {\n            let listProfByEstablishment = this.props.subjectsProfessors.filter(element => element.subject_id === event.target.value)\n              this.setState({ professor_id: 0 , professorsList: listProfByEstablishment})\n         }\n    };\n\n    handleChangeLevel = name => event => {\n        let classesFiltredByLevel = this.state.classes.filter(element => element.level_id === event.target.value)\n        this.setState({ classesFiltredByLevel })\n\n        let levelId = event.target.value;\n        if (levelId > 10) {\n            this.setState({ sectionsDisable: false, subject_id: '' })\n        } else {\n            if (this.props.userProfile.role_id === roleIdProfessor) {\n                this.setState({ level_id: levelId, subject_id: '' });\n                this.props.dispatch(getSubjectsForProf(this.props.userProfile.id))\n            } else {\n                this.setState({ subjectList: subjectsByLevelBySection(this.props.subjects, levelId, 0), level_id: levelId, subject_id: '', professor_id:0 });\n            }\n\n        }\n        this.props.dispatch(getSectionsByLevelId(levelId))\n\n    }\n    handleChangeSection = name => event => {\n        let sectionId = event.target.value;\n        if (this.props.userProfile.role_id === roleIdProfessor) {\n            let data = this.state.subjectsAffectedToProf;\n            let listSubject = subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId);\n            let dataSubjectsFiltred = []\n            data.forEach(item => {\n                let dataFiltred = listSubject.filter(element => element.id === item)\n                if (!_.isEmpty(dataFiltred[0])) {\n                    dataSubjectsFiltred.push(dataFiltred[0])\n                }\n\n                this.setState({ subjectList: dataSubjectsFiltred });\n            });\n        } else {\n            this.setState({ subjectList: subjectsByLevelBySection(this.props.subjects, this.state.level_id, sectionId) })\n        }\n    }\n    componentDidMount() {\n        let data = this.props.homework\n         let apiEndpoint = `/subjects/${data.subject_id}?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint)\n            .then((response) => {\n                if (response) {\n                    let levelId = response.data.level_id;\n                    this.setState({ level_id: response.data.level_id, section_id: response.data.section_id })\n                    this.props.dispatch(getSectionsByLevelId(response.data.level_id))\n                    if (levelId > 10) {\n                        this.setState({ sectionsDisable: false })\n                    }\n                    if (this.props.userProfile.role_id === roleIdProfessor) {\n                        this.props.dispatch(getLevelsAndSubjectsForProf(this.props.userProfile.id))\n                        \n                        this.setState({ classes: this.props.classesList , classesFiltredByLevel:this.props.classesList })\n                    } else {\n                        let subjectList = this.props.subjects.filter(element => element.level_id === levelId)\n                        this.props.dispatch(fetchProfessorBySubject(this.props.userProfile.establishment_id));             \n                        this.setState({ classes: this.props.classes, levels: this.props.levels, subjectList: subjectList , classesFiltredByLevel:this.props.classes, professorsList : [data]})\n                    }\n                }\n            })\n\n\n        let homeworkClass = []\n        if (!_.isEmpty(data.homeworkClass)) {\n\n            data.homeworkClass.forEach(element => {\n                let obj = {\n                    'id': data.homeworkClass.indexOf(element),\n                    'classId': element.class_id,\n                    'correctionDate': element.correction_date\n                }\n                homeworkClass.push(obj)\n            });\n        } else {\n            homeworkClass = [{ id: 0 }];\n        }\n\n        this.setState({\n            title: data.title,\n            description: data.description,\n            professor_id: data.professor_id,\n            subject_id: data.subject_id,\n            assignHomeworkList: homeworkClass,\n            inputText: data.files_name,\n            active: data.active\n\n        })\n\n    }\n    componentDidUpdate(prevProps) {\n        if ((prevProps.levels !== this.props.levels)) {\n            this.setState({ levels: this.props.levels })\n        }\n        if ((prevProps.subjectsProf !== this.props.subjectsProf)) {\n            let list = this.props.subjectsProf.filter(element => element.level_id === this.state.level_id)\n            this.setState({ subjectList: list })\n        }\n    }\n    handleCancel() {\n        this.props.cancelModal();\n    };\n\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    };\n    handleChange = name => event => {\n        this.setState({\n            [name]: event.target.value,\n        });\n    }\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.subject_id === '') {\n            this.setState({ subjectError: true })\n        } else if (this.state.professor_id === 0) {\n            this.setState({ professorError: true })\n        }\n        else {\n            let date = new Date();\n            const title = this.state.title;\n            const description = this.state.description;\n            const date_creation = date;\n            const professor_id = this.state.professor_id;\n            const subject_id = this.state.subject_id;\n            let files = this.props.homework.files\n            const establishment_id = this.props.userProfile.establishment_id\n            const newFile = this.state.fileList\n            const files_name = this.state.inputText;\n            const id = this.props.homework.id\n            const assignHomeworkList = this.state.assignHomeworkList;\n            const active = this.state.active\n\n            const data = { id, active, title, files_name, description, date_creation, professor_id, subject_id, establishment_id, newFile, assignHomeworkList, files };\n            this.props.dispatch(editHomework(data, files));\n\n            this.setState({\n                title: '',\n                subject_id: 0,\n                description: '',\n                professor_id: 0,\n                assignHomeworkList: [{ id: 0 }]\n            });\n            this.props.cancelModal();\n        }\n    };\n\n    toggle() {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }));\n    }\n\n    onDrop = e => {\n        let file = e.target.files[0]\n        this.setState({\n            fileList: file,\n            inputText: file.name\n        });\n    };\n\n\n\n\n\n    render() {\n        let { sections } = this.props;\n        let { sectionsDisable, subjectList, assignHomeworkList, professorsList, classesFiltredByLevel, levels } = this.state;\n        return (\n            <Auxiliary>\n                <Modal isOpen={this.state.previewVisible}>\n                    <ModalHeader className=\"modal-box-header bg-primary text-white\"\n                        toggle={this.handleCancel}\n                    >\n                        {<IntlMessages id=\"modal.editToDo\" />}\n                    </ModalHeader>\n                    <ModalBody>\n                        <form onSubmit={this.handleSubmit}>\n                            <RoleContext.Consumer>\n                                {({ role }) => (\n                                    <Can\n                                        role={role}\n                                        perform=\"homework-filter:visit\"\n                                        yes={() => (\n                                            <div>\n                                                <CardBox styleName=\"col-lg-12 text-primary\" heading={<IntlMessages id=\"component.etablishments.info.general\" />} >\n                                                    <div className=\"row\">\n                                                        <div className=\"col-md-6\">\n\n                                                            <TextField\n                                                                id=\"level_id\"\n                                                                name=\"level_id\"\n                                                                select\n                                                                value={this.state.level_id}\n                                                                onChange={this.handleChangeLevel()}\n                                                                SelectProps={{}}\n                                                                label={<IntlMessages id=\"components.note.niveau\" />}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            >\n                                                                {levels.map((level) => (\n                                                                    <MenuItem key={level.id} value={level.id}>\n                                                                        {level.name}\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </TextField>\n\n                                                        </div>\n                                                        <div className=\"col-md-6\">\n\n                                                            <TextField\n                                                                id=\"section_id\"\n                                                                name=\"section_id\"\n                                                                select\n                                                                value={this.state.section_id}\n                                                                onChange={this.handleChangeSection()}\n                                                                disabled={sectionsDisable}\n                                                                SelectProps={{}}\n                                                                label={<IntlMessages id=\"components.class.level.input.label.section\" />}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            >\n                                                                {sections.map((section) => (\n                                                                    <MenuItem key={section.id} value={section.id}>\n                                                                        {section.name}\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </TextField>\n\n                                                        </div>\n                                                        <div className=\"col-sm-6\">\n                                                            <TextField\n                                                                required\n                                                                select\n                                                                id=\"subject_id\"\n                                                                name='subject_id'\n                                                                label={<IntlMessages id=\"sidebar.subjects\" />}\n                                                                error={this.state.subjectError}\n                                                                value={this.state.subject_id}\n                                                                onChange={this.handleChangeSubject('subject_id')}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            >\n                                                                {subjectList.map(subject => (\n                                                                    <MenuItem key={subject.id} value={subject.id}>\n                                                                        {getName(subject)}\n                                                                    </MenuItem>\n                                                                ))}\n                                                            </TextField>\n                                                            <FormHelperText error={this.state.subjectError}>\n                                                                {this.state.subjectError\n                                                                    ? <IntlMessages id=\"message.seclect.subject\" />\n                                                                    : ''}\n                                                            </FormHelperText>\n                                                        </div>\n                                                        <div className=\"col-sm-6\">\n                                                            <TextField\n                                                                required\n                                                                id=\"title\"\n                                                                label={<IntlMessages id=\"toDo.titre\" />}\n                                                                value={this.state.title}\n                                                                onChange={this.handleChange('title')}\n                                                                margin=\"normal\"\n                                                                fullWidth />\n                                                        </div>\n                                                        <Can\n                                                            role={role}\n                                                            perform=\"homework-filter-professor:visit\"\n                                                            yes={() => (\n                                                                <div className=\"col-md-6\">\n\n                                                                    <TextField\n                                                                        id=\"professor_id\"\n                                                                        name=\"professor_id\"\n                                                                        select\n                                                                        label={<IntlMessages id=\"toDo.professor\" />}\n                                                                        error={this.state.professorError}\n                                                                        value={this.state.professor_id}\n                                                                        onChange={this.handleChangeProfessor('professor_id')}\n                                                                        SelectProps={{}}\n                                                                        margin=\"normal\"\n                                                                        fullWidth\n                                                                    >\n                                                                        {professorsList.map((option) => (\n                                                                            <MenuItem\n                                                                                key={option.professor.id}\n                                                                                value={option.professor.id}\n                                                                            >\n                                                                                {option.professor.profile.user.name +\n                                                                                    ' ' +\n                                                                                    option.professor.profile.user.surname}\n                                                                            </MenuItem>\n                                                                        ))}\n                                                                    </TextField>\n                                                                    <FormHelperText error={this.state.professorError}>\n                                                                        {this.state.professorError\n                                                                            ? <IntlMessages id=\"message.error.seclect.professor\" />\n                                                                            : ''}\n                                                                    </FormHelperText>\n\n                                                                </div>\n\n                                                            )}\n                                                        />\n\n                                                        <div className=\"col-sm-12\">\n                                                            <TextField\n                                                                name='description'\n                                                                multiline\n                                                                rows={3}\n                                                                id=\"description\"\n                                                                variant=\"outlined\"\n                                                                label={<IntlMessages id=\"room.description\" />}\n                                                                onChange={this.handleChange('description')}\n                                                                value={this.state.description}\n                                                                margin=\"normal\"\n                                                                fullWidth\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </CardBox>\n\n                                                <CardBox styleName=\"col-lg-12 text-primary\" heading={<IntlMessages id=\"stuppUser.formadd.file\" />} >\n\n                                                    <div className=\"row\">\n                                                        <div className=\"col-sm-12 pt-3\">\n                                                            <InputLabel htmlFor=\"name-multiple\">{<IntlMessages id=\"components.homework.task\" />}</InputLabel> <br />\n                                                            <label htmlFor=\"files\" className=\"btn\" style={{ cursor: \"pointer\", color: \"white\", fontWeight: \"bold\", backgroundColor: '#4B58B9', borderRadius: '4rem' }} ><strong>{<IntlMessages id=\"stuppUser.formadd.file\" />}</strong></label> <label htmlFor=\"files\" className=\"btn\">{this.state.inputText}</label>\n                                                            <input id=\"files\" type=\"file\" style={{ visibility: \"hidden\" }} onChange={(e) => this.onDrop(e)} accept=\"application/pdf,image/*, application/txt\" />\n                                                        </div>\n                                                    </div>\n                                                </CardBox>\n                                                <CardBox styleName=\"col-12\" heading={<IntlMessages id=\"modal.assign_homework\" />} >\n                                                    <div >\n                                                        {\n                                                            assignHomeworkList.map((val, index) => {\n                                                                return (\n                                                                    <div className=\"row\" key={index}>\n                                                                        <div className=\"col-sm-5\">\n                                                                            <FormControl className=\"w-100 mb-2\">\n                                                                                <InputLabel htmlFor=\"age-simple\">{<IntlMessages id=\"sidebar.classes\" />}</InputLabel>\n                                                                                <Select\n                                                                                    required\n                                                                                    id={`${index}`}\n                                                                                    onChange={event =>\n                                                                                        this.assignClass(event, \"classId\", index)\n                                                                                    }\n                                                                                    name=\"classId\"\n                                                                                    value={val.classId}\n                                                                                    input={<Input id=\"classe\" />}\n                                                                                >\n                                                                                    {classesFiltredByLevel.map(itemClass => (\n                                                                                        <MenuItem key={itemClass.id} value={itemClass.id}>\n                                                                                            {itemClass.name}\n                                                                                        </MenuItem>\n                                                                                    ))}\n                                                                                </Select>\n                                                                            </FormControl>\n                                                                        </div>\n                                                                        <div className=\"col-sm-5\">\n\n                                                                            <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                                                                <KeyboardDatePicker\n                                                                                    label={<IntlMessages id=\"toDo.correctionDate\" />}\n                                                                                    fullWidth\n                                                                                    id={`${index}`}\n                                                                                    name=\"correctionDate\"\n                                                                                    value={val.correctionDate}\n                                                                                    onChange={event =>\n                                                                                        this.assignClass(event, \"correctionDate\", index)\n                                                                                    }\n                                                                                    format='dddd DD MMMM Y'\n                                                                                    autoOk\n                                                                                    minDate={new Date()}\n                                                                                    minDateMessage=''\n                                                                                    required\n                                                                                />\n                                                                            </MuiPickersUtilsProvider>\n                                                                        </div>\n\n\n                                                                        {/* <div className=\"col-sm-2\">\n                                                                            <Fab\n                                                                                size=\"small\"\n                                                                                value={`${index}`}\n                                                                                color=\"primary\"\n                                                                                aria-label=\"Add\"\n                                                                                onClick={() => this.assignNewClass(index + 1)}\n                                                                            >\n                                                                                <AddIcon />\n                                                                            </Fab>\n                                                                        </div> */}\n                                                                    </div>\n                                                                )\n                                                            })\n                                                        }\n                                                    </div>\n                                                </CardBox>\n                                                <div className=\"col-sm-12 pt-4\">\n                                                    <h4><font color=\"red\">*</font> {<IntlMessages id=\"component.required_fields\" />}</h4>\n                                                </div>\n                                                <div className=\"col-md-12 text-left \">\n                                                    <Button variant=\"contained\" className=\"jr-btn bg-indigo text-white \" type=\"submit\" >{<IntlMessages id=\"button.modify\" />}</Button>\n                                                    <Button variant=\"contained\" className=\"jr-btn bg-grey text-white \" onClick={this.handleCancel}>{<IntlMessages id=\"components.establishments.formadd.buttonCancel\" />}</Button>\n                                                </div>\n                                            </div>\n\n                                        )}\n                                    />\n                                )}\n                            </RoleContext.Consumer>\n                        </form>\n                    </ModalBody>\n\n                </Modal>\n            </Auxiliary>\n\n        )\n    };\n}\nconst mapStateToProps = (state) => {\n    return {\n        userProfile: state.auth.userProfile,\n        levels: state.ClassLevels.remoteLevels,\n        subjects: state.subject.remoteSubjects,\n        sections: state.classSections.remoteSections,\n        classes: state.classes,\n        subjectsProf: state.subject.subjectsProf,\n        subjectsProfessors: state.toDo.subjectsProfessors\n    }\n}\nexport default connect(mapStateToProps)(EditHomework);\n\n"]},"metadata":{},"sourceType":"module"}