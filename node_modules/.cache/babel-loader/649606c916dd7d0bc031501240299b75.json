{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap-pro/educap-pro-front/src/reducers/Mail.js\";\nimport { FETCH_ALL_MAIL_SUCCESS, GET_IMPORTANT_MAIL, GET_NAV_FILTERS, GET_NAV_FOLDER, GET_NAV_LABELS, GET_READ_MAIL, GET_STARRED_MAIL, GET_UNIMPORTANT_MAIL, GET_UNREAD_MAIL, GET_UNSELECTED_ALL_MAIL, GET_UNSTARRED_MAIL, HANDLE_REQUEST_CLOSE, ON_ALL_MAIL_SELECT, ON_COMPOSE_MAIL, ON_DELETE_MAIL, ON_FOLDER_MENU_ITEM_SELECT, ON_FOLDER_SELECT, ON_HIDE_LOADER, ON_IMPORTANT_SELECT, ON_LABEL_MENU_ITEM_SELECT, ON_LABEL_SELECT, ON_MAIL_CHECKED, ON_MAIL_SELECT, ON_MAIL_SEND, ON_OPTION_MENU_SELECT, ON_START_SELECT, ON_TOGGLE_DRAWER, SEARCH_MAIL, SET_CURRENT_MAIL_NULL, SHOW_MESSAGE, UPDATE_SEARCH } from \"../constants/ActionTypes\"; //import mails from '../app/routes/Mail/data/mails';\n\nimport React from \"react\";\nimport IntlMessages from \"../util/IntlMessages\";\nconst INIT_STATE = {\n  searchMail: \"\",\n  noContentFoundMessage: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"mail.message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 26\n    }\n  }),\n  alertMessage: \"\",\n  showMessage: false,\n  drawerState: false,\n  anchorEl: null,\n  // allMail: [], only for prod\n  allMail: [],\n  optionName: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"autocomplete.ordre\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }),\n  loader: true,\n  currentMail: null,\n  user: {\n    name: \"Robert Johnson\",\n    email: \"robert@example.com\",\n    avatar: \"https://via.placeholder.com/150x150\"\n  },\n  selectedMails: 0,\n  selectedFolder: 0,\n  composeMail: false,\n  labelMenuState: false,\n  folderMenuState: false,\n  optionMenuState: false,\n  mailSender: null // folderMails: [], //only for prod\n  //folderMails: mails.filter(mail => mail.folder === 0)\n\n};\nexport default ((state = INIT_STATE, action) => {\n  switch (action.type) {\n    // case GET_ALL_MAIL: {\n    //   let mails = state.allMail.map((mail) => mail.folder === state.selectedFolder ? {\n    //     ...mail,\n    //     selected: true\n    //   } : mail);\n    //   return {\n    //     ...state,\n    //     selectedMails: mails.length,\n    //     optionName: 'All',\n    //     allMail: mails,\n    //     folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n    //   }\n    // }\n    case FETCH_ALL_MAIL_SUCCESS:\n      {\n        return { ...state,\n          loader: false,\n          // allMail: action.payload,\n          folderMails: action.payload\n        };\n      }\n\n    case GET_IMPORTANT_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (mail.important) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          optionName: \"Important\",\n          // allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_NAV_FILTERS:\n      {\n        const filterMails = state.allMail.filter(mail => {\n          if (action.payload.id === 0 && mail.starred) {\n            return mail;\n          } else if (action.payload.id === 1 && mail.important) {\n            return mail;\n          } else return mail;\n        });\n        return { ...state,\n          noContentFoundMessage: \"No mail found in selected filter\",\n          loader: true,\n          folderMails: filterMails\n        };\n      }\n\n    case ON_FOLDER_SELECT:\n      {\n        return { ...state,\n          folderMenuState: !state.folderMenuState\n        };\n      }\n\n    case GET_NAV_LABELS:\n      {\n        const filterMails = state.allMail.filter(mail => mail.labels.includes(action.payload.id));\n        return { ...state,\n          loader: true,\n          noContentFoundMessage: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"mail.message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 32\n            }\n          }),\n          folderMails: filterMails\n        };\n      }\n\n    case GET_READ_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (mail.read) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: \"Read\",\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_STARRED_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (mail.starred) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: \"Stared\",\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNIMPORTANT_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (!mail.important) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: \"Unimportant\",\n          noContentFoundMessage: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"mail.message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 32\n            }\n          }),\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNREAD_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (!mail.read) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          allMail: mails,\n          optionName: \"Unread\",\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNSELECTED_ALL_MAIL:\n      {\n        let mails = state.allMail.map(mail => mail.folder === state.selectedFolder ? { ...mail,\n          selected: false\n        } : mail);\n        return { ...state,\n          selectedMails: 0,\n          optionName: \"None\",\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case GET_UNSTARRED_MAIL:\n      {\n        let selectedMail = 0;\n        let mails = state.allMail.filter(mail => mail.folder === state.selectedFolder);\n        mails = mails.map(mail => {\n          if (!mail.starred) {\n            selectedMail++;\n            return { ...mail,\n              selected: true\n            };\n          }\n\n          return { ...mail,\n            selected: false\n          };\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          optionName: \"UnStarred\",\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case HANDLE_REQUEST_CLOSE:\n      {\n        return { ...state,\n          composeMail: false,\n          showMessage: false,\n          folderMenuState: false,\n          labelMenuState: false,\n          optionMenuState: false\n        };\n      }\n\n    case ON_ALL_MAIL_SELECT:\n      {\n        return { ...state\n        };\n      }\n\n    case ON_FOLDER_MENU_ITEM_SELECT:\n      {\n        const mails = state.allMail.map(mail => mail.selected && mail.folder === state.selectedFolder ? { ...mail,\n          folder: action.payload,\n          selected: false\n        } : mail);\n        return { ...state,\n          selectedMails: 0,\n          allMail: mails,\n          noContentFoundMessage: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"mail.message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 32\n            }\n          }),\n          alertMessage: \"Mail has been moved successfully\",\n          showMessage: true,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case ON_IMPORTANT_SELECT:\n      {\n        action.payload.important = !action.payload.important;\n        return { ...state,\n          alertMessage: action.payload.important ? \"Mail Mark as Important\" : \"Mail Remove as Important\",\n          showMessage: true,\n          folderMails: state.folderMails.map(mail => mail.id === action.payload.id ? action.payload : mail)\n        };\n      }\n\n    case ON_LABEL_MENU_ITEM_SELECT:\n      {\n        let currentMail = state.currentMail;\n        const mails = state.allMail.map(mail => {\n          if (mail.selected && mail.folder === state.selectedFolder) {\n            if (mail.labels.includes(action.payload.id)) {\n              mail.labels.splice(mail.labels.indexOf(action.payload.id), 1);\n\n              if (currentMail !== null && mail.id === currentMail.id) {\n                currentMail.labels = mail.labels;\n              }\n\n              return { ...mail,\n                labels: mail.labels\n              };\n            } else {\n              mail.labels = mail.labels.concat(action.payload.id);\n\n              if (currentMail !== null && mail.id === currentMail.id) {\n                currentMail.labels = mail.labels;\n              }\n\n              return { ...mail,\n                labels: mail.labels\n              };\n            }\n          } else {\n            return mail;\n          }\n        });\n        return { ...state,\n          currentMail: currentMail,\n          noContentFoundMessage: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"mail.message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 32\n            }\n          }),\n          alertMessage: \"Label Updated Successfully\",\n          showMessage: true,\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case ON_LABEL_SELECT:\n      {\n        return { ...state,\n          labelMenuState: !state.labelMenuState\n        };\n      }\n\n    case ON_MAIL_CHECKED:\n      {\n        action.payload.selected = !action.payload.selected;\n        let selectedMail = 0;\n        const mails = state.folderMails.map(mail => {\n          if (mail.selected) {\n            selectedMail++;\n          }\n\n          if (mail.id === action.payload.id) {\n            if (mail.selected) {\n              selectedMail++;\n            }\n\n            return action.payload;\n          } else {\n            return mail;\n          }\n        });\n        return { ...state,\n          selectedMails: selectedMail,\n          folderMails: mails\n        };\n      }\n\n    case ON_MAIL_SELECT:\n      {\n        return { ...state,\n          loader: true,\n          currentMail: action.payload\n        };\n      }\n\n    case ON_MAIL_SEND:\n      {\n        return { ...state,\n          alertMessage: \"Mail Sent Successfully\",\n          showMessage: true //folderMails: state.allMail.concat(action.payload),\n          //allMail: state.allMail.concat(action.payload)\n\n        };\n      }\n\n    case ON_OPTION_MENU_SELECT:\n      {\n        return { ...state,\n          optionMenuState: !state.optionMenuState\n        };\n      }\n\n    case GET_NAV_FOLDER:\n      {\n        // const filterMails = state.folderMails.filter(mail => mail.folder === action.payload.id);\n        return { ...state,\n          selectedFolder: action.payload.id,\n          noContentFoundMessage: /*#__PURE__*/React.createElement(IntlMessages, {\n            id: \"mail.message\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 32\n            }\n          }),\n          currentMail: null,\n          loader: true,\n          folderMails: action.payload.data\n        };\n      }\n\n    case ON_START_SELECT:\n      {\n        action.payload.starred = !action.payload.starred;\n        return { ...state,\n          alertMessage: action.payload.starred ? \"Mail Mark as Star\" : \"Mail Remove as Star\",\n          showMessage: true,\n          folderMails: state.folderMails.map(mail => mail.id === action.payload.id ? action.payload : mail)\n        };\n      }\n\n    case SEARCH_MAIL:\n      {\n        if (action.payload === \"\") {\n          return { ...state,\n            folderMails: state.allMail.filter(mail => !mail.deleted)\n          };\n        } else {\n          const searchMails = state.allMail.filter(mail => !mail.deleted && mail.subject.toLowerCase().indexOf(action.payload.toLowerCase()) > -1);\n          return { ...state,\n            folderMails: searchMails\n          };\n        }\n      }\n\n    case UPDATE_SEARCH:\n      {\n        return { ...state,\n          searchMail: action.payload\n        };\n      }\n\n    case ON_HIDE_LOADER:\n      {\n        return { ...state,\n          loader: false\n        };\n      }\n\n    case ON_TOGGLE_DRAWER:\n      {\n        return { ...state,\n          drawerState: !state.drawerState\n        };\n      }\n\n    case SET_CURRENT_MAIL_NULL:\n      {\n        return { ...state,\n          currentMail: null\n        };\n      }\n\n    case ON_DELETE_MAIL:\n      {\n        const mails = state.allMail.map(mail => mail.selected && mail.folder === state.selectedFolder ? { ...mail,\n          folder: 4,\n          selected: false\n        } : mail);\n        return { ...state,\n          alertMessage: \"Mail Deleted Successfully\",\n          showMessage: true,\n          selectedMails: 0,\n          allMail: mails,\n          folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n        };\n      }\n\n    case ON_COMPOSE_MAIL:\n      {\n        return { ...state,\n          composeMail: true\n        };\n      }\n\n    case SHOW_MESSAGE:\n      {\n        return { ...state,\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        };\n      }\n\n    case \"MAIL_NOT_FOUND\":\n      {\n        return { ...state,\n          alertMessage: action.payload,\n          showMessage: true,\n          loader: false\n        };\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/oem/Documents/projects/educap-pro/educap-pro-front/src/reducers/Mail.js"],"names":["FETCH_ALL_MAIL_SUCCESS","GET_IMPORTANT_MAIL","GET_NAV_FILTERS","GET_NAV_FOLDER","GET_NAV_LABELS","GET_READ_MAIL","GET_STARRED_MAIL","GET_UNIMPORTANT_MAIL","GET_UNREAD_MAIL","GET_UNSELECTED_ALL_MAIL","GET_UNSTARRED_MAIL","HANDLE_REQUEST_CLOSE","ON_ALL_MAIL_SELECT","ON_COMPOSE_MAIL","ON_DELETE_MAIL","ON_FOLDER_MENU_ITEM_SELECT","ON_FOLDER_SELECT","ON_HIDE_LOADER","ON_IMPORTANT_SELECT","ON_LABEL_MENU_ITEM_SELECT","ON_LABEL_SELECT","ON_MAIL_CHECKED","ON_MAIL_SELECT","ON_MAIL_SEND","ON_OPTION_MENU_SELECT","ON_START_SELECT","ON_TOGGLE_DRAWER","SEARCH_MAIL","SET_CURRENT_MAIL_NULL","SHOW_MESSAGE","UPDATE_SEARCH","React","IntlMessages","INIT_STATE","searchMail","noContentFoundMessage","alertMessage","showMessage","drawerState","anchorEl","allMail","optionName","loader","currentMail","user","name","email","avatar","selectedMails","selectedFolder","composeMail","labelMenuState","folderMenuState","optionMenuState","mailSender","state","action","type","folderMails","payload","selectedMail","mails","filter","mail","folder","map","important","selected","filterMails","id","starred","labels","includes","read","splice","indexOf","concat","data","deleted","searchMails","subject","toLowerCase"],"mappings":"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","sourcesContent":["import {\n  FETCH_ALL_MAIL_SUCCESS,\n  GET_IMPORTANT_MAIL,\n  GET_NAV_FILTERS,\n  GET_NAV_FOLDER,\n  GET_NAV_LABELS,\n  GET_READ_MAIL,\n  GET_STARRED_MAIL,\n  GET_UNIMPORTANT_MAIL,\n  GET_UNREAD_MAIL,\n  GET_UNSELECTED_ALL_MAIL,\n  GET_UNSTARRED_MAIL,\n  HANDLE_REQUEST_CLOSE,\n  ON_ALL_MAIL_SELECT,\n  ON_COMPOSE_MAIL,\n  ON_DELETE_MAIL,\n  ON_FOLDER_MENU_ITEM_SELECT,\n  ON_FOLDER_SELECT,\n  ON_HIDE_LOADER,\n  ON_IMPORTANT_SELECT,\n  ON_LABEL_MENU_ITEM_SELECT,\n  ON_LABEL_SELECT,\n  ON_MAIL_CHECKED,\n  ON_MAIL_SELECT,\n  ON_MAIL_SEND,\n  ON_OPTION_MENU_SELECT,\n  ON_START_SELECT,\n  ON_TOGGLE_DRAWER,\n  SEARCH_MAIL,\n  SET_CURRENT_MAIL_NULL,\n  SHOW_MESSAGE,\n  UPDATE_SEARCH\n} from \"../constants/ActionTypes\";\n//import mails from '../app/routes/Mail/data/mails';\nimport React from \"react\";\nimport IntlMessages from \"../util/IntlMessages\";\n\nconst INIT_STATE = {\n  searchMail: \"\",\n  noContentFoundMessage: <IntlMessages id=\"mail.message\" />,\n  alertMessage: \"\",\n  showMessage: false,\n  drawerState: false,\n  anchorEl: null,\n  // allMail: [], only for prod\n  allMail: [],\n  optionName: <IntlMessages id=\"autocomplete.ordre\" />,\n  loader: true,\n  currentMail: null,\n  user: {\n    name: \"Robert Johnson\",\n    email: \"robert@example.com\",\n    avatar: \"https://via.placeholder.com/150x150\"\n  },\n  selectedMails: 0,\n  selectedFolder: 0,\n  composeMail: false,\n  labelMenuState: false,\n  folderMenuState: false,\n  optionMenuState: false,\n  mailSender: null\n  // folderMails: [], //only for prod\n  //folderMails: mails.filter(mail => mail.folder === 0)\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    // case GET_ALL_MAIL: {\n    //   let mails = state.allMail.map((mail) => mail.folder === state.selectedFolder ? {\n    //     ...mail,\n    //     selected: true\n    //   } : mail);\n    //   return {\n    //     ...state,\n    //     selectedMails: mails.length,\n    //     optionName: 'All',\n    //     allMail: mails,\n    //     folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n    //   }\n    // }\n    case FETCH_ALL_MAIL_SUCCESS: {\n      return {\n        ...state,\n        loader: false,\n        // allMail: action.payload,\n        folderMails: action.payload\n      };\n    }\n    case GET_IMPORTANT_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(\n        mail => mail.folder === state.selectedFolder\n      );\n      mails = mails.map(mail => {\n        if (mail.important) {\n          selectedMail++;\n          return { ...mail, selected: true };\n        }\n        return { ...mail, selected: false };\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        optionName: \"Important\",\n        // allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case GET_NAV_FILTERS: {\n      const filterMails = state.allMail.filter(mail => {\n        if (action.payload.id === 0 && mail.starred) {\n          return mail;\n        } else if (action.payload.id === 1 && mail.important) {\n          return mail;\n        } else return mail;\n      });\n      return {\n        ...state,\n        noContentFoundMessage: \"No mail found in selected filter\",\n        loader: true,\n        folderMails: filterMails\n      };\n    }\n    case ON_FOLDER_SELECT: {\n      return { ...state, folderMenuState: !state.folderMenuState };\n    }\n    case GET_NAV_LABELS: {\n      const filterMails = state.allMail.filter(mail =>\n        mail.labels.includes(action.payload.id)\n      );\n      return {\n        ...state,\n        loader: true,\n        noContentFoundMessage: <IntlMessages id=\"mail.message\" />,\n        folderMails: filterMails\n      };\n    }\n    case GET_READ_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(\n        mail => mail.folder === state.selectedFolder\n      );\n      mails = mails.map(mail => {\n        if (mail.read) {\n          selectedMail++;\n          return { ...mail, selected: true };\n        }\n        return { ...mail, selected: false };\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: \"Read\",\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case GET_STARRED_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(\n        mail => mail.folder === state.selectedFolder\n      );\n      mails = mails.map(mail => {\n        if (mail.starred) {\n          selectedMail++;\n          return { ...mail, selected: true };\n        }\n        return { ...mail, selected: false };\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: \"Stared\",\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case GET_UNIMPORTANT_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(\n        mail => mail.folder === state.selectedFolder\n      );\n      mails = mails.map(mail => {\n        if (!mail.important) {\n          selectedMail++;\n          return { ...mail, selected: true };\n        }\n        return { ...mail, selected: false };\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: \"Unimportant\",\n        noContentFoundMessage: <IntlMessages id=\"mail.message\" />,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case GET_UNREAD_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(\n        mail => mail.folder === state.selectedFolder\n      );\n      mails = mails.map(mail => {\n        if (!mail.read) {\n          selectedMail++;\n          return { ...mail, selected: true };\n        }\n        return { ...mail, selected: false };\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        allMail: mails,\n        optionName: \"Unread\",\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case GET_UNSELECTED_ALL_MAIL: {\n      let mails = state.allMail.map(mail =>\n        mail.folder === state.selectedFolder\n          ? {\n              ...mail,\n              selected: false\n            }\n          : mail\n      );\n      return {\n        ...state,\n        selectedMails: 0,\n        optionName: \"None\",\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case GET_UNSTARRED_MAIL: {\n      let selectedMail = 0;\n      let mails = state.allMail.filter(\n        mail => mail.folder === state.selectedFolder\n      );\n      mails = mails.map(mail => {\n        if (!mail.starred) {\n          selectedMail++;\n          return { ...mail, selected: true };\n        }\n        return { ...mail, selected: false };\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        optionName: \"UnStarred\",\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case HANDLE_REQUEST_CLOSE: {\n      return {\n        ...state,\n        composeMail: false,\n        showMessage: false,\n        folderMenuState: false,\n        labelMenuState: false,\n        optionMenuState: false\n      };\n    }\n    case ON_ALL_MAIL_SELECT: {\n      return { ...state };\n    }\n    case ON_FOLDER_MENU_ITEM_SELECT: {\n      const mails = state.allMail.map(mail =>\n        mail.selected && mail.folder === state.selectedFolder\n          ? { ...mail, folder: action.payload, selected: false }\n          : mail\n      );\n\n      return {\n        ...state,\n        selectedMails: 0,\n        allMail: mails,\n        noContentFoundMessage: <IntlMessages id=\"mail.message\" />,\n        alertMessage: \"Mail has been moved successfully\",\n        showMessage: true,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case ON_IMPORTANT_SELECT: {\n      action.payload.important = !action.payload.important;\n      return {\n        ...state,\n        alertMessage: action.payload.important\n          ? \"Mail Mark as Important\"\n          : \"Mail Remove as Important\",\n        showMessage: true,\n        folderMails: state.folderMails.map(mail =>\n          mail.id === action.payload.id ? action.payload : mail\n        )\n      };\n    }\n    case ON_LABEL_MENU_ITEM_SELECT: {\n      let currentMail = state.currentMail;\n      const mails = state.allMail.map(mail => {\n        if (mail.selected && mail.folder === state.selectedFolder) {\n          if (mail.labels.includes(action.payload.id)) {\n            mail.labels.splice(mail.labels.indexOf(action.payload.id), 1);\n            if (currentMail !== null && mail.id === currentMail.id) {\n              currentMail.labels = mail.labels;\n            }\n            return { ...mail, labels: mail.labels };\n          } else {\n            mail.labels = mail.labels.concat(action.payload.id);\n            if (currentMail !== null && mail.id === currentMail.id) {\n              currentMail.labels = mail.labels;\n            }\n            return { ...mail, labels: mail.labels };\n          }\n        } else {\n          return mail;\n        }\n      });\n\n      return {\n        ...state,\n        currentMail: currentMail,\n        noContentFoundMessage: <IntlMessages id=\"mail.message\" />,\n        alertMessage: \"Label Updated Successfully\",\n        showMessage: true,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case ON_LABEL_SELECT: {\n      return { ...state, labelMenuState: !state.labelMenuState };\n    }\n    case ON_MAIL_CHECKED: {\n      action.payload.selected = !action.payload.selected;\n      let selectedMail = 0;\n      const mails = state.folderMails.map(mail => {\n        if (mail.selected) {\n          selectedMail++;\n        }\n        if (mail.id === action.payload.id) {\n          if (mail.selected) {\n            selectedMail++;\n          }\n          return action.payload;\n        } else {\n          return mail;\n        }\n      });\n      return {\n        ...state,\n        selectedMails: selectedMail,\n        folderMails: mails\n      };\n    }\n\n    case ON_MAIL_SELECT: {\n      return {\n        ...state,\n        loader: true,\n        currentMail: action.payload\n      };\n    }\n    case ON_MAIL_SEND: {\n      return {\n        ...state,\n        alertMessage: \"Mail Sent Successfully\",\n        showMessage: true\n        //folderMails: state.allMail.concat(action.payload),\n        //allMail: state.allMail.concat(action.payload)\n      };\n    }\n    case ON_OPTION_MENU_SELECT: {\n      return { ...state, optionMenuState: !state.optionMenuState };\n    }\n    case GET_NAV_FOLDER: {\n      // const filterMails = state.folderMails.filter(mail => mail.folder === action.payload.id);\n      return {\n        ...state,\n        selectedFolder: action.payload.id,\n        noContentFoundMessage: <IntlMessages id=\"mail.message\" />,\n        currentMail: null,\n        loader: true,\n        folderMails: action.payload.data\n      };\n    }\n\n    case ON_START_SELECT: {\n      action.payload.starred = !action.payload.starred;\n      return {\n        ...state,\n        alertMessage: action.payload.starred\n          ? \"Mail Mark as Star\"\n          : \"Mail Remove as Star\",\n        showMessage: true,\n        folderMails: state.folderMails.map(mail =>\n          mail.id === action.payload.id ? action.payload : mail\n        )\n      };\n    }\n\n    case SEARCH_MAIL: {\n      if (action.payload === \"\") {\n        return {\n          ...state,\n          folderMails: state.allMail.filter(mail => !mail.deleted)\n        };\n      } else {\n        const searchMails = state.allMail.filter(\n          mail =>\n            !mail.deleted &&\n            mail.subject.toLowerCase().indexOf(action.payload.toLowerCase()) >\n              -1\n        );\n        return {\n          ...state,\n          folderMails: searchMails\n        };\n      }\n    }\n\n    case UPDATE_SEARCH: {\n      return { ...state, searchMail: action.payload };\n    }\n    case ON_HIDE_LOADER: {\n      return { ...state, loader: false };\n    }\n    case ON_TOGGLE_DRAWER: {\n      return { ...state, drawerState: !state.drawerState };\n    }\n    case SET_CURRENT_MAIL_NULL: {\n      return { ...state, currentMail: null };\n    }\n    case ON_DELETE_MAIL: {\n      const mails = state.allMail.map(mail =>\n        mail.selected && mail.folder === state.selectedFolder\n          ? { ...mail, folder: 4, selected: false }\n          : mail\n      );\n\n      return {\n        ...state,\n        alertMessage: \"Mail Deleted Successfully\",\n        showMessage: true,\n        selectedMails: 0,\n        allMail: mails,\n        folderMails: mails.filter(mail => mail.folder === state.selectedFolder)\n      };\n    }\n    case ON_COMPOSE_MAIL: {\n      return { ...state, composeMail: true };\n    }\n    case SHOW_MESSAGE: {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      };\n    }\n    case \"MAIL_NOT_FOUND\": {\n      return {\n        ...state,\n        alertMessage: action.payload,\n        showMessage: true,\n        loader: false\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}