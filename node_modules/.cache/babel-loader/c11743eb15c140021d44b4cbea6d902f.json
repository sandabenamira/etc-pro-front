{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Calendar/routes/Planning/Planning.js\";\nimport React from 'react';\nimport '../../../../../styles/app.scss';\nimport './Calendar.css';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport AddEvent from './AddEvent';\nimport PlanningCalendar from './PlanningCalendar';\nimport { getClasses } from '../../../../../actions/classeAction';\nimport { getRooms } from '../../../../../actions/roomAction';\nimport { connect } from 'react-redux';\nimport { getEstablishment } from '../../../../../actions/establishmentAction';\nimport { getSubject } from '../../../../../actions/subjectAction';\nimport { getData as getProfessors } from '../../../../../actions/professorAction';\nimport { addEvent, getEventsByClass, handleEventRequestClose } from '../../../../../actions/planningActions';\nimport { getLevels } from '../../../../../actions/classLevelAction';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { classService } from '../../../../../_services/class.service';\nimport { subjectsByLevelBySection } from '../../../../../actions/subjectAction';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { removeEventList } from \"../../../../../actions/planningActions\";\nimport EditEvent from './EditEvent';\n\nclass Planning extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeClasse = name => event => {\n      if (event.target.value) {\n        if (this.props.userProfile.role_id !== 1) {// let filter = { where: { establishment_id: this.props.userProfile.establishment_id } };\n          // let apiEndpoint = `/rooms/get-disposable-rooms/` + this.props.userProfile.establishment_id + `?access_token=${localStorage.token}`;\n          // classService.get(apiEndpoint)\n          //   .then((response) => {\n          //     this.setState({\n          //       classrooms: response.data.rooms, establishment: this.props.userProfile.establishment_id\n          //     })\n          //   }).catch((err) => {\n          //   })\n        }\n\n        let classe = this.state.establishmentClass.find(({\n          id\n        }) => id === event.target.value);\n        let subjectListByLevel = subjectsByLevelBySection(this.props.subjects, classe.level_id, 0);\n        let apiEndpoint = `/classes_professors?access_token=${localStorage.token}&filter[where][class_id]=` + parseInt(event.target.value) + `&filter[include][professor][profile][user]`;\n        classService.get(apiEndpoint).then(res => {\n          this.setState({\n            establishmentProfessor: res.data,\n            classe: classe,\n            subjectListByLevel: subjectListByLevel\n          });\n        });\n        this.getEventsClass(event.target.value);\n      } else {\n        this.setState({\n          classe: ''\n        });\n      }\n    };\n\n    this.handleChange = name => event => {\n      let classrooms = this.props.rooms.filter(({\n        establishment_id\n      }) => establishment_id === event.target.value);\n      let establishmentClass = this.props.classes.filter(classe => classe.establishment_id === event.target.value);\n      this.setState({\n        [name]: event.target.value,\n        establishmentClass: establishmentClass,\n        events: [],\n        classe: '',\n        classrooms: classrooms\n      });\n    };\n\n    this.onConfirm = () => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.handleRequestClose = () => {\n      this.props.dispatch(handleEventRequestClose());\n    };\n\n    this.state = {\n      modal: false,\n      startHours: '',\n      endHours: '',\n      slotInfo: '',\n      eventList: [],\n      classrooms: [],\n      classe: {},\n      establishment: '',\n      establishmentClass: [],\n      establishmentProfessor: [],\n      subjectListByLevel: [],\n      show: false,\n      modalEdit: false\n    };\n    this.addLesson = this.addLesson.bind(this);\n    this.annuleModal = this.annuleModal.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChangeClasse = this.handleChangeClasse.bind(this);\n    this.getEventsClass = this.getEventsClass.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.edit = this.edit.bind(this);\n    this.closeEdit = this.closeEdit.bind(this);\n  }\n\n  addLesson(slotInfo) {\n    if (_.isEmpty(this.state.classe)) {\n      this.setState({\n        show: true\n      });\n    } else {\n      const startHours = moment(slotInfo.start);\n      const endHours = moment(slotInfo.end);\n\n      if (this.props.userProfile.role_id !== 1) {\n        let params = {\n          startHours: startHours,\n          endHours: endHours,\n          establishmentId: this.props.userProfile.establishment_id,\n          classe: this.state.classe.id\n        };\n        let apiEndpoint = `/rooms/get-disposable-rooms/${JSON.stringify(params)}?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint).then(response => {\n          this.setState({\n            classrooms: response.data.rooms,\n            establishment: this.props.userProfile.establishment_id\n          });\n        }).catch(err => {});\n      }\n\n      this.setState({\n        modal: true,\n        startHours: startHours,\n        endHours: endHours,\n        slotInfo: slotInfo,\n        eventList: []\n      });\n    }\n  }\n\n  UNSAFE_componentWillMount() {\n    this.props.dispatch(getClasses());\n    this.props.dispatch(getEstablishment());\n    this.props.dispatch(getSubject());\n    this.props.dispatch(getProfessors());\n    this.props.dispatch(getLevels());\n    this.props.dispatch(getRooms());\n\n    if (this.props.userProfile.role_id !== 1) {\n      let filter = {\n        where: {\n          establishment_id: this.props.userProfile.establishment_id\n        }\n      };\n      let apiEndpoint = `/classes?access_token=${localStorage.token}&filter=` + JSON.stringify(filter);\n      classService.get(apiEndpoint).then(response => {\n        let activeClass = response.data.filter(classInfo => classInfo.status);\n        this.setState({\n          establishmentClass: activeClass\n        });\n      }).catch(err => {});\n    }\n  }\n\n  getEventsClass(id) {\n    this.props.dispatch(getEventsByClass(id));\n  }\n\n  handleSubmit(data) {\n    const event = {\n      start_date_generic_event: data.startHours,\n      end_date_generic_event: data.endHours,\n      event_type: data.event_type,\n      frequency: data.frequency,\n      class_id: this.state.classe.id,\n      professor_id: data.professorId,\n      establishment_id: this.state.establishment,\n      subject_id: data.subjectId,\n      room_id: data.room\n    };\n    this.props.dispatch(addEvent(event));\n    this.setState({\n      modal: false\n    });\n  }\n\n  annuleModal() {\n    this.setState({\n      modal: false\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.dispatch(removeEventList());\n  }\n\n  edit(event) {\n    let params = {\n      startHours: moment(event.start).format(\"YYYY-MM-DD HH:mm:ss\"),\n      endHours: moment(event.end).format(\"YYYY-MM-DD HH:mm:ss\"),\n      establishmentId: this.props.userProfile.establishment_id,\n      classe: this.state.classe.id\n    };\n    let apiEndpoint = `/rooms/get-disposable-rooms/${JSON.stringify(params)}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      this.setState({\n        classrooms: response.data.rooms,\n        establishment: this.props.userProfile.establishment_id\n      });\n    }).catch(err => {});\n    this.setState({\n      modalEdit: true,\n      event: event\n    });\n  }\n\n  closeEdit() {\n    this.setState({\n      modalEdit: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"animated slideInUpTiny animation-duration-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PlanningCalendar, {\n      events: this.props.events,\n      rooms: this.props.rooms,\n      subjects: this.props.subjects,\n      match: this.props.match,\n      userProfile: this.props.userProfile,\n      addLesson: this.addLesson,\n      classes: this.props.classes,\n      establishments: this.props.establishments,\n      establishment: this.state.establishment,\n      handleChangeClasse: this.handleChangeClasse,\n      handleChange: this.handleChange,\n      establishmentClass: this.state.establishmentClass,\n      establishmentProfessor: this.state.establishmentProfessor,\n      startTime: this.props.startTime,\n      endTime: this.props.endTime,\n      appLang: this.props.settings,\n      edit: this.edit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }), this.state.modal ? /*#__PURE__*/React.createElement(AddEvent, {\n      modal: this.state.modal,\n      startDateLesson: this.state.startHours,\n      endDateLesson: this.state.endHours,\n      annuleModal: this.annuleModal,\n      handleSubmit: this.handleSubmit,\n      classrooms: this.state.classrooms,\n      establishmentProfessor: this.state.establishmentProfessor,\n      subjectListByLevel: this.state.subjectListByLevel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 29\n      }\n    }) : \"\", this.state.modalEdit ? /*#__PURE__*/React.createElement(EditEvent, {\n      classrooms: this.state.classrooms,\n      event: this.state.event,\n      modalEdit: this.state.modalEdit,\n      annuleModal: this.closeEdit,\n      roleId: this.props.userProfile.role_id,\n      establishmentProfessor: this.state.establishmentProfessor,\n      subjectListByLevel: this.state.subjectListByLevel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }\n    }) : null, /*#__PURE__*/React.createElement(SweetAlert, {\n      show: this.state.show,\n      title: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.planning.alert.message.add.event\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 18\n        }\n      }),\n      onConfirm: this.onConfirm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: this.props.showMessageEvent,\n      autoHideDuration: 3000,\n      onClose: this.handleRequestClose,\n      ContentProps: {\n        'aria-describedby': 'message-id'\n      },\n      message: /*#__PURE__*/React.createElement(\"span\", {\n        id: \"message-id\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 20\n        }\n      }, this.props.alertMessage),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    classes: state.classes,\n    subjects: state.subject.remoteSubjects,\n    establishments: state.establishment.remoteEstablishments,\n    professors: state.professor.remoteProfessors,\n    userProfile: state.auth.userProfile,\n    rooms: state.rooms,\n    events: state.planning.events,\n    alertMessage: state.planning.alertMessage,\n    showMessageEvent: state.planning.showMessageEvent,\n    startTime: state.settings.startTime,\n    endTime: state.settings.endTime,\n    settings: state.settings.locale.languageId\n  };\n};\n\nexport default connect(mapStateToProps)(Planning);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Calendar/routes/Planning/Planning.js"],"names":["React","_","moment","AddEvent","PlanningCalendar","getClasses","getRooms","connect","getEstablishment","getSubject","getData","getProfessors","addEvent","getEventsByClass","handleEventRequestClose","getLevels","Snackbar","classService","subjectsByLevelBySection","SweetAlert","IntlMessages","removeEventList","EditEvent","Planning","Component","constructor","props","handleChangeClasse","name","event","target","value","userProfile","role_id","classe","state","establishmentClass","find","id","subjectListByLevel","subjects","level_id","apiEndpoint","localStorage","token","parseInt","get","then","res","setState","establishmentProfessor","data","getEventsClass","handleChange","classrooms","rooms","filter","establishment_id","classes","events","onConfirm","show","handleRequestClose","dispatch","modal","startHours","endHours","slotInfo","eventList","establishment","modalEdit","addLesson","bind","annuleModal","handleSubmit","edit","closeEdit","isEmpty","start","end","params","establishmentId","JSON","stringify","response","catch","err","UNSAFE_componentWillMount","where","activeClass","classInfo","status","start_date_generic_event","end_date_generic_event","event_type","frequency","class_id","professor_id","professorId","subject_id","subjectId","room_id","room","componentWillUnmount","format","render","match","establishments","startTime","endTime","settings","vertical","horizontal","showMessageEvent","alertMessage","mapStateToProps","subject","remoteSubjects","remoteEstablishments","professors","professor","remoteProfessors","auth","planning","locale","languageId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../../../../../styles/app.scss';\nimport './Calendar.css';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport AddEvent from './AddEvent';\nimport PlanningCalendar from './PlanningCalendar';\nimport { getClasses } from '../../../../../actions/classeAction';\nimport { getRooms } from '../../../../../actions/roomAction';\n\nimport { connect } from 'react-redux';\nimport { getEstablishment } from '../../../../../actions/establishmentAction';\nimport { getSubject } from '../../../../../actions/subjectAction';\nimport { getData as getProfessors } from '../../../../../actions/professorAction';\nimport {\n  addEvent,\n  getEventsByClass,\n  handleEventRequestClose,\n} from '../../../../../actions/planningActions';\nimport { getLevels } from '../../../../../actions/classLevelAction';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { classService } from '../../../../../_services/class.service';\nimport { subjectsByLevelBySection } from '../../../../../actions/subjectAction';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { removeEventList } from \"../../../../../actions/planningActions\";\nimport EditEvent from './EditEvent';\n\nclass Planning extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false,\n      startHours: '',\n      endHours: '',\n      slotInfo: '',\n      eventList: [],\n      classrooms: [],\n      classe: {},\n      establishment: '',\n      establishmentClass: [],\n      establishmentProfessor: [],\n      subjectListByLevel: [],\n      show: false,\n      modalEdit: false\n    };\n\n    this.addLesson = this.addLesson.bind(this)\n    this.annuleModal = this.annuleModal.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleChangeClasse = this.handleChangeClasse.bind(this)\n    this.getEventsClass = this.getEventsClass.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.edit = this.edit.bind(this)\n    this.closeEdit = this.closeEdit.bind(this)\n\n\n  }\n  handleChangeClasse = (name) => (event) => {\n     if (event.target.value) {\n      if (this.props.userProfile.role_id !== 1) {\n        // let filter = { where: { establishment_id: this.props.userProfile.establishment_id } };\n        // let apiEndpoint = `/rooms/get-disposable-rooms/` + this.props.userProfile.establishment_id + `?access_token=${localStorage.token}`;\n        // classService.get(apiEndpoint)\n        //   .then((response) => {\n        //     this.setState({\n        //       classrooms: response.data.rooms, establishment: this.props.userProfile.establishment_id\n        //     })\n        //   }).catch((err) => {\n        //   })\n      }\n      let classe = this.state.establishmentClass.find(({ id }) => (id === event.target.value))\n      let subjectListByLevel = subjectsByLevelBySection(this.props.subjects, classe.level_id, 0)\n      let apiEndpoint = `/classes_professors?access_token=${localStorage.token}&filter[where][class_id]=` + parseInt(event.target.value) + `&filter[include][professor][profile][user]`\n      classService.get(apiEndpoint)\n        .then(res => {\n \n \n          this.setState({ establishmentProfessor: res.data, classe: classe, subjectListByLevel: subjectListByLevel });\n        })\n       this.getEventsClass(event.target.value)\n    } else {\n      this.setState({\n        classe: '',\n      });\n    }\n  };\n\n  handleChange = (name) => (event) => {\n    let classrooms = this.props.rooms.filter(\n      ({ establishment_id }) => establishment_id === event.target.value\n    );\n    let establishmentClass = this.props.classes.filter(\n      (classe) => classe.establishment_id === event.target.value\n    );\n    this.setState({\n      [name]: event.target.value,\n      establishmentClass: establishmentClass,\n      events: [],\n      classe: '',\n      classrooms: classrooms,\n    });\n  };\n\n  addLesson(slotInfo) {\n    if (_.isEmpty(this.state.classe)) {\n      this.setState({ show: true });\n    } else {\n      const startHours = moment(slotInfo.start);\n      const endHours = moment(slotInfo.end);\n\n      if (this.props.userProfile.role_id !== 1) {\n        let params = {\n          startHours: startHours,\n          endHours: endHours,\n          establishmentId: this.props.userProfile.establishment_id,\n          classe : this.state.classe.id\n        }\n\n        let apiEndpoint = `/rooms/get-disposable-rooms/${JSON.stringify(params)}?access_token=${localStorage.token}`;\n        classService.get(apiEndpoint)\n          .then((response) => {            \n            this.setState({\n              classrooms: response.data.rooms, establishment: this.props.userProfile.establishment_id\n            })\n          }).catch((err) => {\n          })\n      }\n      this.setState({\n        modal: true,\n        startHours: startHours,\n        endHours: endHours,\n        slotInfo: slotInfo,\n        eventList: [],\n      });\n    }\n  }\n  onConfirm = () => {\n    this.setState({\n      show: false,\n    });\n  };\n  UNSAFE_componentWillMount() {\n    this.props.dispatch(getClasses());\n    this.props.dispatch(getEstablishment());\n    this.props.dispatch(getSubject());\n    this.props.dispatch(getProfessors());\n    this.props.dispatch(getLevels());\n    this.props.dispatch(getRooms());\n    if (this.props.userProfile.role_id !== 1) {\n      let filter = {\n        where: {\n          establishment_id: this.props.userProfile.establishment_id,\n        },\n      };\n      let apiEndpoint =\n        `/classes?access_token=${localStorage.token}&filter=` +\n        JSON.stringify(filter);\n      classService\n        .get(apiEndpoint)\n        .then((response) => {\n          let activeClass = response.data.filter(classInfo => classInfo.status)\n          this.setState({\n            establishmentClass: activeClass,\n          });\n        })\n        .catch((err) => {});\n    }\n  }\n\n  getEventsClass(id) {\n     this.props.dispatch(getEventsByClass(id));\n  }\n  handleSubmit(data) {\n    const event = {\n      start_date_generic_event: data.startHours,\n      end_date_generic_event: data.endHours,\n      event_type: data.event_type,\n      frequency: data.frequency,\n      class_id: this.state.classe.id,\n      professor_id: data.professorId,\n      establishment_id: this.state.establishment,\n      subject_id: data.subjectId,\n      room_id: data.room,\n    };\n\n    this.props.dispatch(addEvent(event));\n    this.setState({\n      modal: false,\n    });\n  }\n  annuleModal() {\n    this.setState({\n      modal: false,\n    });\n  }\n  handleRequestClose = () => {\n    this.props.dispatch(handleEventRequestClose());\n  };\n\n  componentWillUnmount() {\n    this.props.dispatch(removeEventList())\n\n  }\n  edit(event) {\n     let params = {\n      startHours: moment(event.start).format(\"YYYY-MM-DD HH:mm:ss\"),\n      endHours: moment(event.end).format(\"YYYY-MM-DD HH:mm:ss\"),\n      establishmentId: this.props.userProfile.establishment_id,\n      classe : this.state.classe.id\n    }\n\n    let apiEndpoint = `/rooms/get-disposable-rooms/${JSON.stringify(params)}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then((response) => {\n        \n        this.setState({\n          classrooms: response.data.rooms, establishment: this.props.userProfile.establishment_id\n        })\n      }).catch((err) => {\n      })\n\n    this.setState({\n      modalEdit: true,\n      event: event\n\n    })\n  }\n  closeEdit() {\n    this.setState({\n      modalEdit: false\n    })\n  }\n\n  render() {\n    \n    return (\n      <div className=\"animated slideInUpTiny animation-duration-3\">\n        <PlanningCalendar\n          events={this.props.events}\n          rooms={this.props.rooms}\n          subjects={this.props.subjects}\n          match={this.props.match}\n          userProfile={this.props.userProfile}\n          addLesson={this.addLesson}\n          classes={this.props.classes}\n          establishments={this.props.establishments}\n          establishment={this.state.establishment}\n          handleChangeClasse={this.handleChangeClasse}\n          handleChange={this.handleChange}\n          establishmentClass={this.state.establishmentClass}\n          establishmentProfessor={this.state.establishmentProfessor}\n          startTime={this.props.startTime}\n          endTime={this.props.endTime}\n          appLang={this.props.settings}\n          edit={this.edit}\n\n        />\n        {this.state.modal ? <AddEvent\n          modal={this.state.modal}\n          startDateLesson={this.state.startHours}\n          endDateLesson={this.state.endHours}\n          annuleModal={this.annuleModal}\n          handleSubmit={this.handleSubmit}\n          classrooms={this.state.classrooms}\n          establishmentProfessor={this.state.establishmentProfessor}\n          subjectListByLevel={this.state.subjectListByLevel}\n\n        /> : \"\"}\n\n        {this.state.modalEdit ?\n          <EditEvent\n            classrooms={this.state.classrooms}\n            event={this.state.event}\n            modalEdit={this.state.modalEdit}\n            annuleModal={this.closeEdit}\n            roleId={this.props.userProfile.role_id}\n            establishmentProfessor={this.state.establishmentProfessor}\n            subjectListByLevel={this.state.subjectListByLevel}\n\n          /> : null\n\n        }\n\n        <SweetAlert show={this.state.show}\n          title={<IntlMessages id=\"components.planning.alert.message.add.event\" />}\n          onConfirm={this.onConfirm}\n        ></SweetAlert>\n        <Snackbar\n          anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          open={this.props.showMessageEvent}\n          autoHideDuration={3000}\n          onClose={this.handleRequestClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\">{this.props.alertMessage}</span>}\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    classes: state.classes,\n    subjects: state.subject.remoteSubjects,\n    establishments: state.establishment.remoteEstablishments,\n    professors: state.professor.remoteProfessors,\n    userProfile: state.auth.userProfile,\n    rooms: state.rooms,\n    events: state.planning.events,\n    alertMessage: state.planning.alertMessage,\n    showMessageEvent: state.planning.showMessageEvent,\n    startTime: state.settings.startTime,\n    endTime: state.settings.endTime,\n    settings: state.settings.locale.languageId,\n  };\n};\n\nexport default connect(mapStateToProps)(Planning);\n"]},"metadata":{},"sourceType":"module"}