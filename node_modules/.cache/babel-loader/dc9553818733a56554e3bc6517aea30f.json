{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/LevelTest/LevelTest.js\";\nimport React from \"react\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport baseUrl from \"../../../config/config\";\nimport _ from \"lodash\";\nimport Questions from \"./Questions/Question\";\nimport Tests from \"./Tests/Test\";\nimport { getQuestionsByProfileId } from \"../../../actions/QuestionActions\";\nimport { getProfLevelTests, getStudentLevelTests } from \"../../../actions/levelTestAction\";\nimport LevelTestStudent from \"./Tests/LevelTestStudent\";\n\nfunction mapStateToProps(state) {\n  return {\n    userProfile: state.auth.userProfile,\n    classes: state.classes,\n    settings: state.settings.locale,\n    classLevels: state.ClassLevels.remoteLevels,\n    questions: state.levelTestReducer.remoteQuestion,\n    levelTestProf: state.levelTestReducer.remoteTestProf,\n    levelTestStudent: state.levelTestReducer.remoteTestStudent,\n    levelTestParent: state.levelTestReducer.remoteTestParent\n  };\n}\n\nconst roleIdParent = 4;\nconst roleIdStudent = 5;\nconst roleIdProfessor = 3;\n\nclass levelTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addIsopen: false,\n      professorClassesList: [],\n      profSubjectList: [],\n      profLevels: [],\n      filter_level_id: \"\",\n      filter_class_id: \"\",\n      levelTests: [],\n      listStudentOfParent: []\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.levelTestStudent !== this.props.levelTestStudent) {\n      this.setState({\n        levelTests: this.props.levelTestStudent\n      });\n    }\n\n    if (prevProps.levelTestParent !== this.props.levelTestParent) {\n      this.setState({\n        levelTests: this.props.levelTestParent\n      });\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.userProfile.role_id === roleIdProfessor) {\n      /////// only for prof ////*////\n      this.props.getQuestionsByProfileId(this.props.userProfile.id);\n      this.props.getProfLevelTests(this.props.userProfile.id);\n      axios.get(`${baseUrl.baseUrl}/classes_professors/getClassesByUserId/` + this.props.userProfile.user_id + `?access_token=${localStorage.token}`).then(res => {\n        let professorClassesList = _.uniqBy(res.data.classes, \"id\");\n\n        var profLevels = [];\n        this.setState({\n          professorClassesList\n        });\n\n        if (professorClassesList.length > 0) {\n          profLevels = _.map(professorClassesList, \"level_id\");\n          this.setState({\n            profLevels\n          });\n        }\n      });\n      axios.get(`${baseUrl.baseUrl}/profiles/` + this.props.userProfile.id + `/professors?access_token=${localStorage.token}`).then(res => {\n        var professorIdFilter = res.data[0].id;\n        this.setState({\n          professorIdFilter: professorIdFilter\n        });\n        axios.get(`${baseUrl.baseUrl}/classes_professors?access_token=${localStorage.token}&filter[where][professor_id]=` + professorIdFilter + `&filter[include][subject]`).then(res => {\n          let profSubjectList = _.map(res.data.filter(element => element.status), \"subject\");\n\n          let profSubjectListUniq = _.uniqBy(profSubjectList, \"id\");\n\n          this.setState({\n            profSubjectList: profSubjectListUniq\n          });\n        });\n      });\n    } else if (this.props.userProfile.role_id === roleIdStudent) {\n      ////// only for student /////\n      this.props.getStudentLevelTests(this.props.userProfile, this.props.userProfile.role_id);\n      this.setState({\n        levelTests: this.props.levelTestStudent\n      });\n    } else if (this.props.userProfile.role_id === roleIdParent) {\n      ////// only for Parent /////\n      axios.get(`${baseUrl.baseUrl}/profiles?access_token=${localStorage.token}&filter[where][id]=` + this.props.userProfile.id + `&filter[include][parents][student_parents][student][profile]=user`).then(res => {\n        let listStudentOfParent = _.map(res.data[0].parents[0].student_parents, function (el, index) {\n          return el.student.profile;\n        });\n\n        this.setState({\n          listStudentOfParent\n        });\n        listStudentOfParent.map((element, index) => {\n          this.props.getStudentLevelTests(element, this.props.userProfile.role_id);\n        });\n        this.setState({\n          levelTests: this.props.levelTestParent\n        });\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Questions, {\n      profLevels: this.state.profLevels,\n      profSubjectList: this.state.profSubjectList,\n      questions: this.props.questions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Tests, {\n      profLevels: this.state.profLevels,\n      profSubjectList: this.state.profSubjectList,\n      questions: this.props.questions,\n      professorClassesList: this.state.professorClassesList,\n      levelTests: this.props.levelTestProf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }\n    }), this.props.userProfile.role_id === roleIdStudent ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"my.level.test\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LevelTestStudent, {\n      levelTests: this.state.levelTests,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 15\n      }\n    }))) : \"\", this.props.userProfile.role_id === roleIdParent ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(IntlMessages, {\n      id: \"level.test.childs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(LevelTestStudent, {\n      levelTests: this.state.levelTests,\n      listStudentOfParent: this.state.listStudentOfParent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }))) : \"\");\n  }\n\n}\n\nconst mapDispatchToProps = {\n  getQuestionsByProfileId,\n  getProfLevelTests,\n  getStudentLevelTests\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(levelTest);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/LevelTest/LevelTest.js"],"names":["React","IntlMessages","connect","axios","baseUrl","_","Questions","Tests","getQuestionsByProfileId","getProfLevelTests","getStudentLevelTests","LevelTestStudent","mapStateToProps","state","userProfile","auth","classes","settings","locale","classLevels","ClassLevels","remoteLevels","questions","levelTestReducer","remoteQuestion","levelTestProf","remoteTestProf","levelTestStudent","remoteTestStudent","levelTestParent","remoteTestParent","roleIdParent","roleIdStudent","roleIdProfessor","levelTest","Component","constructor","props","addIsopen","professorClassesList","profSubjectList","profLevels","filter_level_id","filter_class_id","levelTests","listStudentOfParent","componentDidUpdate","prevProps","prevState","setState","componentWillMount","role_id","id","get","user_id","localStorage","token","then","res","uniqBy","data","length","map","professorIdFilter","filter","element","status","profSubjectListUniq","parents","student_parents","el","index","student","profile","render","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport IntlMessages from \"../../../util/IntlMessages\";\nimport { connect } from \"react-redux\";\n\nimport axios from \"axios\";\nimport baseUrl from \"../../../config/config\";\nimport _ from \"lodash\";\nimport Questions from \"./Questions/Question\";\nimport Tests from \"./Tests/Test\";\nimport { getQuestionsByProfileId } from \"../../../actions/QuestionActions\";\nimport {\n  getProfLevelTests,\n  getStudentLevelTests,\n} from \"../../../actions/levelTestAction\";\n\nimport LevelTestStudent from \"./Tests/LevelTestStudent\";\nfunction mapStateToProps(state) {\n  return {\n    userProfile: state.auth.userProfile,\n    classes: state.classes,\n    settings: state.settings.locale,\n    classLevels: state.ClassLevels.remoteLevels,\n    questions: state.levelTestReducer.remoteQuestion,\n    levelTestProf: state.levelTestReducer.remoteTestProf,\n    levelTestStudent: state.levelTestReducer.remoteTestStudent,\n    levelTestParent: state.levelTestReducer.remoteTestParent,\n  };\n}\n\nconst roleIdParent = 4;\nconst roleIdStudent = 5;\nconst roleIdProfessor = 3;\nclass levelTest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addIsopen: false,\n      professorClassesList: [],\n      profSubjectList: [],\n      profLevels: [],\n      filter_level_id: \"\",\n      filter_class_id: \"\",\n      levelTests: [],\n      listStudentOfParent: [],\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.levelTestStudent !== this.props.levelTestStudent) {\n      this.setState({\n        levelTests: this.props.levelTestStudent,\n      });\n    }\n    if (prevProps.levelTestParent !== this.props.levelTestParent) {\n      this.setState({\n        levelTests: this.props.levelTestParent,\n      });\n    }\n  }\n\n  componentWillMount() {\n    if (this.props.userProfile.role_id === roleIdProfessor) {\n      /////// only for prof ////*////\n\n      this.props.getQuestionsByProfileId(this.props.userProfile.id);\n      this.props.getProfLevelTests(this.props.userProfile.id);\n      axios\n        .get(\n          `${baseUrl.baseUrl}/classes_professors/getClassesByUserId/` +\n            this.props.userProfile.user_id +\n            `?access_token=${localStorage.token}`\n        )\n        .then((res) => {\n          let professorClassesList = _.uniqBy(res.data.classes, \"id\");\n          var profLevels = [];\n          this.setState({\n            professorClassesList,\n          });\n          if (professorClassesList.length > 0) {\n            profLevels = _.map(professorClassesList, \"level_id\");\n            this.setState({\n              profLevels,\n            });\n          }\n        });\n      axios\n        .get(\n          `${baseUrl.baseUrl}/profiles/` +\n            this.props.userProfile.id +\n            `/professors?access_token=${localStorage.token}`\n        )\n        .then((res) => {\n          var professorIdFilter = res.data[0].id;\n          this.setState({\n            professorIdFilter: professorIdFilter,\n          });\n\n          axios\n            .get(\n              `${baseUrl.baseUrl}/classes_professors?access_token=${localStorage.token}&filter[where][professor_id]=` +\n                professorIdFilter +\n                `&filter[include][subject]`\n            )\n            .then((res) => {\n              let profSubjectList = _.map(\n                res.data.filter((element) => element.status),\n                \"subject\"\n              );\n              let profSubjectListUniq = _.uniqBy(profSubjectList, \"id\");\n              this.setState({ profSubjectList: profSubjectListUniq });\n            });\n        });\n    } else if (this.props.userProfile.role_id === roleIdStudent) {\n      ////// only for student /////\n      this.props.getStudentLevelTests(\n        this.props.userProfile,\n        this.props.userProfile.role_id\n      );\n      this.setState({\n        levelTests: this.props.levelTestStudent,\n      });\n    } else if (this.props.userProfile.role_id === roleIdParent) {\n      ////// only for Parent /////\n      axios\n        .get(\n          `${baseUrl.baseUrl}/profiles?access_token=${localStorage.token}&filter[where][id]=` +\n            this.props.userProfile.id +\n            `&filter[include][parents][student_parents][student][profile]=user`\n        )\n        .then((res) => {\n          let listStudentOfParent = _.map(\n            res.data[0].parents[0].student_parents,\n            function(el, index) {\n              return el.student.profile;\n            }\n          );\n\n          this.setState({\n            listStudentOfParent,\n          });\n          listStudentOfParent.map((element, index) => {\n            this.props.getStudentLevelTests(\n              element,\n              this.props.userProfile.role_id\n            );\n          });\n          this.setState({\n            levelTests: this.props.levelTestParent,\n          });\n        });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app-wrapper\">\n        <Questions\n          profLevels={this.state.profLevels}\n          profSubjectList={this.state.profSubjectList}\n          questions={this.props.questions}\n        />\n        <Tests\n          profLevels={this.state.profLevels}\n          profSubjectList={this.state.profSubjectList}\n          questions={this.props.questions}\n          professorClassesList={this.state.professorClassesList}\n          levelTests={this.props.levelTestProf}\n        />\n\n        {this.props.userProfile.role_id === roleIdStudent ? (\n          <div>\n            <h1>\n              <IntlMessages id=\"my.level.test\" />\n            </h1>\n            <br />\n            <div>\n              <LevelTestStudent levelTests={this.state.levelTests} />\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n        {this.props.userProfile.role_id === roleIdParent ? (\n          <div>\n            <h1>\n              <IntlMessages id=\"level.test.childs\" />\n            </h1>\n            <br />\n            <div>\n              <LevelTestStudent\n                levelTests={this.state.levelTests}\n                listStudentOfParent={this.state.listStudentOfParent}\n              />\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    );\n  }\n}\nconst mapDispatchToProps = {\n  getQuestionsByProfileId,\n  getProfLevelTests,\n  getStudentLevelTests,\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(levelTest);\n"]},"metadata":{},"sourceType":"module"}