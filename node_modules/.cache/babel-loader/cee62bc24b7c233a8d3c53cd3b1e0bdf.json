{"ast":null,"code":"import { getName } from './countriesAction';\nimport _ from 'lodash';\nimport { classService } from '../_services/class.service';\nimport { DATA_LOADED_LEVELS } from '../constants/ActionTypes';\n\nfunction getLevelName(levels, id) {\n  let levelName = levels.map(element => {\n    if (element.id === id) {\n      return element.name;\n    } else {\n      return null;\n    }\n  });\n  let result = levelName.filter(element => element);\n  return _.first(result);\n}\n\nfunction getLevelListFromEstabType(levels, idType) {\n  let levelList = [];\n\n  if (idType === 0) {\n    levelList = [];\n  } else {\n    levelList = levels.filter(element => element.estab_type_id === idType);\n  }\n\n  return levelList;\n}\n\nfunction getLevels() {\n  return dispatch => {\n    let apiEndpoint = `/levels?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let levelsList = [];\n      response.data.forEach(element => {\n        levelsList.push({\n          \"id\": element.id,\n          \"name\": getName(element),\n          \"estab_type_id\": element.estab_type_id\n        });\n      });\n      dispatch({\n        type: \"DATA_LOADED_LEVELS\",\n        payload: levelsList\n      });\n    }).catch(err => {});\n  };\n}\n\nfunction getLevelsVirtualClass() {\n  return dispatch => {\n    let apiEndpoint = `/levels?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      let levelsList = [];\n      response.data.forEach(element => {\n        levelsList.push({\n          \"id\": element.id,\n          \"name_AR\": element.name_AR,\n          \"name_FR\": element.name_FR,\n          \"name_EN\": element.name_EN,\n          \"estab_type_id\": element.estab_type_id\n        });\n      });\n      dispatch({\n        type: \"DATA_LOADED_LEVELS\",\n        payload: levelsList\n      });\n    }).catch(err => {});\n  };\n}\n\nexport function getLevelByEstablishmentId(id) {\n  let apiEndpoint = '';\n  return dispatch => {\n    apiEndpoint = `/establishments/${id}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        const establishmentType = response.data.estab_type_id; // apiEndpoint = `/levels?access_token=${localStorage.token}&filter[where][estab_type_id]=${establishmentType}`;\n        // classService.get(apiEndpoint).then((response) => {\n        //   let levelsList = [];\n        //   response.data.forEach(element => {\n        //     levelsList.push({ \"id\": element.id, \"name\": getName(element), \"estab_type_id\": element.estab_type_id, \"name_AR\":element.name_AR, \"name_FR\": element.name_FR, \"name_EN\":element.name_EN })\n        //   });\n        //   dispatch({ type: \"DATA_LOADED_LEVELS\", payload: levelsList });\n        // })\n      }\n    });\n  };\n}\nexport function getlevelsForProf(id) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const levels = state.ClassLevels.remoteLevels;\n    let apiEndpoint = `/professors?access_token=${localStorage.token}&filter[where][profile_id]=${id}&filter[include][profSubjects][subject]`;\n    classService.get(apiEndpoint).then(res => {\n      if (res) {\n        let levelsAffectedToProf = [];\n\n        let levelsId = _.uniqBy(_.map(_.head(res.data).profSubjects, 'level_id'));\n\n        _.forEach(levelsId, function (value) {\n          levelsAffectedToProf.push({\n            'id': value\n          });\n        });\n\n        let levelsList = _.intersectionBy(levels, levelsAffectedToProf, 'id');\n\n        dispatch({\n          type: \"DATA_LOADED_LEVELS\",\n          payload: levelsList\n        });\n      }\n    });\n  };\n}\nexport function getLevelsAndSubjectsForProf(id) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const levels = state.ClassLevels.remoteLevels;\n    let apiEndpoint = `/professors?access_token=${localStorage.token}&filter[where][profile_id]=${id}&filter[include][profSubjects][subject]`;\n    classService.get(apiEndpoint).then(res => {\n      if (res) {\n        let levelsAffectedToProf = [];\n\n        let levelsId = _.uniqBy(_.map(_.head(res.data).profSubjects, 'level_id'));\n\n        _.forEach(levelsId, function (value) {\n          levelsAffectedToProf.push({\n            'id': value\n          });\n        });\n\n        let levelsList = _.intersectionBy(levels, levelsAffectedToProf, 'id');\n\n        dispatch({\n          type: DATA_LOADED_LEVELS,\n          payload: levelsList\n        });\n\n        let subjectsFiltred = _.map(_.head(res.data).profSubjects, 'subject');\n\n        dispatch({\n          type: 'DATA_LOADED_SUBJECT_PROFESSOR',\n          payload: subjectsFiltred\n        });\n      }\n    });\n  };\n}\nexport { getLevelName, getLevels, getLevelListFromEstabType, getLevelsVirtualClass };","map":{"version":3,"sources":["/home/oem/Documents/projects/educap-pro/educap-pro-front/src/actions/classLevelAction.js"],"names":["getName","_","classService","DATA_LOADED_LEVELS","getLevelName","levels","id","levelName","map","element","name","result","filter","first","getLevelListFromEstabType","idType","levelList","estab_type_id","getLevels","dispatch","apiEndpoint","localStorage","token","get","then","response","levelsList","data","forEach","push","type","payload","catch","err","getLevelsVirtualClass","name_AR","name_FR","name_EN","getLevelByEstablishmentId","establishmentType","getlevelsForProf","getState","state","ClassLevels","remoteLevels","res","levelsAffectedToProf","levelsId","uniqBy","head","profSubjects","value","intersectionBy","getLevelsAndSubjectsForProf","subjectsFiltred"],"mappings":"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","sourcesContent":["import { getName } from './countriesAction';\nimport _ from 'lodash';\nimport { classService } from '../_services/class.service';\nimport {\n  DATA_LOADED_LEVELS\n  \n} from '../constants/ActionTypes';\nfunction getLevelName(levels, id) {\n  let levelName = levels.map(element => {\n    if (element.id === id) { return element.name } else { return null }\n  })\n  let result = levelName.filter(element => element)\n  return _.first(result)\n}\n\nfunction getLevelListFromEstabType(levels, idType) {\n  let levelList = [];\n  if (idType === 0) {\n    levelList = [];\n  } else {\n    levelList = levels.filter(element => element.estab_type_id === idType)\n  }\n  return levelList\n}\n\nfunction getLevels() {\n  return dispatch => {\n    let apiEndpoint = `/levels?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then((response) => {\n        let levelsList = [];\n        response.data.forEach(element => {\n          levelsList.push({ \"id\": element.id, \"name\": getName(element), \"estab_type_id\": element.estab_type_id })\n        });\n        dispatch({ type: \"DATA_LOADED_LEVELS\", payload: levelsList });\n      }).catch((err) => {\n      })\n\n  }\n}\n\nfunction getLevelsVirtualClass() {\n  return dispatch => {\n    let apiEndpoint = `/levels?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint)\n      .then((response) => {\n        let levelsList = [];\n        response.data.forEach(element => {\n          levelsList.push({ \"id\": element.id, \"name_AR\": element.name_AR, \"name_FR\": element.name_FR, \"name_EN\": element.name_EN, \"estab_type_id\": element.estab_type_id })\n        });\n        dispatch({ type: \"DATA_LOADED_LEVELS\", payload: levelsList });\n      }).catch((err) => {\n      })\n\n  }\n}\n\nexport function getLevelByEstablishmentId(id) {\n  let apiEndpoint = '';\n  return dispatch => {\n    apiEndpoint = `/establishments/${id}?access_token=${localStorage.token}`\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        const establishmentType = response.data.estab_type_id;\n        // apiEndpoint = `/levels?access_token=${localStorage.token}&filter[where][estab_type_id]=${establishmentType}`;\n        // classService.get(apiEndpoint).then((response) => {\n        //   let levelsList = [];\n        //   response.data.forEach(element => {\n        //     levelsList.push({ \"id\": element.id, \"name\": getName(element), \"estab_type_id\": element.estab_type_id, \"name_AR\":element.name_AR, \"name_FR\": element.name_FR, \"name_EN\":element.name_EN })\n        //   });\n        //   dispatch({ type: \"DATA_LOADED_LEVELS\", payload: levelsList });\n        // })\n      }\n    })\n\n  }\n\n}\n\nexport function getlevelsForProf(id) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const levels= state.ClassLevels.remoteLevels;\n  let apiEndpoint = `/professors?access_token=${localStorage.token}&filter[where][profile_id]=${id}&filter[include][profSubjects][subject]`\n  classService.get(apiEndpoint)\n      .then(res => {\n          if (res) {\n            let levelsAffectedToProf = []\n              let levelsId = _.uniqBy(_.map(_.head(res.data).profSubjects, 'level_id'))\n              _.forEach(levelsId, function (value) {\n                  levelsAffectedToProf.push({ 'id': value })\n              });\n              let levelsList = _.intersectionBy(levels, levelsAffectedToProf, 'id');\n              dispatch({ type: \"DATA_LOADED_LEVELS\", payload: levelsList });              \n             \n          }\n      });\n  }\n}\n\nexport function getLevelsAndSubjectsForProf(id) {\n  return (dispatch, getState) => {\n    const state = getState();\n    const levels= state.ClassLevels.remoteLevels;\n  let apiEndpoint = `/professors?access_token=${localStorage.token}&filter[where][profile_id]=${id}&filter[include][profSubjects][subject]`\n  classService.get(apiEndpoint)\n      .then(res => {\n          if (res) {\n            let levelsAffectedToProf = []\n              let levelsId = _.uniqBy(_.map(_.head(res.data).profSubjects, 'level_id'))\n              _.forEach(levelsId, function (value) {\n                  levelsAffectedToProf.push({ 'id': value })\n              });\n              let levelsList = _.intersectionBy(levels, levelsAffectedToProf, 'id');\n              dispatch({ type: DATA_LOADED_LEVELS, payload: levelsList });    \n              let subjectsFiltred = _.map(_.head(res.data).profSubjects, 'subject');\n              dispatch({type: 'DATA_LOADED_SUBJECT_PROFESSOR',payload: subjectsFiltred});          \n             \n          }\n      });\n  }\n}\n\nexport { getLevelName, getLevels, getLevelListFromEstabType, getLevelsVirtualClass }"]},"metadata":{},"sourceType":"module"}