{"ast":null,"code":"import { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport axios from 'axios';\nimport { gradeService } from '../_services/grade.service';\nimport { GET_ALL_GRADES, ADD_GRADE, UPDATE_GRADE, SHOW_SUCCESS_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE } from '../constants/ActionTypes';\nexport const getGrades = () => {\n  return dispatch => {\n    let apiEndpoint = `/notes?access_token=${localStorage.token}`;\n    gradeService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: GET_ALL_GRADES,\n        payload: response.data\n      });\n    }).catch(err => {});\n  };\n};\nexport const addGrade = gradeList => {\n  return dispatch => {\n    axios.post(`${baseUrl.baseUrl}/notes/addGrades?access_token=${localStorage.token}`, gradeList).then(response => {\n      if (response) {\n        dispatch({\n          type: ADD_GRADE,\n          payload: response.data\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'Les Notes sont enregistrées avec succès'\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'enregistrement  merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const updateGrade = gradeItem => {\n  return dispatch => {\n    let apiEndpoint = `/notes/` + gradeItem.id + `?access_token=${localStorage.token}`;\n    gradeService.put(apiEndpoint, gradeItem).then(response => {//dispatch({ type: UPDATE_GRADE, payload: response.data });\n    }).catch(error => {\n      throw error;\n    });\n  };\n};\nexport const updateAlerte = gradeItem => {\n  return dispatch => {\n    dispatch({\n      type: SHOW_SUCCESS_MESSAGE,\n      payload: 'Les Notes sont modifiées avec succès'\n    });\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_SUCCESS_MESSAGE\n      });\n    }, 4000);\n  };\n};\nexport const resetAlerte = gradeItem => {\n  return dispatch => {\n    dispatch({\n      type: SHOW_SUCCESS_MESSAGE,\n      payload: 'Les Notes sont supprimées avec succès'\n    });\n    setTimeout(() => {\n      dispatch({\n        type: HIDE_SUCCESS_MESSAGE\n      });\n    }, 4000);\n  };\n};\nexport const gradeAction = {\n  getGrades,\n  addGrade,\n  updateGrade\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap-pro/educap-pro-front/src/actions/noteActions.js"],"names":["classService","baseUrl","axios","gradeService","GET_ALL_GRADES","ADD_GRADE","UPDATE_GRADE","SHOW_SUCCESS_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","getGrades","dispatch","apiEndpoint","localStorage","token","get","then","response","type","payload","data","catch","err","addGrade","gradeList","post","setTimeout","updateGrade","gradeItem","id","put","error","updateAlerte","resetAlerte","gradeAction"],"mappings":"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","sourcesContent":["import { classService } from '../_services/class.service';\n\nimport baseUrl from '../config/config';\nimport axios from 'axios';\nimport { gradeService } from '../_services/grade.service';\nimport {\n  GET_ALL_GRADES,\n  ADD_GRADE,\n  UPDATE_GRADE,\n  SHOW_SUCCESS_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n} from '../constants/ActionTypes';\n\nexport const getGrades = () => {\n  return (dispatch) => {\n    let apiEndpoint = `/notes?access_token=${localStorage.token}`;\n    gradeService\n      .get(apiEndpoint)\n      .then((response) => {\n        dispatch({ type: GET_ALL_GRADES, payload: response.data });\n      })\n      .catch((err) => {});\n  };\n};\n\nexport const addGrade = (gradeList) => {\n  return (dispatch) => {\n    axios\n      .post(\n        `${baseUrl.baseUrl}/notes/addGrades?access_token=${localStorage.token}`,\n        gradeList\n      )\n      .then((response) => {\n        if (response) {\n          dispatch({ type: ADD_GRADE, payload: response.data });\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: 'Les Notes sont enregistrées avec succès',\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 4000);\n        } else {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload:\n              \"Une erreur est survenue lors de l'enregistrement  merci d'essayer à nouveau\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 4000);\n        }\n      });\n  };\n};\n\nexport const updateGrade = (gradeItem) => {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/notes/` + gradeItem.id + `?access_token=${localStorage.token}`;\n\n    gradeService\n      .put(apiEndpoint, gradeItem)\n      .then((response) => {\n        //dispatch({ type: UPDATE_GRADE, payload: response.data });\n      })\n      .catch((error) => {\n        throw error;\n      });\n  };\n};\nexport const updateAlerte = (gradeItem) => {\n  return (dispatch) => {\n    dispatch({\n      type: SHOW_SUCCESS_MESSAGE,\n      payload: 'Les Notes sont modifiées avec succès',\n    });\n    setTimeout(() => {\n      dispatch({ type: HIDE_SUCCESS_MESSAGE });\n    }, 4000);\n  };\n};\nexport const resetAlerte = (gradeItem) => {\n  return (dispatch) => {\n    dispatch({\n      type: SHOW_SUCCESS_MESSAGE,\n      payload: 'Les Notes sont supprimées avec succès',\n    });\n    setTimeout(() => {\n      dispatch({ type: HIDE_SUCCESS_MESSAGE });\n    }, 4000);\n  };\n};\n\nexport const gradeAction = {\n  getGrades,\n  addGrade,\n  updateGrade,\n};\n"]},"metadata":{},"sourceType":"module"}