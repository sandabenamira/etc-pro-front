{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Learning/routes/Homeworks/HomeworkList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getSectionFromLevel } from '../../../../../actions/sectionAction';\nimport { getLevelListFromEstabType } from '../../../../../actions/classLevelAction';\nimport axios from 'axios';\nimport baseUrl from '../../../../../config/config';\nimport { getClassesByEstablishmentId } from '../../../../../actions/classeAction';\nimport { roleIdAdmin } from '../../../../../config/config';\nimport { roleIdProfessor } from '../../../../../config/config';\nimport { roleIdParent } from '../../../../../config/config';\nimport { roleIdStudent } from '../../../../../config/config';\nimport _ from 'lodash';\nimport { privateStatus, publicStatus, allStatus } from '../../../../../config/config';\nimport moment from 'moment';\nimport HomeworkItem from './HomeworkItem';\nimport DeleteHomework from './DeleteHomework';\nimport { deleteHomework } from '../../../../../actions/HomeworkAction';\nimport EditHomework from './EditHomework';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { classService } from '../../../../../_services/class.service';\n\nclass HomeworkList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeClassList = selectedOption => {\n      if (selectedOption != null) {\n        let classesId = _.map(selectedOption, 'id');\n\n        this.setState({\n          classesId,\n          isEmptylistClass: false,\n          classesData: selectedOption\n        });\n      } else {\n        this.setState({\n          classesId: []\n        });\n      }\n    };\n\n    this.handleChangeSubject = selectedOption => {\n      this.setState({\n        subjectId: selectedOption.id,\n        subjectItem: selectedOption,\n        classItem: {}\n      });\n\n      if (this.props.userProfile.role_id === roleIdAdmin) {\n        let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${selectedOption.value}&filter[include]=class&filter[include]=course`;\n        classService.get(apiEndpoint).then(response => {\n          if (response) {\n            let classesSubjects = response.data.filter(element => element.status);\n            let newList = [];\n            classesSubjects.map(element => {\n              let object = {};\n\n              if (!_.isEmpty(element.course)) {\n                object.label = element.class.name;\n                object.id = element.course[0].id;\n                object.value = element.course[0].id;\n                newList.push(object);\n              }\n            });\n            console.log(newList, 'change subject');\n            this.setState({\n              classes: newList\n            });\n          }\n        });\n      } else {\n        let apiEndpoint = `/assignment_class_subjects/${selectedOption.value}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n        classService.get(apiEndpoint).then(response => {\n          if (response) {\n            let element = response.data;\n\n            if (element.status) {\n              let object = {};\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n              this.setState({\n                classes: [object]\n              });\n            }\n          }\n        });\n      }\n    };\n\n    this.handleChangeHomeworkType = selectedOption => {\n      this.setState({\n        homeworkType: selectedOption\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.state = {\n      HomeworkTypes: [{\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.book.exercise\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 18\n          }\n        }),\n        value: 'book',\n        id: 1\n      }, {\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.series.exercise\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 18\n          }\n        }),\n        value: 'serie',\n        id: 2\n      }, {\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.other.exercise\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 18\n          }\n        }),\n        value: 'other',\n        id: 3\n      }],\n      classes: [],\n      subjects: [],\n      deleteIsopen: false,\n      itemIdDelete: '',\n      editIsopen: false,\n      itemEdit: {},\n      nameFile: '',\n      subjectId: null,\n      subjectItem: {},\n      classItem: {}\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCancelDelete = this.handleCancelDelete.bind(this);\n    this.handleSubmitDelete = this.handleSubmitDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeHomeworkType = this.handleChangeHomeworkType.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.handleChangeClassList = this.handleChangeClassList.bind(this);\n  }\n\n  handleEdit(item) {\n    if (this.props.userProfile.role_id === roleIdAdmin) {\n      let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${item.homework.fk_id_subject}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then(response => {\n        if (response) {\n          let classesSubjects = response.data.filter(element => element.status);\n          let newList = [];\n          classesSubjects.map(element => {\n            let object = {};\n\n            if (!_.isEmpty(element.course)) {\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n              newList.push(object);\n            }\n          });\n          console.log(newList, 'newList');\n          this.setState({\n            classes: newList\n          });\n        }\n      });\n    } else {\n      let apiEndpoint = `/assignment_class_subjects/${item.homework.fk_id_subject}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then(response => {\n        if (response) {\n          let element = response.data;\n\n          if (element.status) {\n            let object = {};\n            object.label = element.class.name;\n            object.id = element.course[0].id;\n            object.value = element.course[0].id;\n            this.setState({\n              classes: [object]\n            });\n          }\n        }\n      });\n    }\n\n    console.log(item, 'ediiiiit');\n    let homeworkType = this.state.HomeworkTypes.find(element => element.value == item.homework.homework_type);\n    let subjectItem = this.props.subjects.find(element => element.id == item.homework.fk_id_subject);\n    let classItem = {\n      label: item.className,\n      id: item.courseId,\n      value: item.courseId\n    };\n    this.setState({\n      editIsopen: true,\n      itemEdit: item,\n      nameFile: item.homework.title,\n      homeworkType,\n      subjects: this.props.subjects,\n      subjectItem,\n      classItem\n    });\n  }\n\n  handleSubmitDelete() {\n    this.setState({\n      deleteIsopen: false\n    });\n    this.props.dispatch(deleteHomework(this.state.itemIdDelete));\n  }\n\n  handleDelete(id) {\n    this.setState({\n      deleteIsopen: true,\n      itemIdDelete: id\n    });\n  }\n\n  handleCancelDelete() {\n    this.setState({\n      deleteIsopen: false,\n      itemIdDelete: ''\n    });\n  }\n\n  render() {\n    console.log('subjects', this.props.subjects);\n    console.log('classes', this.state.classes);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-12 col-md-12 col-lg-12 col-sm-6 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"   price-tables row pt-default d-flex flex-wrap justify-content-start \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }, this.props.homeworks.map((homeworkItem, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 col-lg-6 col-sm-6 col-xl-3 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HomeworkItem, {\n      key: index,\n      homeworkItem: homeworkItem,\n      handleDelete: this.handleDelete,\n      handleEdit: this.handleEdit,\n      archived: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    })))), this.state.editIsopen === true ? /*#__PURE__*/React.createElement(EditHomework, {\n      editIsopen: this.state.editIsopen,\n      values: this.state,\n      handleChange: this.handleChange,\n      handleChangeHomeworkType: this.handleChangeHomeworkType,\n      handleChangeSubject: this.handleChangeSubject,\n      handleChangeClassList: this.handleChangeClassList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 11\n      }\n    }) : '', this.state.deleteIsopen === true ? /*#__PURE__*/React.createElement(DeleteHomework, {\n      modal: this.state.deleteIsopen,\n      handleCancelDelete: this.handleCancelDelete,\n      handleSubmitDelete: this.handleSubmitDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }) : '');\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userProfile: state.auth.userProfile,\n    ClassSettings: state.ClassSettingsReducer.classSettings\n  };\n}\n\nexport default connect(mapStateToProps)(HomeworkList);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Learning/routes/Homeworks/HomeworkList.js"],"names":["React","Component","connect","getSectionFromLevel","getLevelListFromEstabType","axios","baseUrl","getClassesByEstablishmentId","roleIdAdmin","roleIdProfessor","roleIdParent","roleIdStudent","_","privateStatus","publicStatus","allStatus","moment","HomeworkItem","DeleteHomework","deleteHomework","EditHomework","IntlMessages","classService","HomeworkList","constructor","props","handleChangeClassList","selectedOption","classesId","map","setState","isEmptylistClass","classesData","handleChangeSubject","subjectId","id","subjectItem","classItem","userProfile","role_id","apiEndpoint","localStorage","token","value","get","then","response","classesSubjects","data","filter","element","status","newList","object","isEmpty","course","label","class","name","push","console","log","classes","handleChangeHomeworkType","homeworkType","handleChange","event","target","state","HomeworkTypes","subjects","deleteIsopen","itemIdDelete","editIsopen","itemEdit","nameFile","handleDelete","bind","handleCancelDelete","handleSubmitDelete","handleEdit","item","homework","fk_id_subject","find","homework_type","className","courseId","title","dispatch","render","homeworks","homeworkItem","index","mapStateToProps","auth","ClassSettings","ClassSettingsReducer","classSettings"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,mBAAT,QAAoC,sCAApC;AACA,SAASC,yBAAT,QAA0C,yCAA1C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,2BAAT,QAA4C,qCAA5C;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,YAAT,QAA6B,8BAA7B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,SAAtC,QAAuD,8BAAvD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,uCAA/B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;AACA,SAASC,YAAT,QAA6B,wCAA7B;;AAEA,MAAMC,YAAN,SAA2BtB,SAA3B,CAAqC;AACnCuB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyCnBC,qBAzCmB,GAyCMC,cAAD,IAAoB;AAC1C,UAAIA,cAAc,IAAI,IAAtB,EAA4B;AAC1B,YAAIC,SAAS,GAAGhB,CAAC,CAACiB,GAAF,CAAMF,cAAN,EAAsB,IAAtB,CAAhB;;AACA,aAAKG,QAAL,CAAc;AACZF,UAAAA,SADY;AAEZG,UAAAA,gBAAgB,EAAE,KAFN;AAGZC,UAAAA,WAAW,EAAEL;AAHD,SAAd;AAKD,OAPD,MAOO;AACL,aAAKG,QAAL,CAAc;AAAEF,UAAAA,SAAS,EAAE;AAAb,SAAd;AACD;AACF,KApDkB;;AAAA,SAqDnBK,mBArDmB,GAqDIN,cAAD,IAAoB;AACxC,WAAKG,QAAL,CAAc;AACZI,QAAAA,SAAS,EAAEP,cAAc,CAACQ,EADd;AAEZC,QAAAA,WAAW,EAAET,cAFD;AAGZU,QAAAA,SAAS,EAAE;AAHC,OAAd;;AAKA,UAAI,KAAKZ,KAAL,CAAWa,WAAX,CAAuBC,OAAvB,KAAmC/B,WAAvC,EAAoD;AAClD,YAAIgC,WAAW,GAAI,2CAA0CC,YAAY,CAACC,KAAM,oCAAmCf,cAAc,CAACgB,KAAM,+CAAxI;AACArB,QAAAA,YAAY,CAACsB,GAAb,CAAiBJ,WAAjB,EAA8BK,IAA9B,CAAoCC,QAAD,IAAc;AAC/C,cAAIA,QAAJ,EAAc;AACZ,gBAAIC,eAAe,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAAd,CAAsBC,OAAD,IAAaA,OAAO,CAACC,MAA1C,CAAtB;AACA,gBAAIC,OAAO,GAAG,EAAd;AACAL,YAAAA,eAAe,CAAClB,GAAhB,CAAqBqB,OAAD,IAAa;AAC/B,kBAAIG,MAAM,GAAG,EAAb;;AACA,kBAAI,CAACzC,CAAC,CAAC0C,OAAF,CAAUJ,OAAO,CAACK,MAAlB,CAAL,EAAgC;AAC9BF,gBAAAA,MAAM,CAACG,KAAP,GAAeN,OAAO,CAACO,KAAR,CAAcC,IAA7B;AACAL,gBAAAA,MAAM,CAAClB,EAAP,GAAYe,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAA9B;AACAkB,gBAAAA,MAAM,CAACV,KAAP,GAAeO,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAAjC;AAEAiB,gBAAAA,OAAO,CAACO,IAAR,CAAaN,MAAb;AACD;AACF,aATD;AAUAO,YAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,EAAqB,gBAArB;AAEA,iBAAKtB,QAAL,CAAc;AAAEgC,cAAAA,OAAO,EAAEV;AAAX,aAAd;AACD;AACF,SAlBD;AAmBD,OArBD,MAqBO;AACL,YAAIZ,WAAW,GAAI,8BAA6Bb,cAAc,CAACgB,KAAM,iBAAgBF,YAAY,CAACC,KAAM,+CAAxG;AACApB,QAAAA,YAAY,CAACsB,GAAb,CAAiBJ,WAAjB,EAA8BK,IAA9B,CAAoCC,QAAD,IAAc;AAC/C,cAAIA,QAAJ,EAAc;AACZ,gBAAII,OAAO,GAAGJ,QAAQ,CAACE,IAAvB;;AACA,gBAAIE,OAAO,CAACC,MAAZ,EAAoB;AAClB,kBAAIE,MAAM,GAAG,EAAb;AACAA,cAAAA,MAAM,CAACG,KAAP,GAAeN,OAAO,CAACO,KAAR,CAAcC,IAA7B;AACAL,cAAAA,MAAM,CAAClB,EAAP,GAAYe,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAA9B;AACAkB,cAAAA,MAAM,CAACV,KAAP,GAAeO,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAAjC;AACA,mBAAKL,QAAL,CAAc;AAAEgC,gBAAAA,OAAO,EAAE,CAACT,MAAD;AAAX,eAAd;AACD;AACF;AACF,SAXD;AAYD;AACF,KA/FkB;;AAAA,SAgGnBU,wBAhGmB,GAgGSpC,cAAD,IAAoB;AAC7C,WAAKG,QAAL,CAAc;AAAEkC,QAAAA,YAAY,EAAErC;AAAhB,OAAd;AACD,KAlGkB;;AAAA,SAmGnBsC,YAnGmB,GAmGHP,IAAD,IAAWQ,KAAD,IAAW;AAClC,WAAKpC,QAAL,CAAc;AAAE,SAAC4B,IAAD,GAAQQ,KAAK,CAACC,MAAN,CAAaxB;AAAvB,OAAd;AACD,KArGkB;;AAEjB,SAAKyB,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE,CACb;AACEb,QAAAA,KAAK,eAAE,oBAAC,YAAD;AAAc,UAAA,EAAE,EAAC,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADT;AAEEb,QAAAA,KAAK,EAAE,MAFT;AAGER,QAAAA,EAAE,EAAE;AAHN,OADa,EAMb;AACEqB,QAAAA,KAAK,eAAE,oBAAC,YAAD;AAAc,UAAA,EAAE,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADT;AAEEb,QAAAA,KAAK,EAAE,OAFT;AAGER,QAAAA,EAAE,EAAE;AAHN,OANa,EAWb;AACEqB,QAAAA,KAAK,eAAE,oBAAC,YAAD;AAAc,UAAA,EAAE,EAAC,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADT;AAEEb,QAAAA,KAAK,EAAE,OAFT;AAGER,QAAAA,EAAE,EAAE;AAHN,OAXa,CADJ;AAkBX2B,MAAAA,OAAO,EAAE,EAlBE;AAmBXQ,MAAAA,QAAQ,EAAE,EAnBC;AAoBXC,MAAAA,YAAY,EAAE,KApBH;AAqBXC,MAAAA,YAAY,EAAE,EArBH;AAsBXC,MAAAA,UAAU,EAAE,KAtBD;AAuBXC,MAAAA,QAAQ,EAAE,EAvBC;AAwBXC,MAAAA,QAAQ,EAAE,EAxBC;AAyBXzC,MAAAA,SAAS,EAAE,IAzBA;AA0BXE,MAAAA,WAAW,EAAE,EA1BF;AA2BXC,MAAAA,SAAS,EAAE;AA3BA,KAAb;AA6BA,SAAKuC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBD,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKE,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBF,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKG,UAAL,GAAkB,KAAKA,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKZ,YAAL,GAAoB,KAAKA,YAAL,CAAkBY,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKd,wBAAL,GAAgC,KAAKA,wBAAL,CAA8Bc,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAK5C,mBAAL,GAA2B,KAAKA,mBAAL,CAAyB4C,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKnD,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BmD,IAA3B,CAAgC,IAAhC,CAA7B;AAED;;AA8DDG,EAAAA,UAAU,CAACC,IAAD,EAAO;AACf,QAAI,KAAKxD,KAAL,CAAWa,WAAX,CAAuBC,OAAvB,KAAmC/B,WAAvC,EAAoD;AAClD,UAAIgC,WAAW,GAAI,2CAA0CC,YAAY,CAACC,KAAM,oCAAmCuC,IAAI,CAACC,QAAL,CAAcC,aAAc,+CAA/I;AACA7D,MAAAA,YAAY,CAACsB,GAAb,CAAiBJ,WAAjB,EAA8BK,IAA9B,CAAoCC,QAAD,IAAc;AAC/C,YAAIA,QAAJ,EAAc;AACZ,cAAIC,eAAe,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAAd,CAAsBC,OAAD,IAAaA,OAAO,CAACC,MAA1C,CAAtB;AACA,cAAIC,OAAO,GAAG,EAAd;AACAL,UAAAA,eAAe,CAAClB,GAAhB,CAAqBqB,OAAD,IAAa;AAC/B,gBAAIG,MAAM,GAAG,EAAb;;AACA,gBAAI,CAACzC,CAAC,CAAC0C,OAAF,CAAUJ,OAAO,CAACK,MAAlB,CAAL,EAAgC;AAC9BF,cAAAA,MAAM,CAACG,KAAP,GAAeN,OAAO,CAACO,KAAR,CAAcC,IAA7B;AACAL,cAAAA,MAAM,CAAClB,EAAP,GAAYe,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAA9B;AACAkB,cAAAA,MAAM,CAACV,KAAP,GAAeO,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAAjC;AAEAiB,cAAAA,OAAO,CAACO,IAAR,CAAaN,MAAb;AACD;AACF,WATD;AAUAO,UAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ,EAAqB,SAArB;AAEA,eAAKtB,QAAL,CAAc;AAAEgC,YAAAA,OAAO,EAAEV;AAAX,WAAd;AACD;AACF,OAlBD;AAmBD,KArBD,MAqBO;AACL,UAAIZ,WAAW,GAAI,8BAA6ByC,IAAI,CAACC,QAAL,CAAcC,aAAc,iBAAgB1C,YAAY,CAACC,KAAM,+CAA/G;AACApB,MAAAA,YAAY,CAACsB,GAAb,CAAiBJ,WAAjB,EAA8BK,IAA9B,CAAoCC,QAAD,IAAc;AAC/C,YAAIA,QAAJ,EAAc;AACZ,cAAII,OAAO,GAAGJ,QAAQ,CAACE,IAAvB;;AACA,cAAIE,OAAO,CAACC,MAAZ,EAAoB;AAClB,gBAAIE,MAAM,GAAG,EAAb;AACAA,YAAAA,MAAM,CAACG,KAAP,GAAeN,OAAO,CAACO,KAAR,CAAcC,IAA7B;AACAL,YAAAA,MAAM,CAAClB,EAAP,GAAYe,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAA9B;AACAkB,YAAAA,MAAM,CAACV,KAAP,GAAeO,OAAO,CAACK,MAAR,CAAe,CAAf,EAAkBpB,EAAjC;AACA,iBAAKL,QAAL,CAAc;AAAEgC,cAAAA,OAAO,EAAE,CAACT,MAAD;AAAX,aAAd;AACD;AACF;AACF,OAXD;AAYD;;AACDO,IAAAA,OAAO,CAACC,GAAR,CAAYoB,IAAZ,EAAkB,UAAlB;AACA,QAAIjB,YAAY,GAAG,KAAKI,KAAL,CAAWC,aAAX,CAAyBe,IAAzB,CAChBlC,OAAD,IAAaA,OAAO,CAACP,KAAR,IAAiBsC,IAAI,CAACC,QAAL,CAAcG,aAD3B,CAAnB;AAGA,QAAIjD,WAAW,GAAG,KAAKX,KAAL,CAAW6C,QAAX,CAAoBc,IAApB,CACflC,OAAD,IAAaA,OAAO,CAACf,EAAR,IAAc8C,IAAI,CAACC,QAAL,CAAcC,aADzB,CAAlB;AAGA,QAAI9C,SAAS,GAAG;AACdmB,MAAAA,KAAK,EAAEyB,IAAI,CAACK,SADE;AAEdnD,MAAAA,EAAE,EAAE8C,IAAI,CAACM,QAFK;AAGd5C,MAAAA,KAAK,EAAEsC,IAAI,CAACM;AAHE,KAAhB;AAKA,SAAKzD,QAAL,CAAc;AACZ2C,MAAAA,UAAU,EAAE,IADA;AAEZC,MAAAA,QAAQ,EAAEO,IAFE;AAGZN,MAAAA,QAAQ,EAAEM,IAAI,CAACC,QAAL,CAAcM,KAHZ;AAIZxB,MAAAA,YAJY;AAKZM,MAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAW6C,QALT;AAMZlC,MAAAA,WANY;AAOZC,MAAAA;AAPY,KAAd;AASD;;AACD0C,EAAAA,kBAAkB,GAAG;AACnB,SAAKjD,QAAL,CAAc;AAAEyC,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACA,SAAK9C,KAAL,CAAWgE,QAAX,CAAoBtE,cAAc,CAAC,KAAKiD,KAAL,CAAWI,YAAZ,CAAlC;AACD;;AACDI,EAAAA,YAAY,CAACzC,EAAD,EAAK;AACf,SAAKL,QAAL,CAAc;AAAEyC,MAAAA,YAAY,EAAE,IAAhB;AAAsBC,MAAAA,YAAY,EAAErC;AAApC,KAAd;AACD;;AAED2C,EAAAA,kBAAkB,GAAG;AACnB,SAAKhD,QAAL,CAAc;AAAEyC,MAAAA,YAAY,EAAE,KAAhB;AAAuBC,MAAAA,YAAY,EAAE;AAArC,KAAd;AACD;;AACDkB,EAAAA,MAAM,GAAG;AACP9B,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKpC,KAAL,CAAW6C,QAAnC;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKO,KAAL,CAAWN,OAAlC;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,wEAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKrC,KAAL,CAAWkE,SAAX,CAAqB9D,GAArB,CAAyB,CAAC+D,YAAD,EAAeC,KAAf,kBACxB;AAAK,MAAA,SAAS,EAAC,uCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,YAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,YAAY,EAAED,YAFhB;AAGE,MAAA,YAAY,EAAE,KAAKhB,YAHrB;AAIE,MAAA,UAAU,EAAE,KAAKI,UAJnB;AAKE,MAAA,QAAQ,EAAE,KALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,CADH,CADF,EAeG,KAAKZ,KAAL,CAAWK,UAAX,KAA0B,IAA1B,gBACC,oBAAC,YAAD;AACE,MAAA,UAAU,EAAE,KAAKL,KAAL,CAAWK,UADzB;AAEE,MAAA,MAAM,EAAE,KAAKL,KAFf;AAGE,MAAA,YAAY,EAAE,KAAKH,YAHrB;AAIE,MAAA,wBAAwB,EAAE,KAAKF,wBAJjC;AAKE,MAAA,mBAAmB,EAAE,KAAK9B,mBAL5B;AAME,MAAA,qBAAqB,EAAE,KAAKP,qBAN9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAWC,EA1BJ,EA6BG,KAAK0C,KAAL,CAAWG,YAAX,KAA4B,IAA5B,gBACC,oBAAC,cAAD;AACE,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWG,YADpB;AAEE,MAAA,kBAAkB,EAAE,KAAKO,kBAF3B;AAGE,MAAA,kBAAkB,EAAE,KAAKC,kBAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAOC,EApCJ,CADF;AA8CD;;AA/NkC;;AAkOrC,SAASe,eAAT,CAAyB1B,KAAzB,EAAgC;AAC9B,SAAO;AACL9B,IAAAA,WAAW,EAAE8B,KAAK,CAAC2B,IAAN,CAAWzD,WADnB;AAEL0D,IAAAA,aAAa,EAAE5B,KAAK,CAAC6B,oBAAN,CAA2BC;AAFrC,GAAP;AAID;;AAED,eAAehG,OAAO,CAAC4F,eAAD,CAAP,CAAyBvE,YAAzB,CAAf","sourcesContent":["import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport { getSectionFromLevel } from '../../../../../actions/sectionAction';\nimport { getLevelListFromEstabType } from '../../../../../actions/classLevelAction';\nimport axios from 'axios';\nimport baseUrl from '../../../../../config/config';\nimport { getClassesByEstablishmentId } from '../../../../../actions/classeAction';\nimport { roleIdAdmin } from '../../../../../config/config';\nimport { roleIdProfessor } from '../../../../../config/config';\nimport { roleIdParent } from '../../../../../config/config';\nimport { roleIdStudent } from '../../../../../config/config';\nimport _ from 'lodash';\nimport { privateStatus, publicStatus, allStatus } from '../../../../../config/config';\nimport moment from 'moment';\nimport HomeworkItem from './HomeworkItem';\nimport DeleteHomework from './DeleteHomework';\nimport { deleteHomework } from '../../../../../actions/HomeworkAction';\nimport EditHomework from './EditHomework';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { classService } from '../../../../../_services/class.service';\n\nclass HomeworkList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      HomeworkTypes: [\n        {\n          label: <IntlMessages id=\"toDo.book.exercise\" />,\n          value: 'book',\n          id: 1,\n        },\n        {\n          label: <IntlMessages id=\"toDo.series.exercise\" />,\n          value: 'serie',\n          id: 2,\n        },\n        {\n          label: <IntlMessages id=\"toDo.other.exercise\" />,\n          value: 'other',\n          id: 3,\n        },\n      ],\n      classes: [],\n      subjects: [],\n      deleteIsopen: false,\n      itemIdDelete: '',\n      editIsopen: false,\n      itemEdit: {},\n      nameFile: '',\n      subjectId: null,\n      subjectItem: {},\n      classItem: {},\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCancelDelete = this.handleCancelDelete.bind(this);\n    this.handleSubmitDelete = this.handleSubmitDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeHomeworkType = this.handleChangeHomeworkType.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.handleChangeClassList = this.handleChangeClassList.bind(this);\n\n  }\n  handleChangeClassList = (selectedOption) => {\n    if (selectedOption != null) {\n      let classesId = _.map(selectedOption, 'id');\n      this.setState({\n        classesId,\n        isEmptylistClass: false,\n        classesData: selectedOption,\n      });\n    } else {\n      this.setState({ classesId: [] });\n    }\n  };\n  handleChangeSubject = (selectedOption) => {\n    this.setState({\n      subjectId: selectedOption.id,\n      subjectItem: selectedOption,\n      classItem: {},\n    });\n    if (this.props.userProfile.role_id === roleIdAdmin) {\n      let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${selectedOption.value}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then((response) => {\n        if (response) {\n          let classesSubjects = response.data.filter((element) => element.status);\n          let newList = [];\n          classesSubjects.map((element) => {\n            let object = {};\n            if (!_.isEmpty(element.course)) {\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n\n              newList.push(object);\n            }\n          });\n          console.log(newList, 'change subject');\n\n          this.setState({ classes: newList });\n        }\n      });\n    } else {\n      let apiEndpoint = `/assignment_class_subjects/${selectedOption.value}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then((response) => {\n        if (response) {\n          let element = response.data;\n          if (element.status) {\n            let object = {};\n            object.label = element.class.name;\n            object.id = element.course[0].id;\n            object.value = element.course[0].id;\n            this.setState({ classes: [object] });\n          }\n        }\n      });\n    }\n  };\n  handleChangeHomeworkType = (selectedOption) => {\n    this.setState({ homeworkType: selectedOption });\n  };\n  handleChange = (name) => (event) => {\n    this.setState({ [name]: event.target.value });\n  };\n  handleEdit(item) {\n    if (this.props.userProfile.role_id === roleIdAdmin) {\n      let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${item.homework.fk_id_subject}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then((response) => {\n        if (response) {\n          let classesSubjects = response.data.filter((element) => element.status);\n          let newList = [];\n          classesSubjects.map((element) => {\n            let object = {};\n            if (!_.isEmpty(element.course)) {\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n\n              newList.push(object);\n            }\n          });\n          console.log(newList, 'newList');\n\n          this.setState({ classes: newList });\n        }\n      });\n    } else {\n      let apiEndpoint = `/assignment_class_subjects/${item.homework.fk_id_subject}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then((response) => {\n        if (response) {\n          let element = response.data;\n          if (element.status) {\n            let object = {};\n            object.label = element.class.name;\n            object.id = element.course[0].id;\n            object.value = element.course[0].id;\n            this.setState({ classes: [object] });\n          }\n        }\n      });\n    }\n    console.log(item, 'ediiiiit');\n    let homeworkType = this.state.HomeworkTypes.find(\n      (element) => element.value == item.homework.homework_type\n    );\n    let subjectItem = this.props.subjects.find(\n      (element) => element.id == item.homework.fk_id_subject\n    );\n    let classItem = {\n      label: item.className,\n      id: item.courseId,\n      value: item.courseId,\n    };\n    this.setState({\n      editIsopen: true,\n      itemEdit: item,\n      nameFile: item.homework.title,\n      homeworkType,\n      subjects: this.props.subjects,\n      subjectItem,\n      classItem,\n    });\n  }\n  handleSubmitDelete() {\n    this.setState({ deleteIsopen: false });\n    this.props.dispatch(deleteHomework(this.state.itemIdDelete));\n  }\n  handleDelete(id) {\n    this.setState({ deleteIsopen: true, itemIdDelete: id });\n  }\n\n  handleCancelDelete() {\n    this.setState({ deleteIsopen: false, itemIdDelete: '' });\n  }\n  render() {\n    console.log('subjects', this.props.subjects);\n    console.log('classes', this.state.classes);\n\n    return (\n      <div className=\"col-xl-12 col-md-12 col-lg-12 col-sm-6 \">\n        <div className=\"   price-tables row pt-default d-flex flex-wrap justify-content-start \">\n          {this.props.homeworks.map((homeworkItem, index) => (\n            <div className=\"col-md-12 col-lg-6 col-sm-6 col-xl-3 \">\n              <HomeworkItem\n                key={index}\n                homeworkItem={homeworkItem}\n                handleDelete={this.handleDelete}\n                handleEdit={this.handleEdit}\n                archived={false}\n              />\n            </div>\n          ))}\n        </div>\n\n        {this.state.editIsopen === true ? (\n          <EditHomework\n            editIsopen={this.state.editIsopen}\n            values={this.state}\n            handleChange={this.handleChange}\n            handleChangeHomeworkType={this.handleChangeHomeworkType}\n            handleChangeSubject={this.handleChangeSubject}\n            handleChangeClassList={this.handleChangeClassList}\n\n          />\n        ) : (\n          ''\n        )}\n\n        {this.state.deleteIsopen === true ? (\n          <DeleteHomework\n            modal={this.state.deleteIsopen}\n            handleCancelDelete={this.handleCancelDelete}\n            handleSubmitDelete={this.handleSubmitDelete}\n          ></DeleteHomework>\n        ) : (\n          ''\n        )}\n        {/* {this.state.call == true ? (\n          <JitsiComponent values={this.state} />\n        ) : (\n          <div></div>\n        )} */}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userProfile: state.auth.userProfile,\n    ClassSettings: state.ClassSettingsReducer.classSettings,\n  };\n}\n\nexport default connect(mapStateToProps)(HomeworkList);\n"]},"metadata":{},"sourceType":"module"}