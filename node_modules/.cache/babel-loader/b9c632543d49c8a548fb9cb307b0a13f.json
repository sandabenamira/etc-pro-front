{"ast":null,"code":"import { classService } from \"../_services/class.service\";\nimport { SHOW_SUCCESS_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, ADD_EXAM_TYPE, GET_EXAM_TYPE, EDIT_EXAM_TYPE, DELETE_EXAM_TYPES, ARCHIVED_GET_EXAM_TYPES } from \"../constants/ActionTypes\";\nexport function addExamType(data) {\n  return dispatch => {\n    let apiEndpoint = `/exam_type?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response) {\n        dispatch({\n          type: ADD_EXAM_TYPE,\n          payload: response.data\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"La création est effectuée avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n}\nexport function editExamType(data) {\n  return dispatch => {\n    let apiEndpoint = `/exam_type/${data.id}?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then(response => {\n      if (response) {\n        dispatch({\n          type: EDIT_EXAM_TYPE,\n          payload: data\n        });\n      }\n    });\n  };\n}\nexport function getExamType(establishementId, schoolYearId) {\n  return dispatch => {\n    let apiEndpoint = `/exam_type?access_token=${localStorage.token}&filter[where][and][0][fk_id_establishment]=${establishementId}&filter[where][and][1][fk_id_school_year]=${schoolYearId}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        const list = response.data;\n        const ExamTypeList = list.filter(element => element.status);\n        const ArchivedExamTypeList = list.filter(element => element.status == false);\n        dispatch({\n          type: GET_EXAM_TYPE,\n          payload: ExamTypeList\n        });\n        dispatch({\n          type: ARCHIVED_GET_EXAM_TYPES,\n          payload: ArchivedExamTypeList\n        });\n      }\n    });\n  };\n}\nexport function deleteExamType(itemId) {\n  return dispatch => {\n    let apiEndpoint = `/exam_type/` + itemId.id + `?access_token=${localStorage.token}&filter[where][and][0][fk_id_establishment]=${localStorage.establishment_id}&filter[where][and][1][fk_id_school_year]=${localStorage.school_year_id}`;\n    classService.patch(apiEndpoint, {\n      status: false\n    }).then(response => {\n      dispatch({\n        type: DELETE_EXAM_TYPES,\n        payload: response.data\n      });\n    }).catch(function (error) {});\n  };\n}","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/ExamTypeAction.js"],"names":["classService","SHOW_SUCCESS_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","ADD_EXAM_TYPE","GET_EXAM_TYPE","EDIT_EXAM_TYPE","DELETE_EXAM_TYPES","ARCHIVED_GET_EXAM_TYPES","addExamType","data","dispatch","apiEndpoint","localStorage","token","post","then","response","type","payload","setTimeout","editExamType","id","put","getExamType","establishementId","schoolYearId","get","list","ExamTypeList","filter","element","status","ArchivedExamTypeList","deleteExamType","itemId","establishment_id","school_year_id","patch","catch","error"],"mappings":"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","sourcesContent":["import { classService } from \"../_services/class.service\";\nimport {\n   SHOW_SUCCESS_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  ADD_EXAM_TYPE,\n  GET_EXAM_TYPE,\n  EDIT_EXAM_TYPE,\n  DELETE_EXAM_TYPES,\n  ARCHIVED_GET_EXAM_TYPES,\n} from \"../constants/ActionTypes\";\nexport function addExamType(data) {\n  return (dispatch) => {\n    let apiEndpoint = `/exam_type?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then((response) => {\n      if (response) {\n        dispatch({ type: ADD_EXAM_TYPE, payload: response.data });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"La création est effectuée avec succès\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de la création merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n}\n\nexport function editExamType(data) {\n  return (dispatch) => {\n    let apiEndpoint = `/exam_type/${data.id}?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint,data).then((response) => {\n      if (response) {\n        dispatch({ type: EDIT_EXAM_TYPE, payload: data });\n      }\n    });\n  };\n}\n\nexport function getExamType(establishementId, schoolYearId) {\n  return (dispatch) => {\n    let apiEndpoint = `/exam_type?access_token=${localStorage.token}&filter[where][and][0][fk_id_establishment]=${establishementId}&filter[where][and][1][fk_id_school_year]=${schoolYearId}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        const list = response.data;\n        const ExamTypeList = list.filter((element) => element.status);\n        const ArchivedExamTypeList = list.filter(\n          (element) => element.status == false\n        );\n        dispatch({ type: GET_EXAM_TYPE, payload: ExamTypeList });\n        dispatch({type: ARCHIVED_GET_EXAM_TYPES,payload: ArchivedExamTypeList,\n        });\n      }\n    });\n  };\n}\n\nexport function deleteExamType(itemId) {\n  return (dispatch) => {\n    let apiEndpoint =\n      `/exam_type/` +\n      itemId.id +\n      `?access_token=${localStorage.token}&filter[where][and][0][fk_id_establishment]=${localStorage.establishment_id}&filter[where][and][1][fk_id_school_year]=${localStorage.school_year_id}`;\n    classService\n      .patch(apiEndpoint, {\n        status: false,\n      })\n      .then((response) => {\n        dispatch({ type: DELETE_EXAM_TYPES, payload: response.data });\n      })\n      .catch(function(error) {});\n  };\n}\n"]},"metadata":{},"sourceType":"module"}