{"ast":null,"code":"import React, { useState, useRef, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Loader = function Loader() {\n  return React.createElement(\"div\", null, \"Loading meeting...\");\n};\n\nvar Props = {\n  domain: 'meet.jit.si',\n  roomName: /*#__PURE__*/(Math.random() + 0.48151642).toString(36).substring(2)\n};\nvar ContainerStyle = {\n  width: '800px',\n  height: '400px'\n};\n\nvar FrameStyle = function FrameStyle(loading) {\n  return {\n    display: loading ? 'none' : 'block',\n    width: '100%',\n    height: '100%'\n  };\n};\n\nvar importJitsiApi = function importJitsiApi() {\n  return new Promise(function (resolve) {\n    try {\n      if (window.JitsiMeetExternalAPI) {\n        resolve(window.JitsiMeetExternalAPI);\n      } else {\n        var head = document.getElementsByTagName(\"head\")[0];\n        var script = document.createElement(\"script\");\n        script.setAttribute(\"type\", \"text/javascript\");\n        script.setAttribute(\"src\", \"https://meet.jit.si/external_api.js\");\n        head.addEventListener(\"load\", function (event) {\n          if (event.target.nodeName === \"SCRIPT\") {\n            resolve(window.JitsiMeetExternalAPI);\n          }\n        }, true);\n        head.appendChild(script);\n      }\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n};\n\nvar Jitsi = function Jitsi(props) {\n  var _Default$Props$props = _extends({}, Props, {}, props),\n      containerStyle = _Default$Props$props.containerStyle,\n      frameStyle = _Default$Props$props.frameStyle,\n      loadingComponent = _Default$Props$props.loadingComponent,\n      onAPILoad = _Default$Props$props.onAPILoad,\n      onIframeLoad = _Default$Props$props.onIframeLoad,\n      domain = _Default$Props$props.domain,\n      roomName = _Default$Props$props.roomName,\n      password = _Default$Props$props.password,\n      displayName = _Default$Props$props.displayName,\n      config = _Default$Props$props.config,\n      interfaceConfig = _Default$Props$props.interfaceConfig,\n      noSSL = _Default$Props$props.noSSL,\n      jwt = _Default$Props$props.jwt,\n      devices = _Default$Props$props.devices,\n      userInfo = _Default$Props$props.userInfo;\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var ref = useRef(null);\n  var Loader$1 = loadingComponent || Loader;\n\n  var startConference = function startConference(JitsiMeetExternalAPI) {\n    try {\n      console.log('interfaceConfig', interfaceConfig);\n      var options = {\n        roomName: roomName,\n        parentNode: ref.current,\n        configOverwrite: config,\n        interfaceConfigOverwrite: interfaceConfig,\n        noSSL: noSSL,\n        jwt: jwt,\n        onLoad: onIframeLoad,\n        devices: devices,\n        userInfo: userInfo\n      };\n      var api = new JitsiMeetExternalAPI(domain, options);\n      if (!api) throw new Error('Failed to create JitsiMeetExternalAPI istance');\n      if (onAPILoad) onAPILoad(api);\n      api.addEventListener('videoConferenceJoined', function () {\n        setLoading(false);\n        api.executeCommand('displayName', displayName);\n        if (domain === Props.domain && password) api.executeCommand('password', password);\n      });\n      /**\r\n       * If we are on a self hosted Jitsi domain, we need to become moderators before setting a password\r\n       * Issue: https://community.jitsi.org/t/lock-failed-on-jitsimeetexternalapi/32060\r\n       */\n\n      api.addEventListener('participantRoleChanged', function (e) {\n        if (domain !== Props.domain && password && e.role === 'moderator') api.executeCommand('password', password);\n      });\n    } catch (error) {\n      console.error('Failed to start the conference', error);\n    }\n  };\n\n  useEffect(function () {\n    importJitsiApi().then(function (jitsiApi) {\n      startConference(jitsiApi);\n    })[\"catch\"](function (err) {\n      console.error('Jitsi Meet API library not loaded.', err);\n    });\n  }, []);\n  return React.createElement(\"div\", {\n    id: 'react-jitsi-container',\n    style: _extends({}, ContainerStyle, {}, containerStyle)\n  }, loading && React.createElement(Loader$1, null), React.createElement(\"div\", {\n    id: 'react-jitsi-frame',\n    style: _extends({}, FrameStyle(loading), {}, frameStyle),\n    ref: ref\n  }));\n};\n\nexport default Jitsi;","map":{"version":3,"sources":["../src/defaults.tsx","../src/utils.ts","../src/Jitsi.tsx"],"names":["Loader","React","Props","domain","roomName","Math","ContainerStyle","width","height","FrameStyle","display","loading","importJitsiApi","window","resolve","head","document","script","event","Jitsi","containerStyle","frameStyle","loadingComponent","onAPILoad","onIframeLoad","password","displayName","config","interfaceConfig","noSSL","jwt","devices","userInfo","Default","props","setLoading","useState","ref","useRef","startConference","console","options","parentNode","configOverwrite","interfaceConfigOverwrite","onLoad","api","e","useEffect","id","style"],"mappings":";;;;;;;;;;;;;;;;;;;;AAGO,IAAMA,MAAM,GAAG,SAATA,MAAS,GAAA;AAAA,SAA0BC,KAAAA,CAAAA,aAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EAA1B,oBAA0BA,CAA1B;AAAf,CAAA;;AAEA,IAAMC,KAAK,GAAe;AAC7BC,EAAAA,MAAM,EADuB,aAAA;AAE7BC,EAAAA,QAAQ,EAAA,aAAE,CAACC,IAAI,CAAJA,MAAAA,KAAD,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,CAAA,CAAA;AAFmB,CAA1B;AAKA,IAAMC,cAAc,GAAwB;AAC/CC,EAAAA,KAAK,EAD0C,OAAA;AAE/CC,EAAAA,MAAM,EAAE;AAFuC,CAA5C;;AAKA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,OAAA,EAAA;AAAA,SAA4C;AAClEC,IAAAA,OAAO,EAAEC,OAAO,GAAA,MAAA,GADkD,OAAA;AAElEJ,IAAAA,KAAK,EAF6D,MAAA;AAGlEC,IAAAA,MAAM,EAAE;AAH0D,GAA5C;AAAnB,CAAA;;ACfA,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,GAAA;AAAA,SAAqB,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AAAA,QAAA;AAC/C,UAAGC,MAAM,CAAT,oBAAA,EAAgC;AAC5BC,QAAAA,OAAO,CAACD,MAAM,CAAdC,oBAAO,CAAPA;AADJ,OAAA,MAEO;AACH,YAAMC,IAAI,GAAGC,QAAQ,CAARA,oBAAAA,CAAAA,MAAAA,EAAb,CAAaA,CAAb;AACA,YAAMC,MAAM,GAAGD,QAAQ,CAARA,aAAAA,CAAf,QAAeA,CAAf;AAEAC,QAAAA,MAAM,CAANA,YAAAA,CAAAA,MAAAA,EAAAA,iBAAAA;AACAA,QAAAA,MAAM,CAANA,YAAAA,CAAAA,KAAAA,EAAAA,qCAAAA;AAEAF,QAAAA,IAAI,CAAJA,gBAAAA,CAAAA,MAAAA,EAA8B,UAAA,KAAA,EAAA;AAC1B,cAAIG,KAAK,CAALA,MAAAA,CAAAA,QAAAA,KAAJ,QAAA,EAAwC;AACpCJ,YAAAA,OAAO,CAACD,MAAM,CAAdC,oBAAO,CAAPA;AACH;AAHLC,SAAAA,EAAAA,IAAAA;AAMAA,QAAAA,IAAI,CAAJA,WAAAA,CAAAA,MAAAA;AACH;;;AAjB8C,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAArB,GAAqB,CAArB;AAAvB,CAAA;;ACKP,IAAMI,KAAK,GAAoB,SAAzBA,KAAyB,CAAA,KAAA,EAAA;0CAiBlBc,K,EAAAA,E,EAAkBC,K;MAfvBd,cAAAA,GAAAA,oBAAAA,CAAAA,c;MACAC,UAAAA,GAAAA,oBAAAA,CAAAA,U;MACAC,gBAAAA,GAAAA,oBAAAA,CAAAA,gB;MACAC,SAAAA,GAAAA,oBAAAA,CAAAA,S;MACAC,YAAAA,GAAAA,oBAAAA,CAAAA,Y;MACArB,MAAAA,GAAAA,oBAAAA,CAAAA,M;MACAC,QAAAA,GAAAA,oBAAAA,CAAAA,Q;MACAqB,QAAAA,GAAAA,oBAAAA,CAAAA,Q;MACAC,WAAAA,GAAAA,oBAAAA,CAAAA,W;MACAC,MAAAA,GAAAA,oBAAAA,CAAAA,M;MACAC,eAAAA,GAAAA,oBAAAA,CAAAA,e;MACAC,KAAAA,GAAAA,oBAAAA,CAAAA,K;MACAC,GAAAA,GAAAA,oBAAAA,CAAAA,G;MACAC,OAAAA,GAAAA,oBAAAA,CAAAA,O;MACAC,QAAAA,GAAAA,oBAAAA,CAAAA,Q;;kBAG0BI,QAAQ,CAAA,IAAA,C;MAA/BzB,OAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;MAASwB,UAAAA,GAAAA,SAAAA,CAAAA,CAAAA,C;;AAChB,MAAME,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;AAEA,MAAMtC,QAAM,GAAGsB,gBAAgB,IAA/B,MAAA;;AAEA,MAAMiB,eAAe,GAAG,SAAlBA,eAAkB,CAAA,oBAAA,EAAA;AAEpB,QAAI;AAEAC,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,iBAAAA,EAAAA,eAAAA;AAGA,UAAMC,OAAO,GAAwB;AACjCrC,QAAAA,QAAQ,EADyB,QAAA;AAEjCsC,QAAAA,UAAU,EAAEL,GAAG,CAFkB,OAAA;AAGjCM,QAAAA,eAAe,EAHkB,MAAA;AAIjCC,QAAAA,wBAAwB,EAJS,eAAA;AAKjCf,QAAAA,KAAK,EAL4B,KAAA;AAMjCC,QAAAA,GAAG,EAN8B,GAAA;AAOjCe,QAAAA,MAAM,EAP2B,YAAA;AAQjCd,QAAAA,OAAO,EAR0B,OAAA;AASjCC,QAAAA,QAAQ,EAARA;AATiC,OAArC;AAYA,UAAMc,GAAG,GAAG,IAAA,oBAAA,CAAA,MAAA,EAAZ,OAAY,CAAZ;AAEA,UAAI,CAAJ,GAAA,EAAU,MAAM,IAAA,KAAA,CAAN,+CAAM,CAAN;AAEV,UAAA,SAAA,EAAevB,SAAS,CAATA,GAAS,CAATA;AAEfuB,MAAAA,GAAG,CAAHA,gBAAAA,CAAAA,uBAAAA,EAA8C,YAAA;AAE1CX,QAAAA,UAAU,CAAVA,KAAU,CAAVA;AAEAW,QAAAA,GAAG,CAAHA,cAAAA,CAAAA,aAAAA,EAAAA,WAAAA;AAEA,YAAI3C,MAAM,KAAK8B,KAAAA,CAAX9B,MAAAA,IAAJ,QAAA,EACI2C,GAAG,CAAHA,cAAAA,CAAAA,UAAAA,EAAAA,QAAAA;AAPRA,OAAAA;AAWA;;;;;AAIAA,MAAAA,GAAG,CAAHA,gBAAAA,CAAAA,wBAAAA,EAA+C,UAAA,CAAA,EAAA;AAE3C,YAAI3C,MAAM,KAAK8B,KAAAA,CAAX9B,MAAAA,IAAAA,QAAAA,IAA+C4C,CAAC,CAADA,IAAAA,KAAnD,WAAA,EACID,GAAG,CAAHA,cAAAA,CAAAA,UAAAA,EAAAA,QAAAA;AAHRA,OAAAA;AAtCJ,KAAA,CA6CE,OAAA,KAAA,EAAc;AAAEN,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,gCAAAA,EAAAA,KAAAA;AAAwD;AA/C9E,GAAA;;AAmDAQ,EAAAA,SAAS,CAAC,YAAA;AACNpC,IAAAA,cAAc,GAAdA,IAAAA,CAAsB,UAAA,QAAA,EAAQ;AAC1B2B,MAAAA,eAAe,CAAfA,QAAe,CAAfA;AADJ3B,KAAAA,EAAAA,OAAAA,EAES,UAAA,GAAA,EAAG;AACR4B,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,oCAAAA,EAAAA,GAAAA;AAHJ5B,KAAAA;AADK,GAAA,EAAToC,EAAS,CAATA;AAQA,SACI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAKC,IAAAA,EAAE,EAAC,uBAAR;AAAgCC,IAAAA,KAAK,EAAA,QAAA,CAAA,EAAA,EAAA,cAAA,EAAA,EAAA,EAAA,cAAA;AAArC,GAAA,EACKvC,OAAO,IAAIV,KAAAA,CAAAA,aAAAA,CAAAA,QAAAA,EADhB,IACgBA,CADhB,EAEI,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAKgD,IAAAA,EAAE,EAAC,mBAAR;AAA4BC,IAAAA,KAAK,EAAA,QAAA,CAAA,EAAA,EAAOjB,UAAAA,CAAP,OAAOA,CAAP,EAAA,EAAA,EAAA,UAAA,CAAjC;AAAsFI,IAAAA,GAAG,EAAEA;AAA3F,GAAA,CAFJ,CADJ;AAnFJ,CAAA","sourcesContent":["import React from 'react'\nimport * as Type from './types'\n\nexport const Loader = (): React.ReactElement => <div>Loading meeting...</div>\n\nexport const Props: Type.Props = {\n    domain: 'meet.jit.si',\n    roomName: (Math.random() + 0.48151642).toString(36).substring(2),\n}\n\nexport const ContainerStyle: React.CSSProperties = {\n    width: '800px',\n    height: '400px',\n}\n\nexport const FrameStyle = (loading: boolean): React.CSSProperties => ({\n    display: loading ? 'none' : 'block',\n    width: '100%',\n    height: '100%',\n})\n","export const importJitsiApi = (): Promise<void> => new Promise(async (resolve) => {\n    if(window.JitsiMeetExternalAPI) {\n        resolve(window.JitsiMeetExternalAPI)\n    } else {\n        const head = document.getElementsByTagName(\"head\")[0];\n        const script = document.createElement(\"script\"); \n\n        script.setAttribute(\"type\", \"text/javascript\");\n        script.setAttribute(\"src\", \"https://meet.jit.si/external_api.js\");\n\n        head.addEventListener(\"load\", function(event: any) {\n            if (event.target.nodeName === \"SCRIPT\") {\n                resolve(window.JitsiMeetExternalAPI)\n            }\n        }, true);\n\n        head.appendChild(script); \n    }\n})","import React, { useState, useEffect, useRef } from 'react'\nimport { Props, JitsiMeetAPIOptions } from './types'\nimport * as Default from './defaults'\nimport { importJitsiApi } from './utils'\n\nconst Jitsi: React.FC<Props> = (props: Props) => {\n    const {\n        containerStyle,\n        frameStyle,\n        loadingComponent,\n        onAPILoad,\n        onIframeLoad,\n        domain,\n        roomName,\n        password,\n        displayName,\n        config,\n        interfaceConfig,\n        noSSL,\n        jwt,\n        devices,\n        userInfo,\n    } = { ...Default.Props, ...props }\n\n    const [loading, setLoading] = useState(true)\n    const ref = useRef<HTMLDivElement | null>(null)\n\n    const Loader = loadingComponent || Default.Loader\n\n    const startConference = (JitsiMeetExternalAPI: any): void => {\n\n        try {\n\n            console.log('interfaceConfig', interfaceConfig);\n            \n\n            const options: JitsiMeetAPIOptions = {\n                roomName,\n                parentNode: ref.current,\n                configOverwrite: config,\n                interfaceConfigOverwrite: interfaceConfig,\n                noSSL,\n                jwt,\n                onLoad: onIframeLoad,\n                devices,\n                userInfo,\n            }\n\n            const api = new JitsiMeetExternalAPI(domain, options)\n\n            if (!api) throw new Error('Failed to create JitsiMeetExternalAPI istance')\n\n            if (onAPILoad) onAPILoad(api)\n\n            api.addEventListener('videoConferenceJoined', () => {\n\n                setLoading(false)\n\n                api.executeCommand('displayName', displayName)\n\n                if (domain === Default.Props.domain && password)\n                    api.executeCommand('password', password)\n\n            })\n\n            /** \n             * If we are on a self hosted Jitsi domain, we need to become moderators before setting a password\n             * Issue: https://community.jitsi.org/t/lock-failed-on-jitsimeetexternalapi/32060\n             */\n            api.addEventListener('participantRoleChanged', (e: { id: string; role: string }) => {\n\n                if (domain !== Default.Props.domain && password && e.role === 'moderator')\n                    api.executeCommand('password', password)\n\n            })\n\n        } catch (error) { console.error('Failed to start the conference', error) }\n\n    }\n\n    useEffect(() => { \n        importJitsiApi().then(jitsiApi => {\n            startConference(jitsiApi);\n        }).catch(err => {\n            console.error('Jitsi Meet API library not loaded.', err)\n        })\n    }, [])\n\n    return (\n        <div id='react-jitsi-container' style={{ ...Default.ContainerStyle, ...containerStyle }}>\n            {loading && <Loader />}\n            <div id='react-jitsi-frame' style={{ ...Default.FrameStyle(loading), ...frameStyle }} ref={ref} />\n        </div>\n    )\n}\n\nexport default Jitsi\n"]},"metadata":{},"sourceType":"module"}