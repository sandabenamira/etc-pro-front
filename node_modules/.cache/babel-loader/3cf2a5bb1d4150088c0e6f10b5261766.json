{"ast":null,"code":"import { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport { SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE, GET_HOMEWORKS, ARCHIVED_GET_HOMEWORKS, ADD_NEW_HOMEWORK, DELETE_HOMEWORK, EDIT_HOMEWORK } from '../constants/ActionTypes';\nimport axios from 'axios';\nexport const addNewHomework = (data, homeworkFiles, classesData) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/addAndAssignHomework?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then(response => {\n      if (response && homeworkFiles.length > 0) {\n        let homeworkId = response.data.homework.id;\n        homeworkItem = response.data.homework;\n        let formadata = new FormData();\n        homeworkFiles.map((element, index) => {\n          let homeworkFile = element;\n          const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n          const fileName = 'Homework' + homeworkId + 'N' + index + '.' + fileExtension;\n          var object = {};\n          object.file = homeworkFile;\n          object.fileName = fileName;\n          const myNewFile = new File([object.file], fileName, {\n            type: object.file.type\n          });\n          formadata.append('file', myNewFile);\n        });\n        let filesURL = [];\n        const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n        axios({\n          url: URLMaterailCourse,\n          method: 'POST',\n          data: formadata\n        }).then(response => {\n          if (response) {\n            filesURL = response.data.result.files.file.map((urlFile, index) => {\n              return {\n                name: urlFile.name,\n                url_file: urlFile.providerResponse.location,\n                status: true,\n                assignement_date: new Date(),\n                update_date: new Date(),\n                fk_id_homework: homeworkId\n              };\n            });\n            let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n            classService.post(apiEndpointFiles, filesURL).then(homeworksFiles => {\n              if (homeworksFiles) {\n                classesData.forEach(element => {\n                  let object = {};\n                  object.classId = element.id;\n                  object.className = element.label;\n                  object.courseId = element.id;\n                  object.homework = { ...homeworkItem,\n                    homeworkFiles: homeworksFiles.data,\n                    subject: {\n                      name: data.subjectName,\n                      id: data.subjectId,\n                      color: data.subjectColor\n                    }\n                  };\n                  newhomework.push(object);\n                });\n                dispatch({\n                  type: ADD_NEW_HOMEWORK,\n                  payload: newhomework\n                });\n                dispatch({\n                  type: SHOW_SUCCESS_MESSAGE,\n                  payload: 'La création est effectuée avec succès'\n                });\n                setTimeout(() => {\n                  dispatch({\n                    type: HIDE_SUCCESS_MESSAGE\n                  });\n                }, 4000); // this.dispatch(getHomework)\n              } else {}\n            });\n          }\n        }).catch(err => {});\n      } else if (!response) {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      } else if (response && homeworkFiles.length == 0) {\n        classesData.forEach(element => {\n          let object = {};\n          object.classId = element.id;\n          object.className = element.label;\n          object.homework = { ...response.data.homework,\n            homeworkFiles: [],\n            subject: {\n              name: data.subjectName,\n              id: data.subjectId,\n              color: data.subjectColor\n            }\n          };\n          newhomework.push(object);\n        });\n        dispatch({\n          type: ADD_NEW_HOMEWORK,\n          payload: newhomework\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'La création est effectuée avec succès'\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport const deleteHomework = idHomework => {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/` + idHomework + `?access_token=${localStorage.token}`;\n    classService.patch(apiEndpoint, {\n      status: false\n    }).then(response => {\n      if (response) {\n        dispatch({\n          type: DELETE_HOMEWORK,\n          payload: response.data.id\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: \"L'archivage est effectué avec succès\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'archivage merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};\nexport function getHomework(establishmentId, schoolYearId, profileId, roleId) {\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/getHomework/${establishmentId}/${schoolYearId}/${profileId}/${roleId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then(response => {\n      if (response) {\n        let homeworkList = response.data.homeworks;\n        let archivedHomeworksList = [];\n        let homeworkListUnarchived = [];\n        homeworkList.map(elementItem => {\n          if (elementItem.homework.status === false) {\n            archivedHomeworksList.push(elementItem);\n          } else {\n            homeworkListUnarchived.push(elementItem);\n          }\n        });\n        dispatch({\n          type: GET_HOMEWORKS,\n          payload: homeworkListUnarchived\n        });\n        dispatch({\n          type: ARCHIVED_GET_HOMEWORKS,\n          payload: archivedHomeworksList\n        });\n      }\n    });\n  };\n}\nexport const editHomework = (data, homeworkFiles, classesData, oldFiles) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return dispatch => {\n    let apiEndpoint = `/homeworks_v4/edit-homework?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then(response => {\n      if (response) {\n        if (response.data.editHomeworkData.editResponse && homeworkFiles.length > 0) {\n          let homeworkId = response.data.editHomeworkData.homework.id;\n          homeworkItem = response.data.editHomeworkData.homework;\n          let formadata = new FormData();\n          homeworkFiles.map((element, index) => {\n            let homeworkFile = element;\n            const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n            const fileName = 'HomeworkEdited' + homeworkId + 'N' + index + '.' + fileExtension;\n            var object = {};\n            object.file = homeworkFile;\n            object.fileName = fileName;\n            const myNewFile = new File([object.file], fileName, {\n              type: object.file.type\n            });\n            formadata.append('file', myNewFile);\n          });\n          let filesURL = [];\n          const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n          axios({\n            url: URLMaterailCourse,\n            method: 'POST',\n            data: formadata\n          }).then(response => {\n            if (response) {\n              filesURL = response.data.result.files.file.map((urlFile, index) => {\n                return {\n                  name: urlFile.name,\n                  url_file: urlFile.providerResponse.location,\n                  status: true,\n                  assignement_date: new Date(),\n                  update_date: new Date(),\n                  fk_id_homework: homeworkId\n                };\n              });\n              let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n              classService.post(apiEndpointFiles, filesURL).then(homeworksFiles => {\n                if (homeworksFiles) {\n                  classesData.forEach(element => {\n                    let object = {};\n                    object.classId = element.id;\n                    object.className = element.label;\n                    object.courseId = element.id;\n                    object.homework = { ...homeworkItem,\n                      homeworkFiles: oldFiles.concat(homeworksFiles.data),\n                      subject: {\n                        name: data.subjectName,\n                        id: data.subjectId,\n                        color: data.subjectColor\n                      }\n                    };\n                    newhomework.push(object);\n                  });\n                  dispatch({\n                    type: EDIT_HOMEWORK,\n                    payload: newhomework\n                  });\n                  dispatch({\n                    type: SHOW_SUCCESS_MESSAGE,\n                    payload: 'La modification est effectuée avec succès'\n                  });\n                  setTimeout(() => {\n                    dispatch({\n                      type: HIDE_SUCCESS_MESSAGE\n                    });\n                  }, 4000); // this.dispatch(getHomework)\n                } else {}\n              });\n            }\n          }).catch(err => {});\n        } else if (!response.data.editHomeworkData.editResponse) {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\"\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_ERROR_MESSAGE\n            });\n          }, 4000);\n        } else if (response.data.editHomeworkData.editResponse && homeworkFiles.length == 0) {\n          classesData.forEach(element => {\n            let object = {};\n            object.classId = element.id;\n            object.className = element.label;\n            object.courseId = element.id;\n            object.homework = { ...response.data.editHomeworkData.homework,\n              homeworkFiles: oldFiles,\n              subject: {\n                name: data.subjectName,\n                id: data.subjectId,\n                color: data.subjectColor\n              }\n            };\n            newhomework.push(object);\n          });\n          dispatch({\n            type: EDIT_HOMEWORK,\n            payload: newhomework\n          });\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: 'La modification est effectuée avec succès'\n          });\n          setTimeout(() => {\n            dispatch({\n              type: HIDE_SUCCESS_MESSAGE\n            });\n          }, 4000);\n        }\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/HomeworkAction.js"],"names":["classService","baseUrl","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","GET_HOMEWORKS","ARCHIVED_GET_HOMEWORKS","ADD_NEW_HOMEWORK","DELETE_HOMEWORK","EDIT_HOMEWORK","axios","addNewHomework","data","homeworkFiles","classesData","newhomework","homeworkItem","dispatch","apiEndpoint","localStorage","token","post","then","response","length","homeworkId","homework","id","formadata","FormData","map","element","index","homeworkFile","fileExtension","name","replace","fileName","object","file","myNewFile","File","type","append","filesURL","URLMaterailCourse","url","method","result","files","urlFile","url_file","providerResponse","location","status","assignement_date","Date","update_date","fk_id_homework","apiEndpointFiles","homeworksFiles","forEach","classId","className","label","courseId","subject","subjectName","subjectId","color","subjectColor","push","payload","setTimeout","catch","err","deleteHomework","idHomework","patch","getHomework","establishmentId","schoolYearId","profileId","roleId","get","homeworkList","homeworks","archivedHomeworksList","homeworkListUnarchived","elementItem","editHomework","oldFiles","put","editHomeworkData","editResponse","concat"],"mappings":"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","sourcesContent":["import { classService } from '../_services/class.service';\nimport baseUrl from '../config/config';\nimport {\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE,\n  GET_HOMEWORKS,\n  ARCHIVED_GET_HOMEWORKS,\n  ADD_NEW_HOMEWORK,\n  DELETE_HOMEWORK,\n  EDIT_HOMEWORK,\n} from '../constants/ActionTypes';\nimport axios from 'axios';\n\nexport const addNewHomework = (data, homeworkFiles, classesData) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/addAndAssignHomework?access_token=${localStorage.token}`;\n    classService.post(apiEndpoint, data).then((response) => {\n      if (response && homeworkFiles.length > 0) {\n        let homeworkId = response.data.homework.id;\n        homeworkItem = response.data.homework;\n        let formadata = new FormData();\n        homeworkFiles.map((element, index) => {\n          let homeworkFile = element;\n          const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n          const fileName = 'Homework' + homeworkId + 'N' + index + '.' + fileExtension;\n\n          var object = {};\n          object.file = homeworkFile;\n          object.fileName = fileName;\n          const myNewFile = new File([object.file], fileName, {\n            type: object.file.type,\n          });\n          formadata.append('file', myNewFile);\n        });\n\n        let filesURL = [];\n\n        const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n        axios({\n          url: URLMaterailCourse,\n          method: 'POST',\n          data: formadata,\n        })\n          .then((response) => {\n            if (response) {\n              filesURL = response.data.result.files.file.map((urlFile, index) => {\n                return {\n                  name: urlFile.name,\n                  url_file: urlFile.providerResponse.location,\n                  status: true,\n                  assignement_date: new Date(),\n                  update_date: new Date(),\n                  fk_id_homework: homeworkId,\n                };\n              });\n              let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n              classService.post(apiEndpointFiles, filesURL).then((homeworksFiles) => {\n                if (homeworksFiles) {\n                  classesData.forEach((element) => {\n                    let object = {};\n                    object.classId = element.id;\n                    object.className = element.label;\n                    object.courseId = element.id;\n                    object.homework = {\n                      ...homeworkItem,\n                      homeworkFiles: homeworksFiles.data,\n                      subject: {\n                        name: data.subjectName,\n                        id: data.subjectId,\n                        color: data.subjectColor,\n                      },\n                    };\n                    newhomework.push(object);\n                  });\n                  dispatch({\n                    type: ADD_NEW_HOMEWORK,\n                    payload: newhomework,\n                  });\n                  dispatch({\n                    type: SHOW_SUCCESS_MESSAGE,\n                    payload: 'La création est effectuée avec succès',\n                  });\n\n                  setTimeout(() => {\n                    dispatch({ type: HIDE_SUCCESS_MESSAGE });\n                  }, 4000);\n                  // this.dispatch(getHomework)\n                } else {\n                }\n              });\n            }\n          })\n          .catch((err) => {});\n      } else if (!response) {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la création merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      } else if (response && homeworkFiles.length == 0) {\n        classesData.forEach((element) => {\n          let object = {};\n          object.classId = element.id;\n          object.className = element.label;\n          object.homework = {\n            ...response.data.homework,\n            homeworkFiles: [],\n            subject: {\n              name: data.subjectName,\n              id: data.subjectId,\n              color: data.subjectColor,\n            },\n          };\n          newhomework.push(object);\n        });\n        dispatch({\n          type: ADD_NEW_HOMEWORK,\n          payload: newhomework,\n        });\n\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'La création est effectuée avec succès',\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n\nexport const deleteHomework = (idHomework) => {\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/` + idHomework + `?access_token=${localStorage.token}`;\n    classService\n      .patch(apiEndpoint, {\n        status: false,\n      })\n      .then((response) => {\n        if (response) {\n          dispatch({ type: DELETE_HOMEWORK, payload: response.data.id });\n\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: \"L'archivage est effectué avec succès\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 4000);\n        } else {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"Une erreur est survenue lors de l'archivage merci d'essayer à nouveau\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 4000);\n        }\n      });\n  };\n};\n\nexport function getHomework(establishmentId, schoolYearId, profileId, roleId) {\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/getHomework/${establishmentId}/${schoolYearId}/${profileId}/${roleId}?access_token=${localStorage.token}`;\n    classService.get(apiEndpoint).then((response) => {\n      if (response) {\n        let homeworkList = response.data.homeworks;\n        let archivedHomeworksList = [];\n        let homeworkListUnarchived = [];\n\n        homeworkList.map((elementItem) => {\n          if (elementItem.homework.status === false) {\n            archivedHomeworksList.push(elementItem);\n          } else {\n            homeworkListUnarchived.push(elementItem);\n          }\n        });\n\n        dispatch({\n          type: GET_HOMEWORKS,\n          payload: homeworkListUnarchived,\n        });\n        dispatch({\n          type: ARCHIVED_GET_HOMEWORKS,\n          payload: archivedHomeworksList,\n        });\n      }\n    });\n  };\n}\n\nexport const editHomework = (data, homeworkFiles, classesData, oldFiles) => {\n  let newhomework = [];\n  let homeworkItem = {};\n  return (dispatch) => {\n    let apiEndpoint = `/homeworks_v4/edit-homework?access_token=${localStorage.token}`;\n    classService.put(apiEndpoint, data).then((response) => {\n      if (response) {\n        if (response.data.editHomeworkData.editResponse && homeworkFiles.length > 0) {\n          let homeworkId = response.data.editHomeworkData.homework.id;\n          homeworkItem = response.data.editHomeworkData.homework;\n          let formadata = new FormData();\n          homeworkFiles.map((element, index) => {\n            let homeworkFile = element;\n            const fileExtension = homeworkFile.name.replace(/^.*\\./, '');\n\n            const fileName = 'HomeworkEdited' + homeworkId + 'N' + index + '.' + fileExtension;\n\n            var object = {};\n            object.file = homeworkFile;\n            object.fileName = fileName;\n            const myNewFile = new File([object.file], fileName, {\n              type: object.file.type,\n            });\n            formadata.append('file', myNewFile);\n          });\n\n          let filesURL = [];\n\n          const URLMaterailCourse = `${baseUrl.baseUrl}/containers/classebook.data.storage/upload?access_token=${localStorage.token}`;\n          axios({\n            url: URLMaterailCourse,\n            method: 'POST',\n            data: formadata,\n          })\n            .then((response) => {\n              if (response) {\n                filesURL = response.data.result.files.file.map((urlFile, index) => {\n                  return {\n                    name: urlFile.name,\n                    url_file: urlFile.providerResponse.location,\n                    status: true,\n                    assignement_date: new Date(),\n                    update_date: new Date(),\n                    fk_id_homework: homeworkId,\n                  };\n                });\n                let apiEndpointFiles = `/homeworks_files_v4?access_token=${localStorage.token}`;\n                classService.post(apiEndpointFiles, filesURL).then((homeworksFiles) => {\n                  if (homeworksFiles) {\n                    classesData.forEach((element) => {\n                      let object = {};\n                      object.classId = element.id;\n                      object.className = element.label;\n                      object.courseId = element.id;\n\n                      object.homework = {\n                        ...homeworkItem,\n                        homeworkFiles: oldFiles.concat(homeworksFiles.data),\n                        subject: {\n                          name: data.subjectName,\n                          id: data.subjectId,\n                          color: data.subjectColor,\n                        },\n                      };\n                      newhomework.push(object);\n                    });\n                    dispatch({\n                      type: EDIT_HOMEWORK,\n                      payload: newhomework,\n                    });\n                    dispatch({\n                      type: SHOW_SUCCESS_MESSAGE,\n                      payload: 'La modification est effectuée avec succès',\n                    });\n\n                    setTimeout(() => {\n                      dispatch({ type: HIDE_SUCCESS_MESSAGE });\n                    }, 4000);\n                    // this.dispatch(getHomework)\n                  } else {\n                  }\n                });\n              }\n            })\n            .catch((err) => {});\n        } else if (!response.data.editHomeworkData.editResponse) {\n          dispatch({\n            type: SHOW_ERROR_MESSAGE,\n            payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\",\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_ERROR_MESSAGE });\n          }, 4000);\n        } else if (response.data.editHomeworkData.editResponse && homeworkFiles.length == 0) {\n          classesData.forEach((element) => {\n            let object = {};\n            object.classId = element.id;\n            object.className = element.label;\n            object.courseId = element.id;\n\n            object.homework = {\n              ...response.data.editHomeworkData.homework,\n              homeworkFiles: oldFiles,\n              subject: {\n                name: data.subjectName,\n                id: data.subjectId,\n                color: data.subjectColor,\n              },\n            };\n            newhomework.push(object);\n          });\n          dispatch({\n            type: EDIT_HOMEWORK,\n            payload: newhomework,\n          });\n\n          dispatch({\n            type: SHOW_SUCCESS_MESSAGE,\n            payload: 'La modification est effectuée avec succès',\n          });\n          setTimeout(() => {\n            dispatch({ type: HIDE_SUCCESS_MESSAGE });\n          }, 4000);\n        }\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de la modification merci d'essayer à nouveau\",\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}