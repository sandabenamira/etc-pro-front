{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Learning/routes/Homeworks/HomeworkList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getSectionFromLevel } from '../../../../../actions/sectionAction';\nimport { getLevelListFromEstabType } from '../../../../../actions/classLevelAction';\nimport axios from 'axios';\nimport baseUrl from '../../../../../config/config';\nimport { getClassesByEstablishmentId } from '../../../../../actions/classeAction';\nimport { roleIdAdmin } from '../../../../../config/config';\nimport { roleIdProfessor } from '../../../../../config/config';\nimport { roleIdParent } from '../../../../../config/config';\nimport { roleIdStudent } from '../../../../../config/config';\nimport _ from 'lodash';\nimport { privateStatus, publicStatus, allStatus } from '../../../../../config/config';\nimport moment from 'moment';\nimport HomeworkItem from './HomeworkItem';\nimport DeleteHomework from './DeleteHomework';\nimport { deleteHomework } from '../../../../../actions/HomeworkAction';\nimport EditHomework from './EditHomework';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { classService } from '../../../../../_services/class.service';\n\nclass HomeworkList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeDate = name => date => {\n      this.setState({\n        [name]: date\n      }); // if (name === 'publicationDate') {\n      //   this.setState({ renderingDate: date, correctionDate: date });\n      // } else if (name === 'renderingDate') {\n      //   this.setState({ correctionDate: date });\n      // }\n    };\n\n    this.handleChangeClassList = selectedOption => {\n      if (selectedOption != null) {\n        let classesId = _.map(selectedOption, 'id');\n\n        this.setState({\n          classesId,\n          isEmptylistClass: false,\n          classItem: selectedOption\n        });\n      } else {\n        this.setState({\n          classesId: []\n        });\n      }\n    };\n\n    this.handleChangeSubject = selectedOption => {\n      if (selectedOption.id != this.state.subjectId) {\n        this.setState({\n          subjectId: selectedOption.id,\n          subjectItem: selectedOption,\n          classItem: []\n        });\n\n        if (this.props.userProfile.role_id === roleIdAdmin) {\n          let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${selectedOption.value}&filter[include]=class&filter[include]=course`;\n          classService.get(apiEndpoint).then(response => {\n            if (response) {\n              let classesSubjects = response.data.filter(element => element.status);\n              let newList = [];\n              classesSubjects.map(element => {\n                let object = {};\n\n                if (!_.isEmpty(element.course)) {\n                  object.label = element.class.name;\n                  object.id = element.course[0].id;\n                  object.value = element.course[0].id;\n                  newList.push(object);\n                }\n              });\n              this.setState({\n                classes: newList\n              });\n            }\n          });\n        } else {\n          let apiEndpoint = `/assignment_class_subjects/${selectedOption.value}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n          classService.get(apiEndpoint).then(response => {\n            if (response) {\n              let element = response.data;\n\n              if (element.status) {\n                let object = {};\n                object.label = element.class.name;\n                object.id = element.course[0].id;\n                object.value = element.course[0].id;\n                this.setState({\n                  classes: [object]\n                });\n              }\n            }\n          });\n        }\n      }\n    };\n\n    this.handleChangeHomeworkType = selectedOption => {\n      this.setState({\n        homeworkType: selectedOption\n      });\n    };\n\n    this.handleChange = name => event => {\n      this.setState({\n        [name]: event.target.value\n      });\n    };\n\n    this.state = {\n      HomeworkTypes: [{\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.book.exercise\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 18\n          }\n        }),\n        value: 'book',\n        id: 1\n      }, {\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.series.exercise\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 18\n          }\n        }),\n        value: 'serie',\n        id: 2\n      }, {\n        label: /*#__PURE__*/React.createElement(IntlMessages, {\n          id: \"toDo.other.exercise\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 18\n          }\n        }),\n        value: 'other',\n        id: 3\n      }],\n      classes: [],\n      subjects: [],\n      deleteIsopen: false,\n      itemIdDelete: '',\n      editIsopen: false,\n      itemEdit: {},\n      nameFile: '',\n      subjectId: '',\n      subjectItem: {},\n      classItem: [{}],\n      publicationDate: new Date(),\n      postTime: new Date(),\n      renderingDate: new Date(),\n      correctionDate: new Date(),\n      description: ''\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCancelDelete = this.handleCancelDelete.bind(this);\n    this.handleSubmitDelete = this.handleSubmitDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeHomeworkType = this.handleChangeHomeworkType.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.handleChangeClassList = this.handleChangeClassList.bind(this);\n    this.cancelModal = this.cancelModal.bind(this);\n    this.handleChangeDate = this.handleChangeDate.bind(this);\n  }\n\n  handleEdit(item) {\n    if (this.props.userProfile.role_id === roleIdAdmin) {\n      let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${item.homework.fk_id_subject}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then(response => {\n        if (response) {\n          let classesSubjects = response.data.filter(element => element.status);\n          let newList = [];\n          classesSubjects.map(element => {\n            let object = {};\n\n            if (!_.isEmpty(element.course)) {\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n              newList.push(object);\n            }\n          });\n          this.setState({\n            classes: newList\n          });\n        }\n      });\n    } else {\n      let apiEndpoint = `/assignment_class_subjects/${item.homework.fk_id_subject}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then(response => {\n        if (response) {\n          let element = response.data;\n\n          if (element.status) {\n            let object = {};\n            object.label = element.class.name;\n            object.id = element.course[0].id;\n            object.value = element.course[0].id;\n            this.setState({\n              classes: [object]\n            });\n          }\n        }\n      });\n    }\n\n    console.log(item, 'ediiiiit');\n    let homeworkType = this.state.HomeworkTypes.find(element => element.value == item.homework.homework_type);\n    let subjectItem = this.props.subjects.find(element => element.id == item.homework.fk_id_subject);\n    let classItem = {\n      label: item.className,\n      id: item.courseId,\n      value: item.courseId\n    };\n    this.setState({\n      editIsopen: true,\n      itemEdit: item,\n      nameFile: item.homework.title,\n      homeworkType,\n      subjects: this.props.subjects,\n      subjectItem,\n      subjectId: item.homework.fk_id_subject,\n      classItem: [classItem],\n      description: item.homework.description,\n      publicationDate: item.homework.publication_date,\n      renderingDate: item.homework.rendering_date,\n      correctionDate: item.homework.correction_date\n    });\n  }\n\n  handleSubmitDelete() {\n    this.setState({\n      deleteIsopen: false\n    });\n    this.props.dispatch(deleteHomework(this.state.itemIdDelete));\n  }\n\n  handleDelete(id) {\n    this.setState({\n      deleteIsopen: true,\n      itemIdDelete: id\n    });\n  }\n\n  handleCancelDelete() {\n    this.setState({\n      deleteIsopen: false,\n      itemIdDelete: ''\n    });\n  }\n\n  cancelModal() {\n    this.setState({\n      classes: [],\n      subjects: [],\n      editIsopen: false,\n      itemEdit: {},\n      nameFile: '',\n      subjectId: null,\n      subjectItem: {},\n      classItem: [{}]\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-12 col-md-12 col-lg-12 col-sm-6 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"   price-tables row pt-default d-flex flex-wrap justify-content-start \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }\n    }, this.props.homeworks.map((homeworkItem, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 col-lg-6 col-sm-6 col-xl-3 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(HomeworkItem, {\n      key: index,\n      homeworkItem: homeworkItem,\n      handleDelete: this.handleDelete,\n      handleEdit: this.handleEdit,\n      archived: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }\n    })))), this.state.editIsopen === true ? /*#__PURE__*/React.createElement(EditHomework, {\n      editIsopen: this.state.editIsopen,\n      values: this.state,\n      handleChange: this.handleChange,\n      handleChangeHomeworkType: this.handleChangeHomeworkType,\n      handleChangeSubject: this.handleChangeSubject,\n      handleChangeClassList: this.handleChangeClassList,\n      cancelModal: this.cancelModal,\n      handleChangeDate: this.handleChangeDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }) : '', this.state.deleteIsopen === true ? /*#__PURE__*/React.createElement(DeleteHomework, {\n      modal: this.state.deleteIsopen,\n      handleCancelDelete: this.handleCancelDelete,\n      handleSubmitDelete: this.handleSubmitDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }\n    }) : '');\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userProfile: state.auth.userProfile,\n    ClassSettings: state.ClassSettingsReducer.classSettings\n  };\n}\n\nexport default connect(mapStateToProps)(HomeworkList);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/app/routes/Learning/routes/Homeworks/HomeworkList.js"],"names":["React","Component","connect","getSectionFromLevel","getLevelListFromEstabType","axios","baseUrl","getClassesByEstablishmentId","roleIdAdmin","roleIdProfessor","roleIdParent","roleIdStudent","_","privateStatus","publicStatus","allStatus","moment","HomeworkItem","DeleteHomework","deleteHomework","EditHomework","IntlMessages","classService","HomeworkList","constructor","props","handleChangeDate","name","date","setState","handleChangeClassList","selectedOption","classesId","map","isEmptylistClass","classItem","handleChangeSubject","id","state","subjectId","subjectItem","userProfile","role_id","apiEndpoint","localStorage","token","value","get","then","response","classesSubjects","data","filter","element","status","newList","object","isEmpty","course","label","class","push","classes","handleChangeHomeworkType","homeworkType","handleChange","event","target","HomeworkTypes","subjects","deleteIsopen","itemIdDelete","editIsopen","itemEdit","nameFile","publicationDate","Date","postTime","renderingDate","correctionDate","description","handleDelete","bind","handleCancelDelete","handleSubmitDelete","handleEdit","cancelModal","item","homework","fk_id_subject","console","log","find","homework_type","className","courseId","title","publication_date","rendering_date","correction_date","dispatch","render","homeworks","homeworkItem","index","mapStateToProps","auth","ClassSettings","ClassSettingsReducer","classSettings"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport { getSectionFromLevel } from '../../../../../actions/sectionAction';\nimport { getLevelListFromEstabType } from '../../../../../actions/classLevelAction';\nimport axios from 'axios';\nimport baseUrl from '../../../../../config/config';\nimport { getClassesByEstablishmentId } from '../../../../../actions/classeAction';\nimport { roleIdAdmin } from '../../../../../config/config';\nimport { roleIdProfessor } from '../../../../../config/config';\nimport { roleIdParent } from '../../../../../config/config';\nimport { roleIdStudent } from '../../../../../config/config';\nimport _ from 'lodash';\nimport { privateStatus, publicStatus, allStatus } from '../../../../../config/config';\nimport moment from 'moment';\nimport HomeworkItem from './HomeworkItem';\nimport DeleteHomework from './DeleteHomework';\nimport { deleteHomework } from '../../../../../actions/HomeworkAction';\nimport EditHomework from './EditHomework';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { classService } from '../../../../../_services/class.service';\n\nclass HomeworkList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      HomeworkTypes: [\n        {\n          label: <IntlMessages id=\"toDo.book.exercise\" />,\n          value: 'book',\n          id: 1,\n        },\n        {\n          label: <IntlMessages id=\"toDo.series.exercise\" />,\n          value: 'serie',\n          id: 2,\n        },\n        {\n          label: <IntlMessages id=\"toDo.other.exercise\" />,\n          value: 'other',\n          id: 3,\n        },\n      ],\n      classes: [],\n      subjects: [],\n      deleteIsopen: false,\n      itemIdDelete: '',\n      editIsopen: false,\n      itemEdit: {},\n      nameFile: '',\n      subjectId: '',\n      subjectItem: {},\n      classItem: [{}],\n      publicationDate: new Date(),\n      postTime: new Date(),\n      renderingDate: new Date(),\n      correctionDate: new Date(),\n      description: '',\n    };\n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleCancelDelete = this.handleCancelDelete.bind(this);\n    this.handleSubmitDelete = this.handleSubmitDelete.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeHomeworkType = this.handleChangeHomeworkType.bind(this);\n    this.handleChangeSubject = this.handleChangeSubject.bind(this);\n    this.handleChangeClassList = this.handleChangeClassList.bind(this);\n    this.cancelModal = this.cancelModal.bind(this);\n    this.handleChangeDate = this.handleChangeDate.bind(this);\n  }\n  handleChangeDate = (name) => (date) => {\n    this.setState({ [name]: date });\n    // if (name === 'publicationDate') {\n    //   this.setState({ renderingDate: date, correctionDate: date });\n    // } else if (name === 'renderingDate') {\n    //   this.setState({ correctionDate: date });\n    // }\n  };\n  handleChangeClassList = (selectedOption) => {\n    if (selectedOption != null) {\n      let classesId = _.map(selectedOption, 'id');\n      this.setState({\n        classesId,\n        isEmptylistClass: false,\n        classItem: selectedOption,\n      });\n    } else {\n      this.setState({ classesId: [] });\n    }\n  };\n  handleChangeSubject = (selectedOption) => {\n    if (selectedOption.id != this.state.subjectId) {\n      this.setState({\n        subjectId: selectedOption.id,\n        subjectItem: selectedOption,\n        classItem: [],\n      });\n      if (this.props.userProfile.role_id === roleIdAdmin) {\n        let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${selectedOption.value}&filter[include]=class&filter[include]=course`;\n        classService.get(apiEndpoint).then((response) => {\n          if (response) {\n            let classesSubjects = response.data.filter((element) => element.status);\n            let newList = [];\n            classesSubjects.map((element) => {\n              let object = {};\n              if (!_.isEmpty(element.course)) {\n                object.label = element.class.name;\n                object.id = element.course[0].id;\n                object.value = element.course[0].id;\n\n                newList.push(object);\n              }\n            });\n\n            this.setState({ classes: newList });\n          }\n        });\n      } else {\n        let apiEndpoint = `/assignment_class_subjects/${selectedOption.value}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n        classService.get(apiEndpoint).then((response) => {\n          if (response) {\n            let element = response.data;\n            if (element.status) {\n              let object = {};\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n              this.setState({ classes: [object] });\n            }\n          }\n        });\n      }\n    }\n  };\n  handleChangeHomeworkType = (selectedOption) => {\n    this.setState({ homeworkType: selectedOption });\n  };\n  handleChange = (name) => (event) => {\n    this.setState({ [name]: event.target.value });\n  };\n  handleEdit(item) {\n    if (this.props.userProfile.role_id === roleIdAdmin) {\n      let apiEndpoint = `/assignment_class_subjects?access_token=${localStorage.token}&filter[where][fk_id_subject_v4]=${item.homework.fk_id_subject}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then((response) => {\n        if (response) {\n          let classesSubjects = response.data.filter((element) => element.status);\n          let newList = [];\n          classesSubjects.map((element) => {\n            let object = {};\n            if (!_.isEmpty(element.course)) {\n              object.label = element.class.name;\n              object.id = element.course[0].id;\n              object.value = element.course[0].id;\n\n              newList.push(object);\n            }\n          });\n\n          this.setState({ classes: newList });\n        }\n      });\n    } else {\n      let apiEndpoint = `/assignment_class_subjects/${item.homework.fk_id_subject}?access_token=${localStorage.token}&filter[include]=class&filter[include]=course`;\n      classService.get(apiEndpoint).then((response) => {\n        if (response) {\n          let element = response.data;\n          if (element.status) {\n            let object = {};\n            object.label = element.class.name;\n            object.id = element.course[0].id;\n            object.value = element.course[0].id;\n            this.setState({ classes: [object] });\n          }\n        }\n      });\n    }\n    console.log(item, 'ediiiiit');\n    let homeworkType = this.state.HomeworkTypes.find(\n      (element) => element.value == item.homework.homework_type\n    );\n    let subjectItem = this.props.subjects.find(\n      (element) => element.id == item.homework.fk_id_subject\n    );\n    let classItem = {\n      label: item.className,\n      id: item.courseId,\n      value: item.courseId,\n    };\n    this.setState({\n      editIsopen: true,\n      itemEdit: item,\n      nameFile: item.homework.title,\n      homeworkType,\n      subjects: this.props.subjects,\n      subjectItem,\n      subjectId: item.homework.fk_id_subject,\n      classItem: [classItem],\n      description: item.homework.description,\n      publicationDate: item.homework.publication_date,\n      renderingDate: item.homework.rendering_date,\n      correctionDate: item.homework.correction_date,\n    });\n  }\n  handleSubmitDelete() {\n    this.setState({ deleteIsopen: false });\n    this.props.dispatch(deleteHomework(this.state.itemIdDelete));\n  }\n  handleDelete(id) {\n    this.setState({ deleteIsopen: true, itemIdDelete: id });\n  }\n\n  handleCancelDelete() {\n    this.setState({ deleteIsopen: false, itemIdDelete: '' });\n  }\n  cancelModal() {\n    this.setState({\n      classes: [],\n      subjects: [],\n      editIsopen: false,\n      itemEdit: {},\n      nameFile: '',\n      subjectId: null,\n      subjectItem: {},\n      classItem: [{}],\n    });\n  }\n  render() {\n    return (\n      <div className=\"col-xl-12 col-md-12 col-lg-12 col-sm-6 \">\n        <div className=\"   price-tables row pt-default d-flex flex-wrap justify-content-start \">\n          {this.props.homeworks.map((homeworkItem, index) => (\n            <div className=\"col-md-12 col-lg-6 col-sm-6 col-xl-3 \">\n              <HomeworkItem\n                key={index}\n                homeworkItem={homeworkItem}\n                handleDelete={this.handleDelete}\n                handleEdit={this.handleEdit}\n                archived={false}\n              />\n            </div>\n          ))}\n        </div>\n\n        {this.state.editIsopen === true ? (\n          <EditHomework\n            editIsopen={this.state.editIsopen}\n            values={this.state}\n            handleChange={this.handleChange}\n            handleChangeHomeworkType={this.handleChangeHomeworkType}\n            handleChangeSubject={this.handleChangeSubject}\n            handleChangeClassList={this.handleChangeClassList}\n            cancelModal={this.cancelModal}\n            handleChangeDate={this.handleChangeDate}\n          />\n        ) : (\n          ''\n        )}\n\n        {this.state.deleteIsopen === true ? (\n          <DeleteHomework\n            modal={this.state.deleteIsopen}\n            handleCancelDelete={this.handleCancelDelete}\n            handleSubmitDelete={this.handleSubmitDelete}\n          ></DeleteHomework>\n        ) : (\n          ''\n        )}\n        {/* {this.state.call == true ? (\n          <JitsiComponent values={this.state} />\n        ) : (\n          <div></div>\n        )} */}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userProfile: state.auth.userProfile,\n    ClassSettings: state.ClassSettingsReducer.classSettings,\n  };\n}\n\nexport default connect(mapStateToProps)(HomeworkList);\n"]},"metadata":{},"sourceType":"module"}