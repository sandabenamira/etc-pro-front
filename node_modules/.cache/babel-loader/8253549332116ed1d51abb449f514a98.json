{"ast":null,"code":"var _jsxFileName = \"/home/oem/Documents/projects/educap-pro/educap-pro-front/src/app/routes/GradesMenu/routes/Grade/Grades.js\";\nimport React from 'react';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { UncontrolledAlert } from 'reactstrap';\nimport TextField from '@material-ui/core/TextField';\nimport CardBox from '../../../../../components/CardBox/index';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListGrade from './ListGrade.js';\nimport { connect } from 'react-redux';\nimport { addGrade, getGrades, updateGrade, updateAlerte, resetAlerte } from '../../../../../actions/noteActions';\nimport { getSubject } from '../../../../../actions/subjectAction';\nimport { getExam } from '../../../../../actions/examAction';\nimport { getClasses } from '../../../../../actions/classeAction';\nimport { getLevelsVirtualClass } from '../../../../../actions/classLevelAction';\nimport { getEstablishment } from '../../../../../actions/establishmentAction';\nimport { getSections, getSectionFromLevel } from '../../../../../actions/sectionAction';\nimport { getStudentClass } from '../../../../../actions/RegistreAction';\nimport { subjectsByLevelBySection } from '../../../../../actions/subjectAction';\nimport axios from 'axios';\nimport baseUrl from '../../../../../config/config';\nimport _ from 'lodash';\n\nfunction mapStateToProps(state) {\n  return {\n    classSections: state.classSections.remoteSections,\n    establishments: state.establishment.remoteEstablishments,\n    levels: state.ClassLevels.remoteLevels,\n    subjects: state.subject.remoteSubjects,\n    classes: state.classes,\n    students: state.callRegister.studentsClass,\n    settings: state.settings.locale,\n    exams: state.exam.remoteExams,\n    grades: state.grade.grades,\n    successStatus: state.alert.success,\n    errorStatus: state.alert.error,\n    message: state.alert.message\n  };\n}\n\nconst periodExam = [{\n  value: '1er Trimestre',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"first.trimester\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }\n  })\n}, {\n  value: '2eme Trimestre',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"second.trimester\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }\n  })\n}, {\n  value: '3eme Trimestre',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"third.trimester\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }\n  })\n}, {\n  value: 'Session Controle',\n  label: /*#__PURE__*/React.createElement(IntlMessages, {\n    id: \"controlSession\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }\n  })\n}];\n\nclass Grades extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.addGrade = () => {\n      var newData = [];\n      var oldData = [];\n      this.state.studentList.map((grade, index) => {\n        if (grade.id == '') {\n          newData.push({\n            student_id: grade.student_id,\n            note: grade.note,\n            class_id: this.state.classe,\n            exam_id: this.state.examen,\n            status: true\n          });\n        } else {\n          oldData.push({\n            id: grade.id,\n            student_id: grade.student_id,\n            note: grade.note,\n            class_id: this.state.classe,\n            exam_id: this.state.examen,\n            status: true\n          });\n        }\n      });\n\n      if (newData.length > 0) {\n        this.props.addGrade(newData);\n      }\n\n      if (oldData.length > 0) {\n        oldData.map(gradeItem => {\n          this.props.updateGrade(gradeItem);\n        });\n        this.props.updateAlerte();\n      }\n\n      this.setState({\n        studentList: [],\n        subject: '',\n        period: '',\n        examen: '',\n        level: '',\n        section: '',\n        classe: ''\n      });\n    };\n\n    this.reset = () => {\n      let grades = [];\n      let data = [];\n      this.state.studentList.map(option => data.push({\n        student_id: option.student_id,\n        id: option.id,\n        note: '',\n        class_id: this.state.classe,\n        exam_id: this.state.examen,\n        status: true\n      }));\n      this.state.studentList.map(option => grades.push({\n        student_id: option.student_id,\n        id: option.id,\n        note: '',\n        studentInfo: option.studentInfo\n      }));\n      data.map(gradeItem => {\n        this.props.updateGrade(gradeItem);\n      });\n      this.props.resetAlerte();\n      this.setState({\n        studentList: grades\n      });\n    };\n\n    this.handleBlur = event => {};\n\n    this.handleChange = name => event => {\n      if (name === 'level') {\n        if (event.target.value > 10) {\n          this.setState({\n            [name]: event.target.value,\n            Disable_section: false,\n            classe: '',\n            section: 0,\n            studentList: [],\n            subject: '',\n            period: '',\n            examen: ''\n          });\n        } else {\n          this.setState({\n            [name]: event.target.value,\n            Disable_section: true,\n            classe: '',\n            section: 0,\n            subject: '',\n            studentList: [],\n            period: '',\n            examen: ''\n          });\n        }\n      } else if (name === 'section') {\n        this.setState({\n          classe: '',\n          studentList: [],\n          [name]: event.target.value,\n          period: '',\n          examen: ''\n        });\n      } else if (name === 'classe') {\n        var studentGrades = [];\n        this.setState({\n          [name]: event.target.value,\n          period: '',\n          subject: '',\n          examen: ''\n        });\n        axios.get(`${baseUrl.baseUrl}/students/fetchAllStudentsDataByClassID/` + event.target.value + `?access_token=${localStorage.token}`).then(res => {\n          res.data.classData.map(option => {\n            if (option.profile.user.status) {\n              studentGrades.push({\n                id: '',\n                student_id: option.id,\n                note: '',\n                studentInfo: option\n              });\n            }\n          });\n          this.setState({\n            studentList: studentGrades\n          });\n        });\n      } else if (name === 'subject') {\n        let studentGrades = [];\n        this.state.studentList.map(option => {\n          studentGrades.push({\n            id: '',\n            student_id: option.student_id,\n            note: '',\n            studentInfo: option.studentInfo\n          });\n        });\n        this.setState({\n          [name]: event.target.value,\n          period: '',\n          examen: '',\n          studentList: studentGrades\n        });\n      } else if (name === 'period') {\n        let studentGrades = [];\n        this.state.studentList.map(option => {\n          studentGrades.push({\n            id: '',\n            student_id: option.student_id,\n            note: '',\n            studentInfo: option.studentInfo\n          });\n        });\n        this.setState({\n          [name]: event.target.value,\n          examen: '',\n          studentList: studentGrades\n        });\n      } else if (name === 'examen') {\n        let studentGrades = [];\n        this.state.studentList.map(option => {\n          studentGrades.push({\n            id: '',\n            student_id: option.student_id,\n            note: '',\n            studentInfo: option.studentInfo\n          });\n        });\n        let apiEndpoint = `${baseUrl.baseUrl}/notes?access_token=${localStorage.token}&filter[where][and][0][exam_id]=` + event.target.value + `&filter[where][and][1][class_id]=` + this.state.classe;\n        axios.get(apiEndpoint).then(res => {\n          if (res.data.length > 0) {\n            res.data.map(option => {\n              let index = _.findIndex(studentGrades, {\n                student_id: option.student_id\n              });\n\n              if (index >= 0) {\n                _.fill(studentGrades, {\n                  id: option.id,\n                  student_id: option.student_id,\n                  note: option.note,\n                  studentInfo: studentGrades[index].studentInfo\n                }, index, index + 1);\n              }\n            });\n            this.setState({\n              studentList: studentGrades\n            });\n          } else {\n            this.setState({\n              studentList: studentGrades\n            });\n          }\n        });\n        this.setState({\n          [name]: event.target.value\n        });\n      } else {\n        this.setState({\n          [name]: event.target.value\n        });\n      }\n    };\n\n    this.handleChangeNote = id => event => {\n      let ListNote = this.state.studentList;\n\n      let index = _.findIndex(ListNote, {\n        student_id: id\n      });\n\n      _.fill(ListNote, {\n        id: ListNote[index].id,\n        student_id: id,\n        note: event.target.value,\n        studentInfo: ListNote[index].studentInfo\n      }, index, index + 1);\n\n      this.setState({\n        studentList: ListNote\n      });\n    };\n\n    this.state = {\n      Disable_section: true,\n      examen: '',\n      classe: '',\n      level: '',\n      section: '',\n      subject: '',\n      period: '',\n      studentList: []\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.addGrade = this.addGrade.bind(this);\n    this.handleChangeNote = this.handleChangeNote.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  componentWillMount() {\n    this.props.getSections();\n    this.props.getEstablishment();\n    this.props.getLevelsVirtualClass();\n    this.props.getSubject();\n    this.props.getExam();\n    this.props.getClasses();\n  }\n\n  render() {\n    const sections = Array.from(this.props.classSections);\n    const levels = Array.from(this.props.levels);\n    const establishments = Array.from(this.props.establishments);\n    const classes = Array.from(this.props.classes);\n    let estab_typeId;\n\n    if (establishments.length !== 0) {\n      estab_typeId = establishments.filter(estab => estab.id == localStorage.establishment_id)[0].estab_type_id;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"app-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 7\n      }\n    }, this.props.successStatus ? /*#__PURE__*/React.createElement(UncontrolledAlert, {\n      className: \"alert-addon-card bg-success bg-success text-white shadow-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-addon alert-addon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"zmdi zmdi-cloud-done zmdi-hc-fw zmdi-hc-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"d-inline-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }\n    }, \" \", this.props.message, \" \")) : '', this.props.errorStatus ? /*#__PURE__*/React.createElement(UncontrolledAlert, {\n      className: \"alert-addon-card bg-danger bg-danger text-white shadow-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-addon alert-addon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"zmdi zmdi-cloud-done zmdi-hc-fw zmdi-hc-lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"d-inline-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }, \" \", this.props.message)) : '', /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardBox, {\n      heading: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"component.grade.form.filter.class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 22\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      id: \"level\",\n      select: true,\n      helperText: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.note.niveau\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 31\n        }\n      }),\n      value: this.state.level,\n      onChange: this.handleChange('level'),\n      SelectProps: {},\n      variant: \"outlined\",\n      margin: \"normal\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }\n    }, levels.map(option => option.estab_type_id === estab_typeId ? /*#__PURE__*/React.createElement(MenuItem, {\n      key: option.id,\n      value: option.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 23\n      }\n    }, this.props.settings.languageId == 'tunisia' ? option.name_AR : this.props.settings.languageId == 'french' ? option.name_FR : option.name_EN) : ''))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      disabled: this.state.Disable_section,\n      id: \"Section\",\n      select: true,\n      helperText: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.class.level.input.label.section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 21\n        }\n      }),\n      value: this.state.section,\n      onChange: this.handleChange('section'),\n      SelectProps: {},\n      variant: \"outlined\",\n      margin: \"normal\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 17\n      }\n    }, getSectionFromLevel(sections, this.state.level).map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option.id,\n      value: option.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 23\n      }\n    }, option.name)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      id: \"classe\",\n      select: true,\n      helperText: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.note.class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 31\n        }\n      }),\n      value: this.state.classe,\n      onChange: this.handleChange('classe'),\n      SelectProps: {},\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 17\n      }\n    }, this.state.level > 10 ? classes.map(option => option.level_id === this.state.level && option.section_id === this.state.section && option.establishment_id === estab_typeId && option.status ? /*#__PURE__*/React.createElement(MenuItem, {\n      key: option.id,\n      value: option.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 27\n      }\n    }, this.props.settings.languageId == 'tunisia' ? option.ar_name : option.name) : '') : classes.map(option => option.level_id === this.state.level && option.establishment_id === estab_typeId && option.status ? /*#__PURE__*/React.createElement(MenuItem, {\n      key: option.id,\n      value: option.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 27\n      }\n    }, this.props.settings.languageId == 'tunisia' ? option.ar_name : option.name, ' ') : ''))))), /*#__PURE__*/React.createElement(CardBox, {\n      heading: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"component.grade.form.filter.exam\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 22\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      id: \"subject\",\n      select: true,\n      helperText: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.note.subject\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 31\n        }\n      }),\n      value: this.state.subject,\n      onChange: this.handleChange('subject'),\n      SelectProps: {},\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 17\n      }\n    }, subjectsByLevelBySection(this.props.subjects, this.state.level, this.state.section).map(subject => /*#__PURE__*/React.createElement(MenuItem, {\n      key: subject.id,\n      value: subject.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 21\n      }\n    }, this.props.settings.languageId == 'tunisia' ? subject.name_AR : this.props.settings.languageId == 'french' ? subject.name_FR : subject.name_EN)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      name: \"period\",\n      id: \"period\",\n      select: true,\n      helperText: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.note.p\\xE9riode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 31\n        }\n      }),\n      onChange: this.handleChange('period'),\n      value: this.state.period,\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 17\n      }\n    }, periodExam.map(option => /*#__PURE__*/React.createElement(MenuItem, {\n      key: option.value,\n      value: option.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 21\n      }\n    }, option.label)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-sm-4\",\n      align: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      id: \"examen\",\n      select: true,\n      helperText: /*#__PURE__*/React.createElement(IntlMessages, {\n        id: \"components.note.exam\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 31\n        }\n      }),\n      value: this.state.examen,\n      onChange: this.handleChange('examen'),\n      margin: \"normal\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 17\n      }\n    }, this.props.exams.map(exam => exam.class_id === this.state.classe && exam.subject_id === this.state.subject && exam.period === this.state.period && exam.status ? /*#__PURE__*/React.createElement(MenuItem, {\n      key: exam.id,\n      value: exam.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 23\n      }\n    }, exam.type) : '')))))), /*#__PURE__*/React.createElement(ListGrade, {\n      reset: this.reset,\n      handleChangeNote: this.handleChangeNote,\n      studentList: this.state.studentList,\n      addGrade: this.addGrade,\n      classId: this.state.classe,\n      examId: this.state.examen,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getSubject,\n  getExam,\n  getClasses,\n  getLevelsVirtualClass,\n  getEstablishment,\n  getSections,\n  getSectionFromLevel,\n  getStudentClass,\n  addGrade,\n  getGrades,\n  updateGrade,\n  updateAlerte,\n  resetAlerte\n})(Grades);","map":{"version":3,"sources":["/home/oem/Documents/projects/educap-pro/educap-pro-front/src/app/routes/GradesMenu/routes/Grade/Grades.js"],"names":["React","IntlMessages","UncontrolledAlert","TextField","CardBox","MenuItem","ListGrade","connect","addGrade","getGrades","updateGrade","updateAlerte","resetAlerte","getSubject","getExam","getClasses","getLevelsVirtualClass","getEstablishment","getSections","getSectionFromLevel","getStudentClass","subjectsByLevelBySection","axios","baseUrl","_","mapStateToProps","state","classSections","remoteSections","establishments","establishment","remoteEstablishments","levels","ClassLevels","remoteLevels","subjects","subject","remoteSubjects","classes","students","callRegister","studentsClass","settings","locale","exams","exam","remoteExams","grades","grade","successStatus","alert","success","errorStatus","error","message","periodExam","value","label","Grades","Component","constructor","props","newData","oldData","studentList","map","index","id","push","student_id","note","class_id","classe","exam_id","examen","status","length","gradeItem","setState","period","level","section","reset","data","option","studentInfo","handleBlur","event","handleChange","name","target","Disable_section","studentGrades","get","localStorage","token","then","res","classData","profile","user","apiEndpoint","findIndex","fill","handleChangeNote","ListNote","bind","componentWillMount","render","sections","Array","from","estab_typeId","filter","estab","establishment_id","estab_type_id","languageId","name_AR","name_FR","name_EN","level_id","section_id","ar_name","subject_id","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport IntlMessages from '../../../../../util/IntlMessages';\nimport { UncontrolledAlert } from 'reactstrap';\nimport TextField from '@material-ui/core/TextField';\nimport CardBox from '../../../../../components/CardBox/index';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListGrade from './ListGrade.js';\nimport { connect } from 'react-redux';\nimport {\n  addGrade,\n  getGrades,\n  updateGrade,\n  updateAlerte,\n  resetAlerte,\n} from '../../../../../actions/noteActions';\n\nimport { getSubject } from '../../../../../actions/subjectAction';\nimport { getExam } from '../../../../../actions/examAction';\nimport { getClasses } from '../../../../../actions/classeAction';\nimport { getLevelsVirtualClass } from '../../../../../actions/classLevelAction';\nimport { getEstablishment } from '../../../../../actions/establishmentAction';\nimport {\n  getSections,\n  getSectionFromLevel,\n} from '../../../../../actions/sectionAction';\nimport { getStudentClass } from '../../../../../actions/RegistreAction';\nimport { subjectsByLevelBySection } from '../../../../../actions/subjectAction';\nimport axios from 'axios';\nimport baseUrl from '../../../../../config/config';\nimport _ from 'lodash';\n\nfunction mapStateToProps(state) {\n  return {\n    classSections: state.classSections.remoteSections,\n    establishments: state.establishment.remoteEstablishments,\n    levels: state.ClassLevels.remoteLevels,\n    subjects: state.subject.remoteSubjects,\n    classes: state.classes,\n    students: state.callRegister.studentsClass,\n    settings: state.settings.locale,\n    exams: state.exam.remoteExams,\n    grades: state.grade.grades,\n    successStatus: state.alert.success,\n    errorStatus: state.alert.error,\n    message: state.alert.message,\n  };\n}\nconst periodExam = [\n  {\n    value: '1er Trimestre',\n    label: <IntlMessages id=\"first.trimester\" />,\n  },\n  {\n    value: '2eme Trimestre',\n    label: <IntlMessages id=\"second.trimester\" />,\n  },\n  {\n    value: '3eme Trimestre',\n    label: <IntlMessages id=\"third.trimester\" />,\n  },\n  {\n    value: 'Session Controle',\n    label: <IntlMessages id=\"controlSession\" />,\n  },\n];\nclass Grades extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Disable_section: true,\n      examen: '',\n      classe: '',\n      level: '',\n      section: '',\n      subject: '',\n      period: '',\n      studentList: [],\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n    this.addGrade = this.addGrade.bind(this);\n    this.handleChangeNote = this.handleChangeNote.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  addGrade = () => {\n    var newData = [];\n    var oldData = [];\n    this.state.studentList.map((grade, index) => {\n      if (grade.id == '') {\n        newData.push({\n          student_id: grade.student_id,\n          note: grade.note,\n          class_id: this.state.classe,\n          exam_id: this.state.examen,\n          status: true,\n        });\n      } else {\n        oldData.push({\n          id: grade.id,\n          student_id: grade.student_id,\n          note: grade.note,\n          class_id: this.state.classe,\n          exam_id: this.state.examen,\n          status: true,\n        });\n      }\n    });\n\n    if (newData.length > 0) {\n      this.props.addGrade(newData);\n    }\n    if (oldData.length > 0) {\n      oldData.map((gradeItem) => {\n        this.props.updateGrade(gradeItem);\n      });\n      this.props.updateAlerte();\n    }\n\n    this.setState({\n      studentList: [],\n      subject: '',\n      period: '',\n      examen: '',\n      level: '',\n      section: '',\n      classe: '',\n    });\n  };\n\n  reset = () => {\n    let grades = [];\n    let data = [];\n    this.state.studentList.map((option) =>\n      data.push({\n        student_id: option.student_id,\n        id: option.id,\n        note: '',\n        class_id: this.state.classe,\n        exam_id: this.state.examen,\n        status: true,\n      })\n    );\n    this.state.studentList.map((option) =>\n      grades.push({\n        student_id: option.student_id,\n        id: option.id,\n        note: '',\n        studentInfo: option.studentInfo,\n      })\n    );\n\n    data.map((gradeItem) => {\n      this.props.updateGrade(gradeItem);\n    });\n    this.props.resetAlerte();\n\n    this.setState({\n      studentList: grades,\n    });\n  };\n  componentWillMount() {\n    this.props.getSections();\n    this.props.getEstablishment();\n    this.props.getLevelsVirtualClass();\n    this.props.getSubject();\n    this.props.getExam();\n    this.props.getClasses();\n  }\n\n  handleBlur = (event) => {};\n\n  handleChange = (name) => (event) => {\n    if (name === 'level') {\n      if (event.target.value > 10) {\n        this.setState({\n          [name]: event.target.value,\n          Disable_section: false,\n          classe: '',\n          section: 0,\n          studentList: [],\n          subject: '',\n          period: '',\n          examen: '',\n        });\n      } else {\n        this.setState({\n          [name]: event.target.value,\n          Disable_section: true,\n          classe: '',\n          section: 0,\n          subject: '',\n          studentList: [],\n          period: '',\n          examen: '',\n        });\n      }\n    } else if (name === 'section') {\n      this.setState({\n        classe: '',\n        studentList: [],\n        [name]: event.target.value,\n        period: '',\n        examen: '',\n      });\n    } else if (name === 'classe') {\n      var studentGrades = [];\n      this.setState({\n        [name]: event.target.value,\n        period: '',\n        subject: '',\n        examen: '',\n      });\n      axios\n\n        .get(\n          `${baseUrl.baseUrl}/students/fetchAllStudentsDataByClassID/` +\n            event.target.value +\n            `?access_token=${localStorage.token}`\n        )\n        .then((res) => {\n          res.data.classData.map((option) => {\n            if (option.profile.user.status) {\n              studentGrades.push({\n                id: '',\n                student_id: option.id,\n                note: '',\n                studentInfo: option,\n              });\n            }\n          });\n\n          this.setState({\n            studentList: studentGrades,\n          });\n        });\n    } else if (name === 'subject') {\n      let studentGrades = [];\n      this.state.studentList.map((option) => {\n        studentGrades.push({\n          id: '',\n          student_id: option.student_id,\n          note: '',\n          studentInfo: option.studentInfo,\n        });\n      });\n      this.setState({\n        [name]: event.target.value,\n        period: '',\n        examen: '',\n        studentList: studentGrades,\n      });\n    } else if (name === 'period') {\n      let studentGrades = [];\n      this.state.studentList.map((option) => {\n        studentGrades.push({\n          id: '',\n          student_id: option.student_id,\n          note: '',\n          studentInfo: option.studentInfo,\n        });\n      });\n\n      this.setState({\n        [name]: event.target.value,\n        examen: '',\n        studentList: studentGrades,\n      });\n    } else if (name === 'examen') {\n      let studentGrades = [];\n      this.state.studentList.map((option) => {\n        studentGrades.push({\n          id: '',\n          student_id: option.student_id,\n          note: '',\n          studentInfo: option.studentInfo,\n        });\n      });\n      let apiEndpoint =\n        `${baseUrl.baseUrl}/notes?access_token=${localStorage.token}&filter[where][and][0][exam_id]=` +\n        event.target.value +\n        `&filter[where][and][1][class_id]=` +\n        this.state.classe;\n      axios.get(apiEndpoint).then((res) => {\n        if (res.data.length > 0) {\n          res.data.map((option) => {\n            let index = _.findIndex(studentGrades, {\n              student_id: option.student_id,\n            });\n            if (index >= 0) {\n              _.fill(\n                studentGrades,\n                {\n                  id: option.id,\n                  student_id: option.student_id,\n                  note: option.note,\n                  studentInfo: studentGrades[index].studentInfo,\n                },\n                index,\n                index + 1\n              );\n            }\n          });\n\n          this.setState({\n            studentList: studentGrades,\n          });\n        } else {\n          this.setState({\n            studentList: studentGrades,\n          });\n        }\n      });\n\n      this.setState({\n        [name]: event.target.value,\n      });\n    } else {\n      this.setState({ [name]: event.target.value });\n    }\n  };\n\n  handleChangeNote = (id) => (event) => {\n    let ListNote = this.state.studentList;\n    let index = _.findIndex(ListNote, { student_id: id });\n    _.fill(\n      ListNote,\n      {\n        id: ListNote[index].id,\n        student_id: id,\n        note: event.target.value,\n        studentInfo: ListNote[index].studentInfo,\n      },\n      index,\n      index + 1\n    );\n    this.setState({ studentList: ListNote });\n  };\n\n  render() {\n    const sections = Array.from(this.props.classSections);\n    const levels = Array.from(this.props.levels);\n    const establishments = Array.from(this.props.establishments);\n    const classes = Array.from(this.props.classes);\n\n    let estab_typeId;\n    if (establishments.length !== 0) {\n      estab_typeId = establishments.filter(\n        (estab) => estab.id == localStorage.establishment_id\n      )[0].estab_type_id;\n    }\n    return (\n      <div className=\"app-wrapper\">\n        {this.props.successStatus ? (\n          <UncontrolledAlert className=\"alert-addon-card bg-success bg-success text-white shadow-lg\">\n            <span className=\"icon-addon alert-addon\">\n              <i className=\"zmdi zmdi-cloud-done zmdi-hc-fw zmdi-hc-lg\" />\n            </span>\n            <span className=\"d-inline-block\"> {this.props.message} </span>\n          </UncontrolledAlert>\n        ) : (\n          ''\n        )}\n        {this.props.errorStatus ? (\n          <UncontrolledAlert className=\"alert-addon-card bg-danger bg-danger text-white shadow-lg\">\n            <span className=\"icon-addon alert-addon\">\n              <i className=\"zmdi zmdi-cloud-done zmdi-hc-fw zmdi-hc-lg\" />\n            </span>\n            <span className=\"d-inline-block\"> {this.props.message}</span>\n          </UncontrolledAlert>\n        ) : (\n          ''\n        )}\n        <div className=\"row\">\n          <CardBox\n            heading={<IntlMessages id=\"component.grade.form.filter.class\" />}\n          >\n            <div className=\"row\">\n              <div className=\"col-sm-4\" align=\"left\">\n                <TextField\n                  required\n                  id=\"level\"\n                  select\n                  helperText={<IntlMessages id=\"components.note.niveau\" />}\n                  value={this.state.level}\n                  onChange={this.handleChange('level')}\n                  SelectProps={{}}\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                >\n                  {levels.map((option) =>\n                    option.estab_type_id === estab_typeId ? (\n                      <MenuItem key={option.id} value={option.id}>\n                        {this.props.settings.languageId == 'tunisia'\n                          ? option.name_AR\n                          : this.props.settings.languageId == 'french'\n                          ? option.name_FR\n                          : option.name_EN}\n                      </MenuItem>\n                    ) : (\n                      ''\n                    )\n                  )}\n                </TextField>\n              </div>\n              <div className=\"col-sm-4\" align=\"left\">\n                <TextField\n                  required\n                  disabled={this.state.Disable_section}\n                  id=\"Section\"\n                  select\n                  helperText={\n                    <IntlMessages id=\"components.class.level.input.label.section\" />\n                  }\n                  value={this.state.section}\n                  onChange={this.handleChange('section')}\n                  SelectProps={{}}\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                >\n                  {getSectionFromLevel(sections, this.state.level).map(\n                    (option) => (\n                      <MenuItem key={option.id} value={option.id}>\n                        {option.name}\n                      </MenuItem>\n                    )\n                  )}\n                </TextField>\n              </div>\n              <div className=\"col-sm-4\" align=\"left\">\n                <TextField\n                  required\n                  id=\"classe\"\n                  select\n                  helperText={<IntlMessages id=\"components.note.class\" />}\n                  value={this.state.classe}\n                  onChange={this.handleChange('classe')}\n                  SelectProps={{}}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  fullWidth\n                >\n                  {this.state.level > 10\n                    ? classes.map((option) =>\n                        option.level_id === this.state.level &&\n                        option.section_id === this.state.section &&\n                        option.establishment_id === estab_typeId &&\n                        option.status ? (\n                          <MenuItem key={option.id} value={option.id}>\n                            {this.props.settings.languageId == 'tunisia'\n                              ? option.ar_name\n                              : option.name}\n                          </MenuItem>\n                        ) : (\n                          ''\n                        )\n                      )\n                    : classes.map((option) =>\n                        option.level_id === this.state.level &&\n                        option.establishment_id === estab_typeId &&\n                        option.status ? (\n                          <MenuItem key={option.id} value={option.id}>\n                            {this.props.settings.languageId == 'tunisia'\n                              ? option.ar_name\n                              : option.name}{' '}\n                          </MenuItem>\n                        ) : (\n                          ''\n                        )\n                      )}\n                </TextField>\n              </div>\n            </div>\n          </CardBox>\n          <CardBox\n            heading={<IntlMessages id=\"component.grade.form.filter.exam\" />}\n          >\n            <div className=\"row\">\n              <div className=\"col-sm-4\" align=\"left\">\n                <TextField\n                  required\n                  id=\"subject\"\n                  select\n                  helperText={<IntlMessages id=\"components.note.subject\" />}\n                  value={this.state.subject}\n                  onChange={this.handleChange('subject')}\n                  SelectProps={{}}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  fullWidth\n                >\n                  {subjectsByLevelBySection(\n                    this.props.subjects,\n                    this.state.level,\n                    this.state.section\n                  ).map((subject) => (\n                    <MenuItem key={subject.id} value={subject.id}>\n                      {this.props.settings.languageId == 'tunisia'\n                        ? subject.name_AR\n                        : this.props.settings.languageId == 'french'\n                        ? subject.name_FR\n                        : subject.name_EN}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </div>\n              <div className=\"col-sm-4\" align=\"left\">\n                <TextField\n                  required\n                  name=\"period\"\n                  id=\"period\"\n                  select\n                  helperText={<IntlMessages id=\"components.note.période\" />}\n                  onChange={this.handleChange('period')}\n                  value={this.state.period}\n                  fullWidth\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                >\n                  {periodExam.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.label}\n                    </MenuItem>\n                  ))}\n                </TextField>\n              </div>\n              <div className=\"col-sm-4\" align=\"left\">\n                <TextField\n                  required\n                  id=\"examen\"\n                  select\n                  helperText={<IntlMessages id=\"components.note.exam\" />}\n                  value={this.state.examen}\n                  onChange={this.handleChange('examen')}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  fullWidth\n                >\n                  {this.props.exams.map((exam) =>\n                    exam.class_id === this.state.classe &&\n                    exam.subject_id === this.state.subject &&\n                    exam.period === this.state.period &&\n                    exam.status ? (\n                      <MenuItem key={exam.id} value={exam.id}>\n                        {exam.type}\n                      </MenuItem>\n                    ) : (\n                      ''\n                    )\n                  )}\n                </TextField>\n              </div>\n            </div>\n          </CardBox>\n        </div>\n        <ListGrade\n          reset={this.reset}\n          handleChangeNote={this.handleChangeNote}\n          studentList={this.state.studentList}\n          addGrade={this.addGrade}\n          classId={this.state.classe}\n          examId={this.state.examen}\n        />\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  {\n    getSubject,\n    getExam,\n    getClasses,\n    getLevelsVirtualClass,\n    getEstablishment,\n    getSections,\n    getSectionFromLevel,\n    getStudentClass,\n    addGrade,\n    getGrades,\n    updateGrade,\n    updateAlerte,\n    resetAlerte,\n  }\n)(Grades);\n"]},"metadata":{},"sourceType":"module"}