{"ast":null,"code":"import { callService } from '../_services/call.service';\nimport { GET_ALL_CallRegister, GET_CONTEXTUAL_EVENT, GET_STUDENTS_CLASS, GET_STUDENTS_ABSENT, GIVE_STUDENT_TICKET, SHOW_ERROR_MESSAGE, HIDE_ERROR_MESSAGE, HIDE_SUCCESS_MESSAGE, SHOW_SUCCESS_MESSAGE } from '../constants/ActionTypes';\nimport _ from 'lodash';\nexport const getCallRegister = () => {\n  return dispatch => {\n    let apiEndpoint = `/call_registers?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      dispatch({\n        type: GET_ALL_CallRegister,\n        payload: response.data\n      });\n    }).catch(err => {});\n  };\n};\nexport const getContextualEventsByprofessor = professorProfile => {\n  return dispatch => {\n    let apiEndpoint = `/professors/getContextualEvent/` + professorProfile + `?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      let result = {\n        notEmpty: !_.isEmpty(response.data.contextualEvent),\n        data: response.data.contextualEvent\n      };\n      dispatch({\n        type: GET_CONTEXTUAL_EVENT,\n        payload: result\n      });\n    }).catch(err => {});\n  };\n};\nexport const callRegisterAction = {\n  getCallRegister,\n  getContextualEventsByprofessor\n};\nexport const getStudentClass = classId => {\n  return dispatch => {\n    let apiEndpoint = `/students/fetchStudentsByClassID/` + classId + `?access_token=${localStorage.token}`;\n    callService.get(apiEndpoint).then(response => {\n      let result = response.data;\n      dispatch({\n        type: GET_STUDENTS_CLASS,\n        payload: result\n      });\n    }).catch(err => {}).catch(err => {});\n  };\n}; // export const fetchAbsent = (classId) => {\n// return dispatch => {\n//   let apiEndpoint = `/student_calls/fetchAbsentStudentsByClassId/` + classId + `?access_token=${localStorage.token}`\n//   callService.get(apiEndpoint)\n//     .then(res => {\n//       if (!_.isEmpty(res.data.students)) {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       } else {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       }\n//     })\n// }\n// }\n\nexport const giveTicket = data => {\n  return dispatch => {\n    let apiEndpoint = `/absent_pass/giveTicketToPass?access_token=${localStorage.token}`;\n    callService.post(apiEndpoint, data).then(res => {\n      if (res) {\n        dispatch({\n          type: GIVE_STUDENT_TICKET,\n          payload: res.data.data\n        });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'Le billet est affecté avec succès'\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_SUCCESS_MESSAGE\n          });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload: \"Une erreur est survenue lors de l'affectation du billet merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({\n            type: HIDE_ERROR_MESSAGE\n          });\n        }, 4000);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/oem/Documents/projects/educap/classebook-front-web/src/actions/RegistreAction.js"],"names":["callService","GET_ALL_CallRegister","GET_CONTEXTUAL_EVENT","GET_STUDENTS_CLASS","GET_STUDENTS_ABSENT","GIVE_STUDENT_TICKET","SHOW_ERROR_MESSAGE","HIDE_ERROR_MESSAGE","HIDE_SUCCESS_MESSAGE","SHOW_SUCCESS_MESSAGE","_","getCallRegister","dispatch","apiEndpoint","localStorage","token","get","then","response","type","payload","data","catch","err","getContextualEventsByprofessor","professorProfile","result","notEmpty","isEmpty","contextualEvent","callRegisterAction","getStudentClass","classId","giveTicket","post","res","setTimeout"],"mappings":"AAAA,SAASA,WAAT,QAA4B,2BAA5B;AACA,SACEC,oBADF,EAEEC,oBAFF,EAGEC,kBAHF,EAIEC,mBAJF,EAKEC,mBALF,EAMEC,kBANF,EAOEC,kBAPF,EAQEC,oBARF,EASEC,oBATF,QAUO,0BAVP;AAWA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AACnC,SAAOC,QAAQ,IAAI;AACjB,QAAIC,WAAW,GAAI,gCAA+BC,YAAY,CAACC,KAAM,EAArE;AACAf,IAAAA,WAAW,CACRgB,GADH,CACOH,WADP,EAEGI,IAFH,CAEQC,QAAQ,IAAI;AAChBN,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAElB,oBAAR;AAA8BmB,QAAAA,OAAO,EAAEF,QAAQ,CAACG;AAAhD,OAAD,CAAR;AACD,KAJH,EAKGC,KALH,CAKSC,GAAG,IAAI,CAAE,CALlB;AAMD,GARD;AASD,CAVM;AAWP,OAAO,MAAMC,8BAA8B,GAAGC,gBAAgB,IAAI;AAChE,SAAOb,QAAQ,IAAI;AACjB,QAAIC,WAAW,GACZ,iCAAD,GACAY,gBADA,GAEC,iBAAgBX,YAAY,CAACC,KAAM,EAHtC;AAIAf,IAAAA,WAAW,CACRgB,GADH,CACOH,WADP,EAEGI,IAFH,CAEQC,QAAQ,IAAI;AAChB,UAAIQ,MAAM,GAAG;AACXC,QAAAA,QAAQ,EAAE,CAACjB,CAAC,CAACkB,OAAF,CAAUV,QAAQ,CAACG,IAAT,CAAcQ,eAAxB,CADA;AAEXR,QAAAA,IAAI,EAAEH,QAAQ,CAACG,IAAT,CAAcQ;AAFT,OAAb;AAKAjB,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEjB,oBAAR;AAA8BkB,QAAAA,OAAO,EAAEM;AAAvC,OAAD,CAAR;AACD,KATH,EAUGJ,KAVH,CAUSC,GAAG,IAAI,CAAE,CAVlB;AAWD,GAhBD;AAiBD,CAlBM;AAoBP,OAAO,MAAMO,kBAAkB,GAAG;AAChCnB,EAAAA,eADgC;AAEhCa,EAAAA;AAFgC,CAA3B;AAKP,OAAO,MAAMO,eAAe,GAAGC,OAAO,IAAI;AACxC,SAAOpB,QAAQ,IAAI;AACjB,QAAIC,WAAW,GACZ,mCAAD,GACAmB,OADA,GAEC,iBAAgBlB,YAAY,CAACC,KAAM,EAHtC;AAIAf,IAAAA,WAAW,CACRgB,GADH,CACOH,WADP,EAEGI,IAFH,CAEQC,QAAQ,IAAI;AAChB,UAAIQ,MAAM,GAAGR,QAAQ,CAACG,IAAtB;AAEAT,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEhB,kBAAR;AAA4BiB,QAAAA,OAAO,EAAEM;AAArC,OAAD,CAAR;AACD,KANH,EAOGJ,KAPH,CAOSC,GAAG,IAAI,CAAE,CAPlB,EAQGD,KARH,CAQSC,GAAG,IAAI,CAAE,CARlB;AASD,GAdD;AAeD,CAhBM,C,CAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,OAAO,MAAMU,UAAU,GAAGZ,IAAI,IAAI;AAChC,SAAOT,QAAQ,IAAI;AACjB,QAAIC,WAAW,GAAI,8CAA6CC,YAAY,CAACC,KAAM,EAAnF;AACAf,IAAAA,WAAW,CAACkC,IAAZ,CAAiBrB,WAAjB,EAA8BQ,IAA9B,EAAoCJ,IAApC,CAAyCkB,GAAG,IAAI;AAC9C,UAAIA,GAAJ,EAAS;AACPvB,QAAAA,QAAQ,CAAC;AAAEO,UAAAA,IAAI,EAAEd,mBAAR;AAA6Be,UAAAA,OAAO,EAAEe,GAAG,CAACd,IAAJ,CAASA;AAA/C,SAAD,CAAR;AACAT,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEV,oBADC;AAEPW,UAAAA,OAAO,EAAE;AAFF,SAAD,CAAR;AAIAgB,QAAAA,UAAU,CAAC,MAAM;AACfxB,UAAAA,QAAQ,CAAC;AAAEO,YAAAA,IAAI,EAAEX;AAAR,WAAD,CAAR;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OATD,MASO;AACLI,QAAAA,QAAQ,CAAC;AACPO,UAAAA,IAAI,EAAEb,kBADC;AAEPc,UAAAA,OAAO,EACL;AAHK,SAAD,CAAR;AAKAgB,QAAAA,UAAU,CAAC,MAAM;AACfxB,UAAAA,QAAQ,CAAC;AAAEO,YAAAA,IAAI,EAAEZ;AAAR,WAAD,CAAR;AACD,SAFS,EAEP,IAFO,CAAV;AAGD;AACF,KApBD;AAqBD,GAvBD;AAwBD,CAzBM","sourcesContent":["import { callService } from '../_services/call.service';\nimport {\n  GET_ALL_CallRegister,\n  GET_CONTEXTUAL_EVENT,\n  GET_STUDENTS_CLASS,\n  GET_STUDENTS_ABSENT,\n  GIVE_STUDENT_TICKET,\n  SHOW_ERROR_MESSAGE,\n  HIDE_ERROR_MESSAGE,\n  HIDE_SUCCESS_MESSAGE,\n  SHOW_SUCCESS_MESSAGE\n} from '../constants/ActionTypes';\nimport _ from 'lodash';\n\nexport const getCallRegister = () => {\n  return dispatch => {\n    let apiEndpoint = `/call_registers?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        dispatch({ type: GET_ALL_CallRegister, payload: response.data });\n      })\n      .catch(err => {});\n  };\n};\nexport const getContextualEventsByprofessor = professorProfile => {\n  return dispatch => {\n    let apiEndpoint =\n      `/professors/getContextualEvent/` +\n      professorProfile +\n      `?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        let result = {\n          notEmpty: !_.isEmpty(response.data.contextualEvent),\n          data: response.data.contextualEvent\n        };\n\n        dispatch({ type: GET_CONTEXTUAL_EVENT, payload: result });\n      })\n      .catch(err => {});\n  };\n};\n\nexport const callRegisterAction = {\n  getCallRegister,\n  getContextualEventsByprofessor\n};\n\nexport const getStudentClass = classId => {\n  return dispatch => {\n    let apiEndpoint =\n      `/students/fetchStudentsByClassID/` +\n      classId +\n      `?access_token=${localStorage.token}`;\n    callService\n      .get(apiEndpoint)\n      .then(response => {\n        let result = response.data;\n\n        dispatch({ type: GET_STUDENTS_CLASS, payload: result });\n      })\n      .catch(err => {})\n      .catch(err => {});\n  };\n};\n\n// export const fetchAbsent = (classId) => {\n// return dispatch => {\n//   let apiEndpoint = `/student_calls/fetchAbsentStudentsByClassId/` + classId + `?access_token=${localStorage.token}`\n//   callService.get(apiEndpoint)\n//     .then(res => {\n//       if (!_.isEmpty(res.data.students)) {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       } else {\n//         dispatch({ type: GET_STUDENTS_ABSENT, payload: res.data.students })\n//       }\n\n//     })\n// }\n\n// }\n\nexport const giveTicket = data => {\n  return dispatch => {\n    let apiEndpoint = `/absent_pass/giveTicketToPass?access_token=${localStorage.token}`;\n    callService.post(apiEndpoint, data).then(res => {\n      if (res) {\n        dispatch({ type: GIVE_STUDENT_TICKET, payload: res.data.data });\n        dispatch({\n          type: SHOW_SUCCESS_MESSAGE,\n          payload: 'Le billet est affecté avec succès'\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_SUCCESS_MESSAGE });\n        }, 4000);\n      } else {\n        dispatch({\n          type: SHOW_ERROR_MESSAGE,\n          payload:\n            \"Une erreur est survenue lors de l'affectation du billet merci d'essayer à nouveau\"\n        });\n        setTimeout(() => {\n          dispatch({ type: HIDE_ERROR_MESSAGE });\n        }, 4000);\n      }\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}